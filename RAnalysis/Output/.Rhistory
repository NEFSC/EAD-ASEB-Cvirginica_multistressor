df <- data.frame(blanks.table) # name dataframe for this singl e row
blanks_total <- rbind(blanks_total,df) #bind to a cumulative list dataframe
print(blanks_total) # print to monitor progress
}
blanks_total2 <- blanks_total %>%
#dplyr::filter(!(filename =='20210319_new_sensor_7' & Channel == 'CH8')) %>% # positive blank rate - omit, use other blank in file
dplyr::filter(!(filename =='20210319' & Channel == 'CH4')) %>% # slightly positive rate - omit, use other blank in the file
dplyr::filter(!(filename =='20210430_LOWtemp_HIGHsal' & Channel == 'CH8')) %>% # abnormally higher than other blank, error  -omit, use other blank on file
dplyr::filter(!(filename =='20210507_LOWtemp_HIGHsal' & Channel == 'CH4')) %>% # abnormally higher than other blank, error -omit, use other blank on file
mutate(across(everything(), ~ ifelse(. < 0, 0, .))) # all other positive rates hug zero, (i.e. 0.00089) - thus make zero
blanks_means <- blanks_total2 %>%
group_by(Date, Notes) %>%
dplyr::summarise(BLANK.mean.Lpc = mean(abs(BLANK.Lpc)),
BLANK.mean.Leq = mean(abs(BLANK.Leq)),
BLANK.mean.Lz = mean(abs(BLANK.Lz)))
Resp.blanks.merge <- merge(resp.data_merged, blanks_means, by=c("Date", "Notes")) %>% # NOTE: this repeats for every distinct length value
dplyr::filter(!Chamber_tank =='blank') %>%
dplyr::filter(!Lpc > 0) %>% # 14 with positive rate raw value - omitted
dplyr::mutate(resp_norm = abs(Lpc) - BLANK.mean.Lpc) # calc resp norm - note Lpc is still raw data  - thus a positive resp norm means blank > sample resp - bad data!
# filter for postive rates - look at the outliers in which the animal rates were < the blank!
Resp.blanks.merge_OM <- Resp.blanks.merge %>% dplyr::filter(!resp_norm < 0)  # omits respiration rate values showing an increase in O2 over time
Resp.outliers <- Resp.blanks.merge %>% dplyr::filter(resp_norm < 0)  # only 3 rates were ommitted
Resp.outliers
# calculate resp rates
# vial.vol <- 0.08 # milliliters (ml)
vial.vol <- 2.2 # milliliters (ml) - small Loligo chambers
Resp.Master <- merge(Resp.blanks.merge_OM[,c(1,3,5,9:13,17)], counts_resp[,c(1,6:7)], by = c('Date','Chamber_tank'))
Resp.Master$resp_ng_L_indiv_hr <- (
( ( (abs(Resp.Master$resp_norm)*1000000) * # call absolute value of resp in mg per minute - convert to ng min-1 (note negatives should aredy be omitted!_)
(vial.vol/1000) ) / # correct ng minute-1 to ng liter-1 by multiplying by the resp vial in liters
Resp.Master$Counts ) * # normalize by individual or larvae count - as to ng L-1 individual-1
(60)) # correct for the time; final value is ng Liter-1 individual-1 hour-1
# mean sd rates
mean(Resp.Master$resp_ng_L_indiv_hr) # mean = 1.460783
sd(Resp.Master$resp_ng_L_indiv_hr) # sd= 2.054197
# write master Resp file ------------------------------------------------------------------------------------- #
write.csv(Resp.Master,
"Output/Respiration/RespirationMaster.csv")# write
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/") # personal computer
# write master Resp file ------------------------------------------------------------------------------------- #
write.csv(Resp.Master,
"Output/Respiration/RespirationMaster.csv")# write
# write master Resp file ------------------------------------------------------------------------------------- #
write.csv(Resp.Master,
"Output/Respiration/RespirationMaster.csv")# write
library(emmeans)
library(car)
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/") # personal computer
Resp.Master  <- read.csv(file="Output/Respiration/RespirationMaster.csv", header=T) # reference for the respirometry data - contains the 'Chamber_Tank' for each sensor channel (whether an animal or a blank)
# model effect of treatment on resp rate 20210430
Resp_APRIL <- Resp.Master %>%
dplyr::filter(Date %in% '4/30/2021') # %>%
# Three way ANOVA
LMmod.APRIL   <- aov(lm(resp_ng_L_indiv_hr~Temp*pCO2*Salinity,data=Resp_APRIL))
shapiro.test(residuals(LMmod.APRIL)) # 0.006229 - non normal
# LOG transform
LMmod.APRIL_T   <- aov(lm(log(resp_ng_L_indiv_hr)~Temp*pCO2*Salinity,data=Resp_APRIL))
shapiro.test(residuals(LMmod.APRIL_T)) # 0.32
leveneTest(LMmod.APRIL_T) # 0.7807
summary(LMmod.APRIL_T)
# post hoc tests
library(emmeans)
posthoc<-emmeans(LMmod.APRIL_T, pairwise~Temp:pCO2, adjust="tukey")
multcomp::cld(posthoc$emmeans,alpha = 0.5, Letters = letters)
# Figures
Resp_APRIL_select  <- Resp_APRIL %>%
dplyr::select(c('resp_ng_L_indiv_hr', 'Temp', 'pCO2', 'Salinity')) %>%
dplyr::mutate(Age = '24hrs')
APRIL_all <- Resp_APRIL_select %>%
dplyr::mutate(Temp_pCO2 = paste(Temp,pCO2, sep = '_')) %>%
dplyr::mutate(full.treatment = (paste(Salinity, pCO2, Temp,sep=''))) %>%
dplyr::mutate(full.treatment = fct_relevel(full.treatment,
"LHL", "LHH", "LLL",'LLH',
"HHL", "HHH", "HLL", 'HLH')) %>%
ggplot(aes(Temp_pCO2, resp_ng_L_indiv_hr , fill = factor(Salinity))) +
geom_boxplot(size=0.2, alpha=0.1) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.5))+
scale_fill_manual(values=c("white", "grey40")) +
labs(title = "C virginica, 24 hr larvae",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%indiv^{-1}%.% hr^{-1}~")"),
x = "Sal_pCO2") +
annotate("text", x=2, y=5.8, label = "Low Salinity") +
#annotate("rect", xmin = 0, xmax = 4.5, ymin = 0, ymax = 6.5,alpha = .2) +
theme_classic()
APRIL_all
library(devtools) # devtools::install_github # use devtools to instlal github link
library(LoLinR) # install_github('colin-olito/LoLinR') # install LoLinR from github
library(dplyr)
library(lubridate)
library(rMR)
setwd("C:/Users/samjg/Documents/Github_repositories/Cvriginica_multistressor/RAnalysis")
setwd("C:/Users/samjg/Documents/Github_repositories/Cvriginica_multistressor/RAnalysis")
library(devtools) # devtools::install_github # use devtools to instlal github link
library(LoLinR) # install_github('colin-olito/LoLinR') # install LoLinR from github
library(dplyr)
library(lubridate)
library(rMR)
setwd("C:/Users/samjg/Documents/Github_repositories/Cvriginica_multistressor/RAnalysis")
path.p    <- "Data/Respiration" #the location of all your respirometry files
a         <- 0.4
ouputNAME <- "Output/Respiration/Cumulative_resp_alpha0.4.csv"
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis")
path.p    <- "Data/Respiration" #the location of all your respirometry files
a         <- 0.4
ouputNAME <- "Output/Respiration/Cumulative_resp_alpha0.4.csv"
# bring in the respiration file names
file.names.full        <- basename(list.files(path = path.p, pattern = "txt$", recursive = TRUE)) #list all csv file names in the folder and subfolders
file.names             <- file.names.full[c(3:4,6:7,10:11, 13,15, 19:20)] # call all target files (excluding tests and empty files) - open in notepad++ to make sure you have the correct files
file.names # check
file.names.table       <- data.frame(file.names)
file.names.table$about <- c('20210319_new_sensor_7', '20210319', '20210430_LOWtemp_HIGHsal',
'20210430_LOWtemp_LOWsal', '20210430_raw', '20210507_HIGHtemp_LOWsal',
'20210507_LOWtemp_LOWsal', '20210507_HIGHtemp_HIGHsal', '20210507_LOWtemp_HIGHsal_b', '20210507_LOWtemp_HIGHsal')
#is the data a txt file? (from Lolin 8 channel
resp_rerun           <- read.delim2(file = "Data/Respiration/run_1_raw.txt", header = TRUE,skip = 37)
#is the data a txt file? (from Lolin 8 channel
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis")
resp_rerun           <- read.delim2(file = "Data/Respiration/run_1_raw.txt", header = TRUE,skip = 37)
resp_rerun           <- read.delim2(file = "Data/Respiration/1_3_19_21_new_sensor_for_7.txt", header = TRUE,skip = 37)
#is the data a txt file? (from Lolin 8 channel
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis")
resp_rerun           <- read.delim2(file = "Data/Respiration/1_3_19_21_new_sensor_for_7.txt", header = TRUE,skip = 37)
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis")
resp_rerun           <- read.delim2(file = "Data/Respiration/1_3_19_21_new_sensor_for_7.txt", header = TRUE,skip = 37)
resp_rerun           <- read.delim2(file = "Data/Respiration/1_3_19_21_new_sensor_for_7.txt", header = TRUE,skip = 37)
resp_rerun           <- read.delim2(file = "Data/Respiration/1_3_19_21_new_sensor_for_7_raw.txt", header = TRUE, skip = 37)
resp_rerun           <- read.delim2(file = "Data/Respiration/1_3_19_21_new_sensor_for_7_raw.txt", header = TRUE, skip = 37, fileEncoding = 'latin1')
resp_rerun
#to calculate mg per L from air saturation....
temperature_C        <- as.numeric(resp_rerun$CH1.temp...C.[1])
barromP_kPa          <- as.numeric(resp_rerun$Barometric.pressure..hPa.[1]) / 10
salinity.pp.thou     <- as.numeric(resp_rerun$Salinity....[1])
resp_rerun_LoLin <- resp_rerun[seq(1, nrow(resp_rerun), 15), ]  %>% # data every 15 seconds to decrease the run time
dplyr::filter(!colnames(resp_rerun)[2] %in% 'NaN') %>% # Lolin recorede NAs are written as 'Nan' - wonts run unless removed!
dplyr::select(c("minutes", "CH2.O2...air.sat..")) %>% # CH2
#dplyr::select(c("minutes", "CH3.O2...air.sat..")) %>% # CH3
dplyr::select(c("minutes", "CH3.O2...air.sat..")) %>% # run 2 ch3 20221026
dplyr::filter(minutes >25) %>% # run 2 ch7 20221026 - before numute 20
dplyr::mutate(mgL = (DO.unit.convert(as.numeric(CH3.O2...air.sat..),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou)))
resp_rerun_LoLin <- resp_rerun[seq(1, nrow(resp_rerun), 15), ]  %>% # data every 15 seconds to decrease the run time
dplyr::filter(!colnames(resp_rerun)[2] %in% 'NaN') %>% # Lolin recorede NAs are written as 'Nan' - wonts run unless removed!
dplyr::select(c("minutes", "CH2.O2...air.sat..")) %>% # CH2
#dplyr::select(c("minutes", "CH3.O2...air.sat..")) %>% # CH3
#dplyr::select(c("minutes", "CH3.O2...air.sat..")) %>% # run 2 ch3 20221026
dplyr::filter(minutes >25) %>% # run 2 ch7 20221026 - before numute 20
dplyr::mutate(mgL = (DO.unit.convert(as.numeric(CH3.O2...air.sat..),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou)))
resp_rerun[seq(1, nrow(resp_rerun), 15), ]
resp_rerun           <- read.delim2(file = "Data/Respiration/1_3_19_21_new_sensor_for_7_raw.txt", header = TRUE, skip = 37, fileEncoding = 'latin1')
resp_rerun$date      <- paste((sub("2022.*", "", resp_rerun$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2022', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
resp_rerun$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2022/", "", resp_rerun$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
resp_rerun$seconds   <- (resp_rerun$time_Sec - resp_rerun$time_Sec[1])    # secs - calc the sec time series
resp_rerun$minutes   <- (resp_rerun$time_Sec - resp_rerun$time_Sec[1])/60 # mins - calc the minute time series
#to calculate mg per L from air saturation....
temperature_C        <- as.numeric(resp_rerun$CH1.temp...C.[1])
barromP_kPa          <- as.numeric(resp_rerun$Barometric.pressure..hPa.[1]) / 10
salinity.pp.thou     <- as.numeric(resp_rerun$Salinity....[1])
resp_rerun_LoLin <- resp_rerun[seq(1, nrow(resp_rerun), 15), ]  %>% # data every 15 seconds to decrease the run time
dplyr::filter(!colnames(resp_rerun)[2] %in% 'NaN') %>% # Lolin recorede NAs are written as 'Nan' - wonts run unless removed!
dplyr::select(c("minutes", "CH2.O2...air.sat..")) %>% # CH2
#dplyr::select(c("minutes", "CH3.O2...air.sat..")) %>% # CH3
#dplyr::select(c("minutes", "CH3.O2...air.sat..")) %>% # run 2 ch3 20221026
dplyr::filter(minutes >25) %>% # run 2 ch7 20221026 - before numute 20
dplyr::mutate(mgL = (DO.unit.convert(as.numeric(CH3.O2...air.sat..),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou)))
resp_rerun_LoLin <- resp_rerun[seq(1, nrow(resp_rerun), 15), ]  %>% # data every 15 seconds to decrease the run time
dplyr::filter(!colnames(resp_rerun)[2] %in% 'NaN') %>% # Lolin recorede NAs are written as 'Nan' - wonts run unless removed!
dplyr::select(c("minutes", "CH2.O2...air.sat..")) %>% # CH2
#dplyr::select(c("minutes", "CH3.O2...air.sat..")) %>% # CH3
#dplyr::select(c("minutes", "CH3.O2...air.sat..")) %>% # run 2 ch3 20221026
dplyr::filter(minutes >25) %>% # run 2 ch7 20221026 - before numute 20
dplyr::mutate(mgL = (DO.unit.convert(as.numeric(CH2.O2...air.sat..),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou)))
model <- rankLocReg(
xall    = as.numeric(resp_rerun_LoLin[, 1]),
yall    = as.numeric(resp_rerun_LoLin[, 3]), # call x as the minute timeseries and y as the mg L-1 O2
alpha   = 0.4,  # alpha was assigned earlier as 0.4 by the authors default suggestions - review Olito et al. and their github page for details
method  = "pc",
verbose = TRUE)
resp_rerun_LoLin[, 1]
resp_rerun_LoLin
resp_rerun[seq(1, nrow(resp_rerun), 15), ]  %>% # data every 15 seconds to decrease the run time
dplyr::filter(!colnames(resp_rerun)[2] %in% 'NaN') %>% # Lolin recorede NAs are written as 'Nan' - wonts run unless removed!
dplyr::select(c("minutes", "CH2.O2...air.sat.."))
resp_rerun           <- read.delim2(file = "Data/Respiration/1_3_19_21_new_sensor_for_7_raw.txt", header = TRUE, skip = 37, fileEncoding = 'latin1')
resp_rerun$date      <- paste((sub("2021.*", "", resp_rerun$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2022', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
resp_rerun$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2022/", "", resp_rerun$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
resp_rerun$date
resp_rerun$date      <- paste((sub("2021.*", "", resp_rerun$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2021', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
resp_rerun           <- read.delim2(file = "Data/Respiration/1_3_19_21_new_sensor_for_7_raw.txt", header = TRUE, skip = 37, fileEncoding = 'latin1')
resp_rerun$date      <- paste((sub("2021.*", "", resp_rerun$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2021', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
resp_rerun$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2022/", "", resp_rerun$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
resp_rerun$seconds   <- (resp_rerun$time_Sec - resp_rerun$time_Sec[1])    # secs - calc the sec time series
resp_rerun$minutes   <- (resp_rerun$time_Sec - resp_rerun$time_Sec[1])/60 # mins - calc the minute time series
resp_rerun$date
resp_rerun$time_Sec
resp_rerun           <- read.delim2(file = "Data/Respiration/1_3_19_21_new_sensor_for_7_raw.txt", header = TRUE, skip = 37, fileEncoding = 'latin1')
resp_rerun$date      <- paste((sub("2021.*", "", resp_rerun$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2021', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
resp_rerun$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2021/", "", resp_rerun$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
resp_rerun$seconds   <- (resp_rerun$time_Sec - resp_rerun$time_Sec[1])    # secs - calc the sec time series
resp_rerun$minutes   <- (resp_rerun$time_Sec - resp_rerun$time_Sec[1])/60 # mins - calc the minute time series
#to calculate mg per L from air saturation....
temperature_C        <- as.numeric(resp_rerun$CH1.temp...C.[1])
barromP_kPa          <- as.numeric(resp_rerun$Barometric.pressure..hPa.[1]) / 10
salinity.pp.thou     <- as.numeric(resp_rerun$Salinity....[1])
resp_rerun_LoLin <- resp_rerun[seq(1, nrow(resp_rerun), 15), ]  %>% # data every 15 seconds to decrease the run time
dplyr::filter(!colnames(resp_rerun)[2] %in% 'NaN') %>% # Lolin recorede NAs are written as 'Nan' - wonts run unless removed!
dplyr::select(c("minutes", "CH2.O2...air.sat..")) %>% # CH2
#dplyr::select(c("minutes", "CH3.O2...air.sat..")) %>% # CH3
#dplyr::select(c("minutes", "CH3.O2...air.sat..")) %>% # run 2 ch3 20221026
dplyr::filter(minutes >25) %>% # run 2 ch7 20221026 - before numute 20
dplyr::mutate(mgL = (DO.unit.convert(as.numeric(CH2.O2...air.sat..),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou)))
model <- rankLocReg(
xall    = as.numeric(resp_rerun_LoLin[, 1]),
yall    = as.numeric(resp_rerun_LoLin[, 3]), # call x as the minute timeseries and y as the mg L-1 O2
alpha   = 0.4,  # alpha was assigned earlier as 0.4 by the authors default suggestions - review Olito et al. and their github page for details
method  = "pc",
verbose = TRUE)
plot(model) # CH2; Lpc == -0.0296
plot(model) # CH2; Lpc == -0.0296
plot(model) # CH2; Lpc == -0.0296
plot(model) # CH2; Lpc == -0.0296
resp_rerun_LoLin <- resp_rerun[seq(1, nrow(resp_rerun), 15), ]  %>% # data every 15 seconds to decrease the run time
dplyr::filter(!colnames(resp_rerun)[2] %in% 'NaN') %>% # Lolin recorede NAs are written as 'Nan' - wonts run unless removed!
#dplyr::select(c("minutes", "CH2.O2...air.sat..")) %>% # CH2
dplyr::select(c("minutes", "CH3.O2...air.sat..")) %>% # CH3
#dplyr::select(c("minutes", "CH3.O2...air.sat..")) %>% # run 2 ch3 20221026
dplyr::filter(minutes >25) %>% # run 2 ch7 20221026 - before numute 20
dplyr::mutate(mgL = (DO.unit.convert(as.numeric(CH3.O2...air.sat..),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou)))
model <- rankLocReg(
xall    = as.numeric(resp_rerun_LoLin[, 1]),
yall    = as.numeric(resp_rerun_LoLin[, 3]), # call x as the minute timeseries and y as the mg L-1 O2
alpha   = 0.4,  # alpha was assigned earlier as 0.4 by the authors default suggestions - review Olito et al. and their github page for details
method  = "pc",
verbose = TRUE)
resp.data
plot(model) # CH3; Lpc == -0.0046
resp.data
exp_metadata <- read.csv(file="Data/ExperimentMetadata.csv", header=T) # treatment assignments to 'Chamber_Tank'
counts_resp  <- read.csv(file="Data/Counts_resp.csv", header=T) # reference for the respirometry data - contains the 'Chamber_Tank' for each sensor channel (whether an animal or a blank)
resp.ref     <- read.csv(file="Data/Respiration/Reference_master.csv", header=T) # reference for the respirometry data - contains the 'Chamber_Tank' for each sensor channel (whether an animal or a blank)
resp.data    <- read.csv(file="Output/Respiration/Cumulative_resp_alpha0.4.csv", header=T) %>% # read the calculate raw rates from 'resp_LoLin' script - contains the calculated rate (not normalized for blanks) for each sensor-channel
dplyr::filter(!Filename %in% '1_3_19_21_raw.txt') # use 1_3_19_21_new_sensor_for_7_raw.txt
resp.data
resp.data[3,3]
resp.data[2,3]
resp.data[2,3] <- -0.0046 # 1_3_19_21_raw - CH2
resp.data[3,3] <- -0.0072 # 1_3_19_21_raw - CH3
resp.data
# merge the exp_metadata with the resp.data
resp.ref_merged                 <- merge(exp_metadata, resp.ref, by = 'Chamber_tank', all=TRUE) # all TRUE allows us to keep the blanks
resp.data_merged                <- merge(resp.data, resp.ref_merged, by = c('Date', 'Channel','Notes','Filename')) # out master file moving forward....
resp.data_merged$TempCarbSal    <- paste(resp.data_merged$Temp, resp.data_merged$pCO2, resp.data_merged$Salinity, sep ='')
dates.runs <- resp.data_merged %>%  # call table
dplyr::distinct(Date, Notes) # call all unique values for date run and sw condition
dates.runs <- na.omit(dates.runs)
# call dataframe and build table to rbind in for loop
blanks_total <- data.frame() # start dataframe
# for loop. objective = obtian a mean value for all blanks specific to date, run #, seawater treatment
for(i in 1:nrow(dates.runs)) {
data <- resp.data_merged %>%
dplyr::select(Date,Channel, Chamber_tank, Notes, Lpc,  Leq, Lz) %>%
dplyr::filter(!is.na(Lpc)) %>% # ommits empty resp channels (if any)
dplyr::filter(Notes == dates.runs[i,2])
blanks <- data %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::select(!Chamber_tank) %>%
dplyr::mutate(filename = dates.runs[i,2])
blanks.table <- data.frame(matrix(nrow = nrow(blanks),ncol = 7)) # make a table template
colnames(blanks.table)<-c('Date', 'Channel', 'BLANK.Lpc', 'BLANK.Leq' , 'BLANK.Lz', 'filename', 'Notes') # names for comuns in the for loop
blanks.table$Date      <- blanks$Date
blanks.table$Channel   <- blanks$Channel
blanks.table$Notes     <- blanks$Notes
blanks.table$BLANK.Lpc <- blanks$Lpc
blanks.table$BLANK.Leq <- blanks$Leq
blanks.table$BLANK.Lz  <- blanks$Lz
blanks.table$filename  <- blanks$filename
# blanks.table$alpha <- data[1,9] # set at start of script - reresents the proportion of data for final estimate of slopes (Lpc, Leq, Lz)
df <- data.frame(blanks.table) # name dataframe for this singl e row
blanks_total <- rbind(blanks_total,df) #bind to a cumulative list dataframe
print(blanks_total) # print to monitor progress
}
blanks_total2 <- blanks_total %>%
#dplyr::filter(!(filename =='20210319_new_sensor_7' & Channel == 'CH8')) %>% # positive blank rate - omit, use other blank in file
dplyr::filter(!(filename =='20210319' & Channel == 'CH4')) %>% # slightly positive rate - omit, use other blank in the file
dplyr::filter(!(filename =='20210430_LOWtemp_HIGHsal' & Channel == 'CH8')) %>% # abnormally higher than other blank, error  -omit, use other blank on file
dplyr::filter(!(filename =='20210507_LOWtemp_HIGHsal' & Channel == 'CH4')) %>% # abnormally higher than other blank, error -omit, use other blank on file
mutate(across(everything(), ~ ifelse(. < 0, 0, .))) # all other positive rates hug zero, (i.e. 0.00089) - thus make zero
blanks_means <- blanks_total2 %>%
group_by(Date, Notes) %>%
dplyr::summarise(BLANK.mean.Lpc = mean(abs(BLANK.Lpc)),
BLANK.mean.Leq = mean(abs(BLANK.Leq)),
BLANK.mean.Lz = mean(abs(BLANK.Lz)))
Resp.blanks.merge <- merge(resp.data_merged, blanks_means, by=c("Date", "Notes")) %>% # NOTE: this repeats for every distinct length value
dplyr::filter(!Chamber_tank =='blank') %>%
dplyr::filter(!Lpc > 0) %>% # 14 with positive rate raw value - omitted
dplyr::mutate(resp_norm = abs(Lpc) - BLANK.mean.Lpc) # calc resp norm - note Lpc is still raw data  - thus a positive resp norm means blank > sample resp - bad data!
# filter for postive rates - look at the outliers in which the animal rates were < the blank!
Resp.blanks.merge_OM <- Resp.blanks.merge %>% dplyr::filter(!resp_norm < 0)  # omits respiration rate values showing an increase in O2 over time
Resp.outliers <- Resp.blanks.merge %>% dplyr::filter(resp_norm < 0)  # only 3 rates were ommitted
# calculate resp rates
# vial.vol <- 0.08 # milliliters (ml)
vial.vol <- 2.2 # milliliters (ml) - small Loligo chambers
Resp.Master <- merge(Resp.blanks.merge_OM[,c(1,3,5,9:13,17)], counts_resp[,c(1,6:7)], by = c('Date','Chamber_tank'))
Resp.Master$resp_ng_L_indiv_hr <- (
( ( (abs(Resp.Master$resp_norm)*1000000) * # call absolute value of resp in mg per minute - convert to ng min-1 (note negatives should aredy be omitted!_)
(vial.vol/1000) ) / # correct ng minute-1 to ng liter-1 by multiplying by the resp vial in liters
Resp.Master$Counts ) * # normalize by individual or larvae count - as to ng L-1 individual-1
(60)) # correct for the time; final value is ng Liter-1 individual-1 hour-1
# mean sd rates
mean(Resp.Master$resp_ng_L_indiv_hr) # mean = 1.412995
sd(Resp.Master$resp_ng_L_indiv_hr) # sd= 2.033548
# write master Resp file ------------------------------------------------------------------------------------- #
write.csv(Resp.Master,
"Output/Respiration/RespirationMaster.csv")# write
library(emmeans)
library(car)
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/") # personal computer
Resp.Master  <- read.csv(file="Output/Respiration/RespirationMaster.csv", header=T) # reference for the respirometry data - contains the 'Chamber_Tank' for each sensor channel (whether an animal or a blank)
# model effect of treatment on resp rate 20210430
Resp_APRIL <- Resp.Master %>%
dplyr::filter(Date %in% '4/30/2021') # %>%
# Three way ANOVA
LMmod.APRIL   <- aov(lm(resp_ng_L_indiv_hr~Temp*pCO2*Salinity,data=Resp_APRIL))
shapiro.test(residuals(LMmod.APRIL)) # 0.01002 - non normal
# LOG transform
LMmod.APRIL_T   <- aov(lm(log(resp_ng_L_indiv_hr)~Temp*pCO2*Salinity,data=Resp_APRIL))
shapiro.test(residuals(LMmod.APRIL_T)) # 0.7774
leveneTest(LMmod.APRIL_T) # 0.7559
summary(LMmod.APRIL_T)
# post hoc tests
library(emmeans)
posthoc<-emmeans(LMmod.APRIL_T, pairwise~Temp:pCO2, adjust="tukey")
multcomp::cld(posthoc$emmeans,alpha = 0.5, Letters = letters)
# Figures
Resp_APRIL_select  <- Resp_APRIL %>%
dplyr::select(c('resp_ng_L_indiv_hr', 'Temp', 'pCO2', 'Salinity')) %>%
dplyr::mutate(Age = '24hrs')
APRIL_all <- Resp_APRIL_select %>%
dplyr::mutate(Temp_pCO2 = paste(Temp,pCO2, sep = '_')) %>%
dplyr::mutate(full.treatment = (paste(Salinity, pCO2, Temp,sep=''))) %>%
dplyr::mutate(full.treatment = fct_relevel(full.treatment,
"LHL", "LHH", "LLL",'LLH',
"HHL", "HHH", "HLL", 'HLH')) %>%
ggplot(aes(Temp_pCO2, resp_ng_L_indiv_hr , fill = factor(Salinity))) +
geom_boxplot(size=0.2, alpha=0.1) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.5))+
scale_fill_manual(values=c("white", "grey40")) +
labs(title = "C virginica, 24 hr larvae",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%indiv^{-1}%.% hr^{-1}~")"),
x = "Sal_pCO2") +
annotate("text", x=2, y=5.8, label = "Low Salinity") +
#annotate("rect", xmin = 0, xmax = 4.5, ymin = 0, ymax = 6.5,alpha = .2) +
theme_classic()
APRIL_all
Resp_means_APRIL <- Resp_APRIL_select %>%
na.omit() %>%
dplyr::group_by(Temp, pCO2, Salinity, Age) %>%
dplyr::summarise(mean_RR = mean(resp_ng_L_indiv_hr),
n       = n(),
sd_RR   = sd(resp_ng_L_indiv_hr),
se_RR   = sd_RR/(sqrt(n)))
Resp_means_APRIL
Heatplot_RR_APRIL <- Resp_means_APRIL %>%
dplyr::mutate(OA_Sal = (paste(pCO2, Salinity,sep=''))) %>%
ggplot(aes(x = as.factor(Age),
y = mean_RR)) +
#shape = stage)) +
geom_rect(aes(fill = mean_RR),
xmin = -Inf,
xmax = Inf,
ymin = -Inf,
ymax = Inf,
alpha = 0.3) +
geom_point(color = 'black') +
geom_errorbar(aes(ymin = mean_RR - se_RR,
ymax = mean_RR + se_RR),
width = 0.5,
position= "dodge2") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
facet_grid(vars(Temp),
vars(fct_relevel(OA_Sal, c("HL", "LL", "HH", "LH")))) +
scale_fill_gradient(low = "orange",
high = "forestgreen",
aesthetics = "fill")
print(Heatplot_RR_APRIL)
APRIL_MeanSE <- Resp_APRIL_select %>%
dplyr::mutate(Temp_pCO2 = paste(Temp,pCO2, sep = '_')) %>%
ggplot(aes(Temp_pCO2, mean_RR , fill = factor(Salinity))) +
geom_errorbar(aes(ymin = mean_RR - se_RR,
ymax = mean_RR + se_RR),
width = 0.5,
position= "dodge2") +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.5))+
scale_fill_manual(values=c("white", "grey40")) +
labs(title = "C virginica, 24 hr larvae",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%indiv^{-1}%.% hr^{-1}~")"),
x = "Sal_pCO2") +
theme_classic()
APRIL_MeanSE
Resp_APRIL_select %>%
dplyr::mutate(Temp_pCO2 = paste(Temp,pCO2, sep = '_')) %>%
ggplot(aes(Temp_pCO2, mean_RR , fill = factor(Salinity))) +
geom_errorbar(aes(ymin = mean_RR - se_RR,
ymax = mean_RR + se_RR),
width = 0.5,
position= "dodge2")
Resp_means_APRIL <- Resp_APRIL_select %>%
na.omit() %>%
dplyr::group_by(Temp, pCO2, Salinity, Age) %>%
dplyr::summarise(mean_RR = mean(resp_ng_L_indiv_hr),
n       = n(),
sd_RR   = sd(resp_ng_L_indiv_hr),
se_RR   = sd_RR/(sqrt(n)))
APRIL_MeanSE <- Resp_means_APRIL %>%
dplyr::mutate(Temp_pCO2 = paste(Temp,pCO2, sep = '_')) %>%
ggplot(aes(Temp_pCO2, mean_RR , fill = factor(Salinity))) +
geom_errorbar(aes(ymin = mean_RR - se_RR,
ymax = mean_RR + se_RR),
width = 0.5,
position= "dodge2") +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.5))+
scale_fill_manual(values=c("white", "grey40")) +
labs(title = "C virginica, 24 hr larvae",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%indiv^{-1}%.% hr^{-1}~")"),
x = "Sal_pCO2") +
theme_classic()
APRIL_MeanSE
APRIL_MeanSE <- Resp_means_APRIL %>%
dplyr::mutate(Temp_pCO2 = paste(Temp,pCO2, sep = '_')) %>%
ggplot(aes(Temp_pCO2, mean_RR , fill = factor(Salinity))) +
geom_errorbar(aes(ymin = mean_RR - se_RR,
ymax = mean_RR + se_RR),
width = 0.5,
position= "dodge2") +
geom_point(shape = 21, size = 2)+
scale_fill_manual(values=c("white", "grey40")) +
labs(title = "C virginica, 24 hr larvae",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%indiv^{-1}%.% hr^{-1}~")"),
x = "Sal_pCO2") +
theme_classic()
APRIL_MeanSE
APRIL_MeanSE <- Resp_means_APRIL %>%
dplyr::mutate(Temp_pCO2 = paste(Temp,pCO2, sep = '_')) %>%
ggplot(aes(Temp_pCO2, mean_RR , fill = factor(Salinity))) +
geom_errorbar(aes(ymin = mean_RR - se_RR,
ymax = mean_RR + se_RR),
width = 0.5,
position= "dodge2") +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.8))+
scale_fill_manual(values=c("white", "grey40")) +
labs(title = "C virginica, 24 hr larvae",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%indiv^{-1}%.% hr^{-1}~")"),
x = "Sal_pCO2") +
theme_classic()
APRIL_MeanSE
APRIL_MeanSE <- Resp_means_APRIL %>%
dplyr::mutate(Temp_pCO2 = paste(Temp,pCO2, sep = '_')) %>%
ggplot(aes(Temp_pCO2, mean_RR , fill = factor(Salinity))) +
geom_errorbar(aes(ymin = mean_RR - se_RR,
ymax = mean_RR + se_RR),
width = 0.5,
position= "dodge2") +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1))+
scale_fill_manual(values=c("white", "grey40")) +
labs(title = "C virginica, 24 hr larvae",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%indiv^{-1}%.% hr^{-1}~")"),
x = "Sal_pCO2") +
theme_classic()
APRIL_MeanSE
APRIL_MeanSE <- Resp_means_APRIL %>%
dplyr::mutate(Temp_pCO2 = paste(Temp,pCO2, sep = '_')) %>%
ggplot(aes(Temp_pCO2, mean_RR , fill = factor(Salinity))) +
geom_errorbar(aes(ymin = mean_RR - se_RR,
ymax = mean_RR + se_RR),
width = 0.5,
position= "dodge2") +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1))+
scale_fill_manual(values=c("white", "grey40")) +
labs(title = "C virginica, 24 hr larvae",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%indiv^{-1}%.% hr^{-1}~")"),
x = "Temp_pCO2") +
theme_classic()
APRIL_MeanSE
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/Output/")
pdf("Respiration/Day1_RR_posthoc.pdf", width=8, height=6)
print(APRIL_MeanSE)
dev.off()
blanks_means
