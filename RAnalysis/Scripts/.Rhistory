scale_colour_manual(breaks=c("Low", "High"), values=c("#56B4E9","#E69F00")) +
geom_point(aes(colour = fct_relevel(OA, c("High", "Low"))),
position = position_dodge2(width = 0.75)) +
stat_summary(fun.y="mean",
fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
width = 0.25,
position = position_dodge2(width = 1)) +
labs(title="Survival data", x ="Salinity", y = "Larvae size (μm)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text=element_text(size=12),
legend.position="none") +
facet_wrap(~Day, scales = "free_y")
All_Survival_boxplot
All_Survival_boxplot <- ggplot(data=All_Survival,
aes(x=fct_relevel(Salinity, c("Low", "High")),
y=Survival,
colour=fct_relevel(OA, c("High", "Low")),
linetype= fct_relevel(Temp, c("Low", "High")))) +
# scale_linetype(c("dotted","solid")) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
scale_colour_manual(breaks=c("Low", "High"), values=c("#56B4E9","#E69F00")) +
geom_point(aes(colour = fct_relevel(OA, c("High", "Low"))),
position = position_dodge2(width = 0.75)) +
stat_summary(fun.y="mean",
geom = 'point',
position = position_dodge2(width = 1)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
width = 0.25,
position = position_dodge2(width = 1)) +
labs(title="Survival data", x ="Salinity", y = "Larvae size (μm)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text=element_text(size=12),
legend.position="none") +
facet_wrap(~Day, scales = "free_y")
All_Survival_boxplot
ggplot(data=All_Survival,
aes(x=fct_relevel(Salinity, c("Low", "High")),
y=Survival,
colour=fct_relevel(OA, c("High", "Low")),
linetype= fct_relevel(Temp, c("Low", "High")))) +
# scale_linetype(c("dotted","solid")) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
scale_colour_manual(breaks=c("Low", "High"), values=c("#56B4E9","#E69F00")) +
geom_point(aes(colour = fct_relevel(OA, c("High", "Low"))),
position = position_dodge2(width = 0.75)) +
stat_summary(fun.y="mean",
geom = 'point',
position = position_dodge2(width = 1))
ggplot(data=All_Survival,
aes(x=fct_relevel(Salinity, c("Low", "High")),
y=Survival,
colour=fct_relevel(OA, c("High", "Low")),
linetype= fct_relevel(Temp, c("Low", "High")))) +
# scale_linetype(c("dotted","solid")) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
scale_colour_manual(breaks=c("Low", "High"), values=c("#56B4E9","#E69F00")) +
geom_point(aes(colour = fct_relevel(OA, c("High", "Low"))),
position = position_dodge2(width = 0.75)) +
stat_summary(fun.y="mean",
position = position_dodge2(width = 1))
ggplot(data=All_Survival,
aes(x=fct_relevel(Salinity, c("Low", "High")),
y=Survival,
colour=fct_relevel(OA, c("High", "Low")),
linetype= fct_relevel(Temp, c("Low", "High")))) +
# scale_linetype(c("dotted","solid")) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
scale_colour_manual(breaks=c("Low", "High"), values=c("#56B4E9","#E69F00")) +
geom_point(aes(colour = fct_relevel(OA, c("High", "Low"))),
position = position_dodge2(width = 0.75)) +
stat_summary(fun.y="mean", size = 5,
position = position_dodge2(width = 1)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
width = 0.25,
position = position_dodge2(width = 1))
ggplot(data=All_Survival,
aes(x=fct_relevel(Salinity, c("Low", "High")),
y=Survival,
colour=fct_relevel(OA, c("High", "Low")),
linetype= fct_relevel(Temp, c("Low", "High")))) +
# scale_linetype(c("dotted","solid")) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
scale_colour_manual(breaks=c("Low", "High"), values=c("#56B4E9","#E69F00")) +
geom_point(aes(colour = fct_relevel(OA, c("High", "Low"))),
position = position_dodge2(width = 0.75)) +
stat_summary(fun.y="mean", size = 1,
position = position_dodge2(width = 1)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
width = 0.25,
position = position_dodge2(width = 1))
ggplot(data=All_Survival,
aes(x=fct_relevel(Salinity, c("Low", "High")),
y=Survival,
colour=fct_relevel(OA, c("High", "Low")),
linetype= fct_relevel(Temp, c("Low", "High")))) +
# scale_linetype(c("dotted","solid")) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
scale_colour_manual(breaks=c("Low", "High"), values=c("#56B4E9","#E69F00")) +
geom_point(aes(colour = fct_relevel(OA, c("High", "Low"))),
position = position_dodge2(width = 0.75)) +
stat_summary(fun.y="mean", size = 1,
position = position_dodge2(width = 1)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
position = position_dodge2(width = 1))
All_Survival_boxplot <- ggplot(data=All_Survival,
aes(x=fct_relevel(Salinity, c("Low", "High")),
y=Survival,
colour=fct_relevel(OA, c("High", "Low")),
linetype= fct_relevel(Temp, c("Low", "High")))) +
# scale_linetype(c("dotted","solid")) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
scale_colour_manual(breaks=c("Low", "High"), values=c("#56B4E9","#E69F00")) +
geom_point(aes(colour = fct_relevel(OA, c("High", "Low"))),
position = position_dodge2(width = 0.75)) +
stat_summary(fun.y="mean", size = 1,
position = position_dodge2(width = 1)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
position = position_dodge2(width = 1)) +
labs(title="Survival data", x ="Salinity", y = "Larvae size (μm)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text=element_text(size=12),
legend.position="none") +
facet_wrap(~Day, scales = "free_y")
All_Survival_boxplot
All_Survival_boxplot <- ggplot(data=All_Survival,
aes(x=fct_relevel(Salinity, c("Low", "High")),
y=Survival,
colour=fct_relevel(OA, c("High", "Low")),
linetype= fct_relevel(Temp, c("Low", "High")))) +
# scale_linetype(c("dotted","solid")) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
scale_colour_manual(breaks=c("Low", "High"), values=c("#56B4E9","#E69F00")) +
geom_point(aes(colour = fct_relevel(OA, c("High", "Low"))),
position = position_dodge2(width = 0.75)) +
stat_summary(fun.y="mean", size = 1,
position = position_dodge2(width = 0.8)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
position = position_dodge2(width = 1)) +
labs(title="Survival data", x ="Salinity", y = "Larvae size (μm)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text=element_text(size=12),
legend.position="none") +
facet_wrap(~Day, scales = "free_y")
All_Survival_boxplot
All_Survival_boxplot <- ggplot(data=All_Survival,
aes(x=fct_relevel(Salinity, c("Low", "High")),
y=Survival,
colour=fct_relevel(OA, c("High", "Low")),
linetype= fct_relevel(Temp, c("Low", "High")))) +
# scale_linetype(c("dotted","solid")) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
scale_colour_manual(breaks=c("Low", "High")) +
geom_point(aes(colour = fct_relevel(OA, c("High", "Low"))),
position = position_dodge2(width = 0.75)) +
stat_summary(fun.y="mean", size = 1,
position = position_dodge2(width = 0.8)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
position = position_dodge2(width = 1)) +
labs(title="Survival data", x ="Salinity", y = "Larvae size (μm)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text=element_text(size=12),
legend.position="none") +
facet_wrap(~Day, scales = "free_y")
All_Survival_boxplot
All_Survival_boxplot <- ggplot(data=All_Survival,
aes(x=fct_relevel(Salinity, c("Low", "High")),
y=Survival,
colour=fct_relevel(OA, c("High", "Low")),
linetype= fct_relevel(Temp, c("Low", "High")))) +
# scale_linetype(c("dotted","solid")) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
scale_colour_manual(breaks=c("Low", "High"), values=c("#56B4E9","#E69F00")) +
geom_point(aes(colour = fct_relevel(OA, c("High", "Low"))),
position = position_dodge2(width = 0.75)) +
stat_summary(fun.y="mean", size = 1,
position = position_dodge2(width = 0.8)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
position = position_dodge2(width = 1)) +
labs(title="Survival data", x ="Salinity", y = "Larvae size (μm)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text=element_text(size=12),
legend.position="none") +
facet_wrap(~Day, scales = "free_y")
All_Survival_boxplot
All_Survival_boxplot <- ggplot(data=All_Survival,
aes(x=fct_relevel(Salinity, c("Low", "High")),
y=Survival,
colour=fct_relevel(OA, c("High", "Low")),
linetype= fct_relevel(Temp, c("Low", "High")))) +
# scale_linetype(c("dotted","solid")) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
scale_colour_manual(breaks=c("Low", "High"), values=c("#56B4E9","#E69F00")) +
geom_point(aes(colour = fct_relevel(OA, c("High", "Low"))),
position = position_dodge2(width = 0.75)) +
stat_summary(fun.y="mean", size = 1,
position = position_dodge2(width = 0.5)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
position = position_dodge2(width = 1)) +
labs(title="Survival data", x ="Salinity", y = "Larvae size (μm)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text=element_text(size=12),
legend.position="none") +
facet_wrap(~Day, scales = "free_y")
All_Survival_boxplot
All_Survival_boxplot <- ggplot(data=All_Survival,
aes(x=fct_relevel(Salinity, c("Low", "High")),
y=Survival,
colour=fct_relevel(OA, c("High", "Low")),
linetype= fct_relevel(Temp, c("Low", "High")))) +
# scale_linetype(c("dotted","solid")) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
scale_colour_manual(breaks=c("Low", "High"), values=c("#56B4E9","#E69F00")) +
geom_point(aes(colour = fct_relevel(OA, c("High", "Low"))),
size = 3,
position = position_dodge2(width = 0.75)) +
stat_summary(fun.y="mean", size = 1,
position = position_dodge2(width = 1)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
position = position_dodge2(width = 1)) +
labs(title="Survival data", x ="Salinity", y = "Larvae size (μm)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text=element_text(size=12),
legend.position="none") +
facet_wrap(~Day, scales = "free_y")
All_Survival_boxplot
All_Survival_boxplot <- ggplot(data=All_Survival,
aes(x=fct_relevel(Salinity, c("Low", "High")),
y=Survival,
colour=fct_relevel(OA, c("High", "Low")),
linetype= fct_relevel(Temp, c("Low", "High")))) +
# scale_linetype(c("dotted","solid")) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
scale_colour_manual(breaks=c("Low", "High"), values=c("#56B4E9","#E69F00")) +
geom_point(aes(colour = fct_relevel(OA, c("High", "Low"))),
position = position_dodge2(width = 0.75)) +
stat_summary(fun.y="mean", size = 0.5,
position = position_dodge2(width = 1)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
position = position_dodge2(width = 1)) +
labs(title="Survival data", x ="Salinity", y = "Larvae size (μm)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text=element_text(size=12),
legend.position="none") +
facet_wrap(~Day, scales = "free_y")
All_Survival_boxplot
All_Survival_boxplot <- ggplot(data=All_Survival,
aes(x=fct_relevel(Salinity, c("Low", "High")),
y=Survival,
colour=fct_relevel(OA, c("High", "Low")),
linetype= fct_relevel(Temp, c("Low", "High")))) +
# scale_linetype(c("dotted","solid")) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
scale_colour_manual(breaks=c("Low", "High"), values=c("#56B4E9","#E69F00")) +
geom_point(aes(colour = fct_relevel(OA, c("High", "Low"))),
position = position_dodge2(width = 0.75)) +
stat_summary(fun.y="mean", size = 0.8,
position = position_dodge2(width = 1)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
position = position_dodge2(width = 1)) +
labs(title="Survival data", x ="Salinity", y = "Larvae size (μm)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text=element_text(size=12),
legend.position="none") +
facet_wrap(~Day, scales = "free_y")
All_Survival_boxplot
pdf("Output/Survival/plots/Survival_all_MeanSE.pdf", width=11, height=8)
print(All_Survival_boxplot)
dev.off()
# CASES TO FOLLOW INTERACTION TERMS
D1_adonis_run # we see main effects of OA, Temp and Salinity and interaction OA:Salinity
# CREATE AN OA_SALINITY COLUMN
D1_meta_distance  <- D1_meta_distance %>% dplyr::mutate(OA_Salinity = paste0(OA,' x ',Salinity))
# TRUNCATE THE DATA FOR EACH PAIR BASED ON OA AND SALINITY, WITH UNIQUE TITLE
# Note: two two-factor variables == 6 possible pairs
# METADATA (IV)
D1_HH_LL_metadata <- D1_meta_distance %>% dplyr::filter(OA_Salinity %in% c('High x High', 'Low x Low'))
D1_HH_LH_metadata <- D1_meta_distance %>% dplyr::filter(OA_Salinity %in% c('High x High', 'Low x High'))
D1_HH_HL_metadata <- D1_meta_distance %>% dplyr::filter(OA_Salinity %in% c('High x High', 'High x Low'))
D1_HL_LH_metadata <- D1_meta_distance %>% dplyr::filter(OA_Salinity %in% c('High x Low', 'Low x High'))
D1_HL_LL_metadata <- D1_meta_distance %>% dplyr::filter(OA_Salinity %in% c('High x Low', 'Low x Low'))
D1_LH_LL_metadata <- D1_meta_distance %>% dplyr::filter(OA_Salinity %in% c('Low x High', 'Low x Low'))
# DISTANCE (DV)
D1_HH_LL_dist     <- D1_meta_distance %>%
dplyr::filter(sample.id %in% D1_HH_LL_metadata$sample.id) %>%
dplyr::select(D1_HH_LL_metadata$sample.id) %>%
as.dist()
D1_HH_LH_dist     <- D1_meta_distance %>%
dplyr::filter(sample.id %in% D1_HH_LH_metadata$sample.id) %>%
dplyr::select(D1_HH_LH_metadata$sample.id) %>%
as.dist()
D1_HH_HL_dist     <- D1_meta_distance %>%
dplyr::filter(sample.id %in% D1_HH_HL_metadata$sample.id) %>%
dplyr::select(D1_HH_HL_metadata$sample.id) %>%
as.dist()
D1_HL_LH_dist     <- D1_meta_distance %>%
dplyr::filter(sample.id %in% D1_HL_LH_metadata$sample.id) %>%
dplyr::select(D1_HL_LH_metadata$sample.id) %>%
as.dist()
D1_HL_LL_dist     <- D1_meta_distance %>%
dplyr::filter(sample.id %in% D1_HL_LL_metadata$sample.id) %>%
dplyr::select(D1_HL_LL_metadata$sample.id) %>%
as.dist()
D1_LH_LL_dist     <- D1_meta_distance %>%
dplyr::filter(sample.id %in% D1_LH_LL_metadata$sample.id) %>%
dplyr::select(D1_LH_LL_metadata$sample.id) %>%
as.dist()
# RUN ADONIS FOR EACH PAIR
D1_adonis_HH_LL   <- adonis2(D1_HH_LL_dist  ~ OA_Salinity, data=D1_HH_LL_metadata, perms = permutations)
D1_adonis_HH_LH   <- adonis2(D1_HH_LH_dist  ~ OA_Salinity, data=D1_HH_LH_metadata, perms = permutations)
D1_adonis_HH_HL   <- adonis2(D1_HH_HL_dist  ~ OA_Salinity, data=D1_HH_HL_metadata, perms = permutations)
D1_adonis_HL_LH   <- adonis2(D1_HL_LH_dist  ~ OA_Salinity, data=D1_HL_LH_metadata, perms = permutations)
D1_adonis_HL_LL   <- adonis2(D1_HL_LL_dist  ~ OA_Salinity, data=D1_HL_LL_metadata, perms = permutations)
D1_adonis_LH_LL   <- adonis2(D1_LH_LL_dist  ~ OA_Salinity, data=D1_LH_LL_metadata, perms = permutations)
D1_adonis_HH_LL
D1_adonis_HH_LH
D1_adonis_HH_HL
D1_adonis_HH_HL   <- adonis2(D1_HH_HL_dist  ~ OA_Salinity, data=D1_HH_HL_metadata, perms = permutations) # nope
D1_adonis_HH_HL
D1_adonis_HL_LH
D1_adonis_HL_LL   <- adonis2(D1_HL_LL_dist  ~ OA_Salinity, data=D1_HL_LL_metadata, perms = permutations)
D1_adonis_HL_LL
D1_adonis_HL_LL   <- adonis2(D1_HL_LL_dist  ~ OA_Salinity, data=D1_HL_LL_metadata, perms = permutations) # yup
D1_adonis_HL_LL
D1_adonis_LH_LL   <- adonis2(D1_LH_LL_dist  ~ OA_Salinity, data=D1_LH_LL_metadata, perms = permutations)
D1_adonis_LH_LL
# CASES TO FOLLOW INTERACTION TERMS
D1_adonis_run # we see main effects of OA, Temp and Salinity and interaction OA:Salinity
D1_dist
# CASES TO FOLLOW INTERACTION TERMS
D1_adonis_run # we see main effects of OA, Temp and Salinity and interaction OA:Salinity
D1_adonis_HL_LL
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
d2_filtered_counts          <- read.csv(file="C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/Data/TagSeq/Filtered_Counts/filtered_counts_5cpm_50perc/day2.filtered_5cpm50perc.csv", sep=',', header=TRUE)
d18_filtered_counts         <- read.csv(file="C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/Data/TagSeq/Filtered_Counts/filtered_counts_5cpm_50perc/day18.filtered_5cpm50perc.csv", sep=',', header=TRUE)
d2_filtered_counts.hightemp <- read.csv(file="C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/Data/TagSeq/Filtered_Counts/filtered_counts_5cpm_50perc/day2.filtered_5cpm50perc_hightemp.csv", sep=',', header=TRUE)
# day 2 ================================= #
# how many reads total?
sum(d2_filtered_counts[,-1]) # 33997765
d2_filtered_counts.hightemp
# how many read counts per sample? (average and sd)
min(colSums(d2_filtered_counts[,-1])) # 789376
max(colSums(d2_filtered_counts[,-1])) # 2113582
d2_filtered_counts.hightemp
d18_filtered_counts
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
nrow(d18_filtered_counts)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
# load libraries - notes show the install command needed to install (pre installed)
# install.packages("calibrate")
library(dplyr)
library(GenomicFeatures)
library(data.table)
library(calibrate)
library(data.table)
# Plotting
library(ggplot2)
library(cowplot)
library(pheatmap)
library(gplots)
library(RColorBrewer)
library(pcaExplorer)
#BiocManager::install for these packages
library(DESeq2) # note: this was previously installed with the command `BiocManager::install("DESeq2")`
library(edgeR)
library(goseq)
library(affycoretools)
library(vsn)
library(EnhancedVolcano)
library(pcaExplorer)
# SET WORKING DIRECTORY AND LOAD DATA
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/")
getwd()
path = 'C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/Output/DESeq2/' # personnal computer
### filtered counts tables - format matrix after upload [from Count_Matrix_Stats.Filter.R]
d2.counts_matrix  <- read.csv(file="../Data/TagSeq/Filtered_counts/filtered_counts_5cpm_50perc/day2.filtered_5cpm50perc.csv", sep=',', header=TRUE)
d2.counts_matrix  <- data.frame(d2.counts_matrix[,-1], row.names=d2.counts_matrix[,1])
d18.counts_matrix  <- read.csv(file="../Data/TagSeq/Filtered_counts/filtered_counts_5cpm_50perc/day18.filtered_5cpm50perc.csv", sep=',', header=TRUE)
d18.counts_matrix  <- data.frame(d18.counts_matrix[,-1], row.names=d18.counts_matrix[,1])
# annotation master data
Cvirginica_annot_reference  <- read.csv(file="../Data/TagSeq/Seq_details/seq_id_master.csv", sep=',', header=TRUE) %>%
dplyr::select(!X) %>%
dplyr::mutate(TranscriptID = gsub(" ", "", TranscriptID))
### experiment metadata [from Count_Matrix_Stats.Filter.R]  - convert characaters to factors for DESeq2
all.exp_data   <- read.csv(file="../Data/TagSeq/all.exp.metadata.csv", sep=',', header=TRUE) %>%   mutate_if(is.character, as.factor)
d2.exp_data    <- read.csv(file="../Data/TagSeq/day2.exp.data.csv", sep=',', header=TRUE) %>%   mutate_if(is.character, as.factor)
d18.exp_data   <- read.csv(file="../Data/TagSeq/day18.exp.data.csv", sep=',', header=TRUE) %>%   mutate_if(is.character, as.factor)
# ==========================================================
# DAY 2 FULL MODEL ==  design = ~ Temperature * OA * Salinity
# ========================================================== #
# build the metadata matrix ::::::::::::::::::::::::::::
d2.metadata     <- d2.exp_data %>%
dplyr::select(c('SapleName_readmatrix', 'Temperature', 'OA', 'Salinity','Aragonite_saturation')) %>% # coondense dataset to build target matrix
dplyr::rename("Sample.Name" = "SapleName_readmatrix") %>%
dplyr::mutate(All_Treatment = paste(Temperature, OA, Salinity, sep = '.'))
d2.metadata     <- data.frame(d2.metadata[,-1], row.names=d2.metadata[,1]) # move Sample.Name column as row names
d2.metadata.mtx <- as.matrix(d2.metadata, row.names="Oyster.ID") # create matrix
# check for 'TRUE' in each - check before proceeding  design
d2.metadata.mtx <- d2.metadata.mtx[match(colnames(d2.counts_matrix),rownames(d2.metadata.mtx)), ]
d2.metadata.mtx
all.exp_data
d2.counts_matrix
Cvirginica_annot_reference
Cvirginica_annot_reference
d2.counts_matrix
rownames(d2.counts_matrix)
Cvirginica_annot_reference %>% dplyr::filter(TranscriptID %in% rownames(d2.counts_matrix))
Cvirginica_annot_reference %>%
dplyr::filter(TranscriptID %in% rownames(d2.counts_matrix)) %>%
dplyr::filter(substr(Function,1,15) == "uncharacterized")
substr(Cvirginica_annot_reference$Function,1,15)
Cvirginica_annot_reference %>%
dplyr::filter(TranscriptID %in% rownames(d2.counts_matrix)) %>%
dplyr::filter(substr(Function,1,15) == "uncharacterize")
Cvirginica_annot_reference %>%
dplyr::filter(TranscriptID %in% rownames(d2.counts_matrix)) %>%
dplyr::filter(Function %in% substr(Function,1,14) == "uncharacterize")
Cvirginica_annot_reference %>%
dplyr::filter(TranscriptID %in% rownames(d2.counts_matrix)) %>%
dplyr::filter(Function %in% (substr(Function,1,14) == "uncharacterize"))
Cvirginica_annot_reference %>%
dplyr::filter(TranscriptID %in% rownames(d2.counts_matrix)) %>%
dplyr::filter(Function %in% contains("uncharacterize"))
Cvirginica_annot_reference %>%
dplyr::filter(TranscriptID %in% rownames(d2.counts_matrix)) %>%
dplyr::filter(Function, !grep1("uncharacterize", Function))
Cvirginica_annot_reference %>%
dplyr::filter(TranscriptID %in% rownames(d2.counts_matrix)) %>%
dplyr::filter(!grep1("uncharacterize", Function))
Cvirginica_annot_reference %>%
dplyr::filter(TranscriptID %in% rownames(d2.counts_matrix)) %>%
dplyr::filter(!grepl("uncharacterize", Function))
nrow(Cvirginica_annot_reference %>%
dplyr::filter(TranscriptID %in% rownames(d2.counts_matrix)) %>%
dplyr::filter(!grepl("uncharacterize", Function)))
# what percent of the count matrix has GO and gene annotation?
Cvirginica_annot_reference %>%
dplyr::filter(TranscriptID %in% rownames(d2.counts_matrix)) %>%
dplyr::filter(grepl("uncharacterize", Function))
d2_num_annotated <- nrow(Cvirginica_annot_reference %>%
dplyr::filter(TranscriptID %in% rownames(d2.counts_matrix)) %>%
dplyr::filter(!grepl("uncharacterize", Function)))
d18_num_annotated <- nrow(Cvirginica_annot_reference %>%
dplyr::filter(TranscriptID %in% rownames(d18.counts_matrix)) %>%
dplyr::filter(!grepl("uncharacterize", Function)))
perc_annotated   <- [d2_num_annotated/nrow(d2.counts_matrix)]*100
[d2_num_annotated/nrow(d2.counts_matrix)]
perc_annotated   <- (d2_num_annotated/nrow(d2.counts_matrix))*100
perc_annotated
d2_perc_annotated <- (d18_num_annotated/nrow(d18.counts_matrix))*100
d18_perc_annotated <- (d18_num_annotated/nrow(d18.counts_matrix))*100
d2_perc_annotated <- (d2_num_annotated/nrow(d2.counts_matrix))*100
d2_perc_annotated
d18_perc_annotated
Cvirginica_annot_reference %>%
dplyr::filter(TranscriptID %in% rownames(d2.counts_matrix)) %>%
dplyr::filter(!grepl("uncharacterize", Function))
