write.csv(MF_master_gene_reference, file = paste("Output/WGCNA/day18_spat/GO_analysis/GOslim/GOterms_and_GOslim_MolFunction_",GOslimLoop_vars[i,1], "Module_GENE_REFERENCE.csv", sep =''))
} else { }
if (nrow(BPslim_final) > 0) {
write.csv(BPslim_final, file = paste("Output/WGCNA/day18_spat/GO_analysis/GOslim/GOslim_BiolProc_",GOslimLoop_vars[i,1], "Module.csv", sep ='')) # save csv file
write.csv(BPslim_GOterm_summary_final, file = paste("Output/WGCNA/day18_spat/GO_analysis/GOslim/GOterms_and_GOslim_BiolProc_",GOslimLoop_vars[i,1], "Module.csv", sep =''))
write.csv(BP_master_gene_reference, file = paste("Output/WGCNA/day18_spat/GO_analysis/GOslim/GOterms_and_GOslim_BiolProc_",GOslimLoop_vars[i,1], "Module_GENE_REFERENCE.csv", sep =''))
} else { }
}  else (NULL)
print(paste(GOslimLoop_vars[i,2], GOslimLoop_vars[i,1], "done", sep = ' '))
} # end of GOslim for loop! (i in 1:nrow)
# load the output from the previous for loop
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis")
d2_GO.05blackModule        <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/GO.05blackModule.csv")
d2_GO.05blueModule         <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/GO.05blueModule.csv")
d2_GO.05brownModule        <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/GO.05brownModule.csv")
d2_GO.05pinkModule         <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/GO.05pinkModule.csv")
d2_GO.05redModule          <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/GO.05redModule.csv")
d2_GO.05turquoiseModule    <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/GO.05turquoiseModule.csv")
d2_hightemp_GO.05greenyellowModule  <- read.csv("Output/WGCNA/day2_larvae_hightemp/GO_analysis/GO.05greenyellowModule.csv")
d2_hightemp_GO.05magentaModule      <- read.csv("Output/WGCNA/day2_larvae_hightemp/GO_analysis/GO.05magentaModule.csv")
d2_hightemp_GO.05brownModule        <- read.csv("Output/WGCNA/day2_larvae_hightemp/GO_analysis/GO.05brownModule.csv")
d2_hightemp_GO.05pinkModule         <- read.csv("Output/WGCNA/day2_larvae_hightemp/GO_analysis/GO.05pinkModule.csv")
d2_hightemp_GO.05redModule          <- read.csv("Output/WGCNA/day2_larvae_hightemp/GO_analysis/GO.05redModule.csv")
d18_GO.05blueModule        <- read.csv("Output/WGCNA/day18_spat/GO_analysis/GO.05blueModule.csv")
d18_GO.05greenModule       <- read.csv("Output/WGCNA/day18_spat/GO_analysis/GO.05greenModule.csv")
d18_GO.05greenyellowModule <- read.csv("Output/WGCNA/day18_spat/GO_analysis/GO.05greenyellowModule.csv")
d18_GO.05redModule         <- read.csv("Output/WGCNA/day18_spat/GO_analysis/GO.05redModule.csv")
d18_GO.05salmonModule      <- read.csv("Output/WGCNA/day18_spat/GO_analysis/GO.05salmonModule.csv")
d18_GO.05tanModule         <- read.csv("Output/WGCNA/day18_spat/GO_analysis/GO.05tanModule.csv")
d18_GO.05turquoiseModule   <- read.csv("Output/WGCNA/day18_spat/GO_analysis/GO.05turquoiseModule.csv")
# Master ALL WGCNA significant modules with treatment
Master_goseq_results      <- rbind(d2_GO.05blackModule, d2_GO.05blueModule, d2_GO.05brownModule,
d2_GO.05pinkModule,d2_GO.05redModule,d2_GO.05turquoiseModule,
d2_hightemp_GO.05greenyellowModule,d2_hightemp_GO.05magentaModule,
d2_hightemp_GO.05brownModule, d2_hightemp_GO.05pinkModule, d2_hightemp_GO.05redModule,
d18_GO.05blueModule, d18_GO.05greenModule, d18_GO.05greenyellowModule,d18_GO.05redModule,
d18_GO.05salmonModule, d18_GO.05tanModule,d18_GO.05turquoiseModule)
#  for the for loop...
df_total             <- data.frame() # start dataframe
GO.table             <- data.frame(matrix(nrow = 0, ncol = 11)) # create dataframe to save cumunalitively during for loop
colnames(GO.table)   <- c('Day', 'moduleColor',  'GO_term' , 'GO_ID', 'ontology', 'pvalue',  'Gene_count', 'Gene_ratio', 'Transcript_ID', 'geneSymbol', 'Protein_name') # names for comuns in the for loop
# un the loop
for (i in 1:nrow(WGCNA_ColorList)) {
Ref.GO.terms       <- WGCNA_MasterModData %>%
dplyr::filter(moduleColor %in% WGCNA_ColorList$moduleColor[i] & Day %in% WGCNA_ColorList$Day[i]) %>%
dplyr::select(-Cvirginica_length) %>%
dplyr::mutate(Annotation_GO_ID = strsplit(Annotation_GO_ID, ";")) %>%
unnest(Annotation_GO_ID) %>%
dplyr::rename(GO_ID = Annotation_GO_ID, Transcript_ID = Cvirginica_TranscriptID)
Moduel.GO.results  <- Master_goseq_results[-1] %>%
dplyr::filter(!ontology %in% 'CC') %>%
dplyr::select(!'under_represented_pvalue') %>%
dplyr::rename(Gene_count = numDEInCat, GO_term = term) %>%
dplyr::mutate(Gene_ratio = Gene_count/numInCat) %>%
dplyr::select(-'numInCat') %>%
dplyr::filter(moduleColor %in% WGCNA_ColorList$moduleColor[i] & Day %in% WGCNA_ColorList$Day[i]) %>%
dplyr::rename(GO_ID = category, pvalue = over_represented_pvalue)
Master <- rbind(GO.table, (as.data.frame(merge(Moduel.GO.results, Ref.GO.terms, by = c("GO_ID", 'moduleColor', 'Day')))[,c(3,2,6,1,7,4,5,8,9,10,11)]) )
df       <- data.frame(Master) # name dataframe for this single row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
print(nrow(df_total)) # print to monitor progress
}
# write csv
Day2_larvae_master          <- df_total %>%
dplyr::filter(Day %in% 'Day2')  %>%
dplyr::arrange(moduleColor, ontology, pvalue, GO_term, Protein_name)
Day2_larvae_hightemp_master <- df_total %>%
dplyr::filter(Day %in% 'Day2_hightemp')  %>%
dplyr::arrange(moduleColor, ontology, pvalue, GO_term, Protein_name)
Day18_spat_master  <- df_total %>%
dplyr::filter(Day %in% 'Day18') %>%
dplyr::arrange(moduleColor, ontology, pvalue, GO_term, Protein_name)
write.csv(Day2_larvae_master, file = "Output/WGCNA/day2_larvae/GO_analysis/Day2_GO_Results_Master.csv", row.names = FALSE)
# load the output from the previous for loop
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis")
d2_GO.05blackModule        <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/GO.05blackModule.csv")
d2_GO.05blueModule         <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/GO.05blueModule.csv")
d2_GO.05brownModule        <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/GO.05brownModule.csv")
d2_GO.05pinkModule         <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/GO.05pinkModule.csv")
d2_GO.05redModule          <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/GO.05redModule.csv")
d2_GO.05turquoiseModule    <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/GO.05turquoiseModule.csv")
d2_hightemp_GO.05greenyellowModule  <- read.csv("Output/WGCNA/day2_larvae_hightemp/GO_analysis/GO.05greenyellowModule.csv")
d2_hightemp_GO.05magentaModule      <- read.csv("Output/WGCNA/day2_larvae_hightemp/GO_analysis/GO.05magentaModule.csv")
d2_hightemp_GO.05brownModule        <- read.csv("Output/WGCNA/day2_larvae_hightemp/GO_analysis/GO.05brownModule.csv")
d2_hightemp_GO.05pinkModule         <- read.csv("Output/WGCNA/day2_larvae_hightemp/GO_analysis/GO.05pinkModule.csv")
d2_hightemp_GO.05redModule          <- read.csv("Output/WGCNA/day2_larvae_hightemp/GO_analysis/GO.05redModule.csv")
d18_GO.05blueModule        <- read.csv("Output/WGCNA/day18_spat/GO_analysis/GO.05blueModule.csv")
d18_GO.05greenModule       <- read.csv("Output/WGCNA/day18_spat/GO_analysis/GO.05greenModule.csv")
d18_GO.05greenyellowModule <- read.csv("Output/WGCNA/day18_spat/GO_analysis/GO.05greenyellowModule.csv")
d18_GO.05redModule         <- read.csv("Output/WGCNA/day18_spat/GO_analysis/GO.05redModule.csv")
d18_GO.05salmonModule      <- read.csv("Output/WGCNA/day18_spat/GO_analysis/GO.05salmonModule.csv")
d18_GO.05tanModule         <- read.csv("Output/WGCNA/day18_spat/GO_analysis/GO.05tanModule.csv")
d18_GO.05turquoiseModule   <- read.csv("Output/WGCNA/day18_spat/GO_analysis/GO.05turquoiseModule.csv")
# Master ALL WGCNA significant modules with treatment
Master_goseq_results      <- rbind(d2_GO.05blackModule, d2_GO.05blueModule, d2_GO.05brownModule,
d2_GO.05pinkModule,d2_GO.05redModule,d2_GO.05turquoiseModule,
d2_hightemp_GO.05greenyellowModule,d2_hightemp_GO.05magentaModule,
d2_hightemp_GO.05brownModule, d2_hightemp_GO.05pinkModule, d2_hightemp_GO.05redModule,
d18_GO.05blueModule, d18_GO.05greenModule, d18_GO.05greenyellowModule,d18_GO.05redModule,
d18_GO.05salmonModule, d18_GO.05tanModule,d18_GO.05turquoiseModule)
#  for the for loop...
df_total             <- data.frame() # start dataframe
GO.table             <- data.frame(matrix(nrow = 0, ncol = 11)) # create dataframe to save cumunalitively during for loop
colnames(GO.table)   <- c('Day', 'moduleColor',  'GO_term' , 'GO_ID', 'ontology', 'pvalue',  'Gene_count', 'Gene_ratio', 'Transcript_ID', 'geneSymbol', 'Protein_name') # names for comuns in the for loop
# un the loop
for (i in 1:nrow(WGCNA_ColorList)) {
Ref.GO.terms       <- WGCNA_MasterModData %>%
dplyr::filter(moduleColor %in% WGCNA_ColorList$moduleColor[i] & Day %in% WGCNA_ColorList$Day[i]) %>%
dplyr::select(-Cvirginica_length) %>%
dplyr::mutate(Annotation_GO_ID = strsplit(Annotation_GO_ID, ";")) %>%
unnest(Annotation_GO_ID) %>%
dplyr::rename(GO_ID = Annotation_GO_ID, Transcript_ID = Cvirginica_TranscriptID)
Moduel.GO.results  <- Master_goseq_results[-1] %>%
dplyr::filter(!ontology %in% 'CC') %>%
dplyr::select(!'under_represented_pvalue') %>%
dplyr::rename(Gene_count = numDEInCat, GO_term = term) %>%
dplyr::mutate(Gene_ratio = Gene_count/numInCat) %>%
dplyr::select(-'numInCat') %>%
dplyr::filter(moduleColor %in% WGCNA_ColorList$moduleColor[i] & Day %in% WGCNA_ColorList$Day[i]) %>%
dplyr::rename(GO_ID = category, pvalue = over_represented_pvalue)
Master <- rbind(GO.table, (as.data.frame(merge(Moduel.GO.results, Ref.GO.terms, by = c("GO_ID", 'moduleColor', 'Day')))[,c(3,2,6,1,7,4,5,8,9,10,11)]) )
df       <- data.frame(Master) # name dataframe for this single row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
print(nrow(df_total)) # print to monitor progress
}
# write csv
Day2_larvae_master          <- df_total %>%
dplyr::filter(Day %in% 'Day2')  %>%
dplyr::arrange(moduleColor, ontology, pvalue, GO_term, Protein_name)
Day2_larvae_hightemp_master <- df_total %>%
dplyr::filter(Day %in% 'Day2_hightemp')  %>%
dplyr::arrange(moduleColor, ontology, pvalue, GO_term, Protein_name)
Day18_spat_master  <- df_total %>%
dplyr::filter(Day %in% 'Day18') %>%
dplyr::arrange(moduleColor, ontology, pvalue, GO_term, Protein_name)
write.csv(Day2_larvae_master, file = "Output/WGCNA/day2_larvae/GO_analysis/Day2_GO_Results_Master.csv", row.names = FALSE)
write.csv(Day2_larvae_master, file = "Output/WGCNA/day2_larvae_hightemp/GO_analysis/Day2_GO_Results_Master.csv", row.names = FALSE)
write.csv(Day18_spat_master, file = "Output/WGCNA/day18_spat/GO_analysis/Day18_GO_Results_Master.csv", row.names = FALSE)
# Day 18 - modules 'blue', 'turquoise', 'brown'  - these have sig main effects of salinity and temperature!
for (i in 1:nrow(WGCNA_ColorList)) {
DotPlot <-  ggplot(data =unique(df_total %>%
dplyr::filter(moduleColor %in% WGCNA_ColorList$moduleColor[i]  & Day %in% WGCNA_ColorList$Day[i]) %>%
dplyr::filter(!ontology %in% NA) %>%
dplyr::mutate(moduleColor_Ontology = paste(moduleColor, ontology, sep = '_')) %>%
dplyr::mutate(log_pvalue = -log(pvalue)) %>%
dplyr::arrange(log_pvalue) %>%
dplyr::select(-c('Protein_name', 'Transcript_ID', 'geneSymbol'))),
aes(x = Gene_ratio, y = reorder_within(GO_term, Gene_ratio,moduleColor_Ontology),
color = `log_pvalue`, size = Gene_count)) +
geom_point() +
scale_color_gradient(low = "orange", high = "blue") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis") +
scale_x_continuous(limits=c(0,0.5)) +
facet_wrap(~moduleColor_Ontology, scales = "free",switch = "y")
if (WGCNA_ColorList$Day[i] == 'Day2') {
pdf(paste0("Output/WGCNA/day2_larvae/GO_analysis/Day2_GO_DotPlot", WGCNA_ColorList$moduleColor[i], ".pdf", sep = ''), width=10, height=6)
plot(DotPlot)
dev.off()
} else if (WGCNA_ColorList$Day[i] == 'Day2_hightemp')  {
pdf(paste0("Output/WGCNA/day2_larvae_hightemp/GO_analysis/Day2_GO_DotPlot", WGCNA_ColorList$moduleColor[i], ".pdf", sep = ''), width=10, height=6)
plot(DotPlot)
dev.off()
} else if (WGCNA_ColorList$Day[i] == 'Day18')  {
pdf(paste0("Output/WGCNA/day18_spat/GO_analysis/Day18_GO_DotPlot", WGCNA_ColorList$moduleColor[i], ".pdf", sep = ''), width=10, height=6)
plot(DotPlot)
dev.off()
} else (NULL)
}
Day18_spat_master
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis")
reorder_within <- function(x, by, within, fun = mean) {
stats::reorder(x, by, FUN = fun) }
# Day 18 - modules 'blue', 'turquoise', 'brown'  - these have sig main effects of salinity and temperature!
for (i in 1:nrow(WGCNA_ColorList)) {
DotPlot <-  ggplot(data =unique(df_total %>%
dplyr::filter(moduleColor %in% WGCNA_ColorList$moduleColor[i]  & Day %in% WGCNA_ColorList$Day[i]) %>%
dplyr::filter(!ontology %in% NA) %>%
dplyr::mutate(moduleColor_Ontology = paste(moduleColor, ontology, sep = '_')) %>%
dplyr::mutate(log_pvalue = -log(pvalue)) %>%
dplyr::arrange(log_pvalue) %>%
dplyr::select(-c('Protein_name', 'Transcript_ID', 'geneSymbol'))),
aes(x = Gene_ratio, y = reorder_within(GO_term, Gene_ratio,moduleColor_Ontology),
color = `log_pvalue`, size = Gene_count)) +
geom_point() +
scale_color_gradient(low = "orange", high = "blue") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis") +
scale_x_continuous(limits=c(0,0.5)) +
facet_wrap(~moduleColor_Ontology, scales = "free",switch = "y")
if (WGCNA_ColorList$Day[i] == 'Day2') {
pdf(paste0("Output/WGCNA/day2_larvae/GO_analysis/Day2_GO_DotPlot", WGCNA_ColorList$moduleColor[i], ".pdf", sep = ''), width=10, height=6)
plot(DotPlot)
dev.off()
} else if (WGCNA_ColorList$Day[i] == 'Day2_hightemp')  {
pdf(paste0("Output/WGCNA/day2_larvae_hightemp/GO_analysis/Day2_GO_DotPlot", WGCNA_ColorList$moduleColor[i], ".pdf", sep = ''), width=10, height=6)
plot(DotPlot)
dev.off()
} else if (WGCNA_ColorList$Day[i] == 'Day18')  {
pdf(paste0("Output/WGCNA/day18_spat/GO_analysis/Day18_GO_DotPlot", WGCNA_ColorList$moduleColor[i], ".pdf", sep = ''), width=10, height=6)
plot(DotPlot)
dev.off()
} else (NULL)
}
# Day 18 - modules
Day18_DotPlot <-  ggplot(data =unique(Day18_spat_master %>%
dplyr::filter(moduleColor %in% c('blue', 'purple', 'red')) %>%
dplyr::filter(!ontology %in% NA) %>%
dplyr::mutate(moduleColor_Ontology = paste(moduleColor, ontology, sep = '_')) %>%
dplyr::mutate(log_pvalue = -log(pvalue)) %>%
dplyr::arrange(log_pvalue) %>%
dplyr::select(-c('Protein_name', 'Transcript_ID', 'geneSymbol'))),
aes(x = Gene_ratio, y = reorder_within(GO_term, Gene_ratio,moduleColor_Ontology),
color = `log_pvalue`, size = Gene_count)) +
geom_point() +
scale_color_gradient(low = "orange", high = "blue") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis") +
scale_x_continuous(limits=c(0,0.5)) +
facet_wrap(~moduleColor_Ontology, scales = "free",switch = "y")
pdf(paste0("Output/WGCNA/day18_spat/GO_analysis/Day18_GO_DotPlot.pdf"), width=22, height=10)
plot(Day18_DotPlot)
dev.off()
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis")
reorder_within <- function(x, by, within, fun = mean) {
stats::reorder(x, by, FUN = fun) }
# Day 18 - modules 'blue', 'turquoise', 'brown'  - these have sig main effects of salinity and temperature!
for (i in 1:nrow(WGCNA_ColorList)) {
DotPlot <-  ggplot(data =unique(df_total %>%
dplyr::filter(moduleColor %in% WGCNA_ColorList$moduleColor[i]  & Day %in% WGCNA_ColorList$Day[i]) %>%
dplyr::filter(!ontology %in% NA) %>%
dplyr::mutate(moduleColor_Ontology = paste(moduleColor, ontology, sep = '_')) %>%
dplyr::mutate(log_pvalue = -log(pvalue)) %>%
dplyr::arrange(log_pvalue) %>%
dplyr::select(-c('Protein_name', 'Transcript_ID', 'geneSymbol'))),
aes(x = log_pvalue, y = reorder_within(GO_term, log_pvalue, moduleColor_Ontology),
color = `Gene_ratio`, size = Gene_count)) +
geom_point() +
scale_color_gradient(low = "orange", high = "blue") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis") +
# scale_x_continuous(limits=c(0,0.5)) +
facet_wrap(~moduleColor_Ontology, scales = "free",switch = "y")
if (WGCNA_ColorList$Day[i] == 'Day2') {
pdf(paste0("Output/WGCNA/day2_larvae/GO_analysis/Day2_GO_DotPlot", WGCNA_ColorList$moduleColor[i], ".pdf", sep = ''), width=10, height=6)
plot(DotPlot)
dev.off()
} else if (WGCNA_ColorList$Day[i] == 'Day2_hightemp')  {
pdf(paste0("Output/WGCNA/day2_larvae_hightemp/GO_analysis/Day2_GO_DotPlot", WGCNA_ColorList$moduleColor[i], ".pdf", sep = ''), width=10, height=6)
plot(DotPlot)
dev.off()
} else if (WGCNA_ColorList$Day[i] == 'Day18')  {
pdf(paste0("Output/WGCNA/day18_spat/GO_analysis/Day18_GO_DotPlot", WGCNA_ColorList$moduleColor[i], ".pdf", sep = ''), width=10, height=6)
plot(DotPlot)
dev.off()
} else (NULL)
}
# Day 18 - modules
Day18_DotPlot <-  ggplot(data =unique(Day18_spat_master %>%
dplyr::filter(moduleColor %in% c('blue', 'purple', 'red')) %>%
dplyr::filter(!ontology %in% NA) %>%
dplyr::mutate(moduleColor_Ontology = paste(moduleColor, ontology, sep = '_')) %>%
dplyr::mutate(log_pvalue = -log(pvalue)) %>%
dplyr::arrange(log_pvalue) %>%
dplyr::select(-c('Protein_name', 'Transcript_ID', 'geneSymbol'))),
aes(x = Gene_ratio, y = reorder_within(GO_term, Gene_ratio,moduleColor_Ontology),
color = `log_pvalue`, size = Gene_count)) +
geom_point() +
scale_color_gradient(low = "orange", high = "blue") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis") +
scale_x_continuous(limits=c(0,0.5)) +
facet_wrap(~moduleColor_Ontology, scales = "free",switch = "y")
pdf(paste0("Output/WGCNA/day18_spat/GO_analysis/Day18_GO_DotPlot.pdf"), width=22, height=10)
plot(Day18_DotPlot)
dev.off()
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis")
reorder_within <- function(x, by, within, fun = mean) {
stats::reorder(x, by, FUN = fun) }
# Day 18 - modules 'blue', 'turquoise', 'brown'  - these have sig main effects of salinity and temperature!
for (i in 1:nrow(WGCNA_ColorList)) {
DotPlot <-  ggplot(data =unique(df_total %>%
dplyr::filter(moduleColor %in% WGCNA_ColorList$moduleColor[i]  & Day %in% WGCNA_ColorList$Day[i]) %>%
dplyr::filter(!ontology %in% NA) %>%
dplyr::mutate(moduleColor_Ontology = paste(moduleColor, ontology, sep = '_')) %>%
dplyr::mutate(log_pvalue = -log(pvalue)) %>%
dplyr::arrange(log_pvalue) %>%
dplyr::select(-c('Protein_name', 'Transcript_ID', 'geneSymbol'))),
aes(x = log_pvalue, y = reorder_within(GO_term, log_pvalue, moduleColor_Ontology),
color = `Gene_ratio`, size = Gene_count)) +
geom_point() +
scale_color_gradient(low = "orange", high = "blue") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis") +
# scale_x_continuous(limits=c(0,0.5)) +
facet_wrap(~moduleColor_Ontology, scales = "free",switch = "y")
if (WGCNA_ColorList$Day[i] == 'Day2') {
pdf(paste0("Output/WGCNA/day2_larvae/GO_analysis/Day2_GO_DotPlot", WGCNA_ColorList$moduleColor[i], ".pdf", sep = ''), width=14, height=6)
plot(DotPlot)
dev.off()
} else if (WGCNA_ColorList$Day[i] == 'Day2_hightemp')  {
pdf(paste0("Output/WGCNA/day2_larvae_hightemp/GO_analysis/Day2_GO_DotPlot", WGCNA_ColorList$moduleColor[i], ".pdf", sep = ''), width=14, height=6)
plot(DotPlot)
dev.off()
} else if (WGCNA_ColorList$Day[i] == 'Day18')  {
pdf(paste0("Output/WGCNA/day18_spat/GO_analysis/Day18_GO_DotPlot", WGCNA_ColorList$moduleColor[i], ".pdf", sep = ''), width=14, height=6)
plot(DotPlot)
dev.off()
} else (NULL)
}
# Day 18 - modules
Day18_DotPlot <-  ggplot(data =unique(Day18_spat_master %>%
dplyr::filter(moduleColor %in% c('blue', 'purple', 'red')) %>%
dplyr::filter(!ontology %in% NA) %>%
dplyr::mutate(moduleColor_Ontology = paste(moduleColor, ontology, sep = '_')) %>%
dplyr::mutate(log_pvalue = -log(pvalue)) %>%
dplyr::arrange(log_pvalue) %>%
dplyr::select(-c('Protein_name', 'Transcript_ID', 'geneSymbol'))),
aes(x = Gene_ratio, y = reorder_within(GO_term, Gene_ratio,moduleColor_Ontology),
color = `log_pvalue`, size = Gene_count)) +
geom_point() +
scale_color_gradient(low = "orange", high = "blue") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis") +
scale_x_continuous(limits=c(0,0.5)) +
facet_wrap(~moduleColor_Ontology, scales = "free",switch = "y")
pdf(paste0("Output/WGCNA/day18_spat/GO_analysis/Day18_GO_DotPlot.pdf"), width=22, height=10)
plot(Day18_DotPlot)
dev.off()
#=====================================================================================
#
# EXPLORE THE Expression of each module (for loop plots!) BY TREATMENT
#
# evidence from the heatmaps and the regression shwo strong module membership and eigenenge cor strength with lighcyan
# in response to treatment (primary specifically) and Total Antioxidant capacity
#
#=====================================================================================
# load necessary data
load("Output/WGCNA/day2_larvae_hightemp/day2-networkConstruction-stepByStep.RData") # load dds.d2_vst (in addition to other datasets we do not need...)
day2_ModuleMembership  <- read.csv(file="Output/WGCNA/day2_larvae_hightemp/d2.WGCNA_ModulMembership.csv", sep=',', header=TRUE)
d2.Treatment.data <- read.csv(file="Data/TagSeq/day2.exp.data_hightemp.csv", sep=',', header=TRUE) %>%
dplyr::mutate_if(is.character, as.factor) %>%
dplyr::mutate(Aragonite_saturation = case_when(Aragonite_saturation < 0.5 ~ 'Low',
(Aragonite_saturation > 0.5 & Aragonite_saturation < 1.0) ~ 'Mid',
Aragonite_saturation > 1.0 ~ 'High')) %>%
dplyr::rename('Sample.Name' = 'SapleName_readmatrix') %>%
dplyr::rename('pCO2' = 'OA') %>%
dplyr::select(c('Sample.Name','pCO2','Salinity', 'Aragonite_saturation')) %>%
dplyr::mutate(All_treatment = paste((substr(pCO2,1,1)),
(substr(Salinity,1,1)),
(substr(Aragonite_saturation,1,1)), sep = '')) %>%
dplyr::mutate(pCO2_Salinity = substr(All_treatment, 2,3)) # experiment treatment data
dds.d2_rlogtrans <- as.data.frame(rlogTransformation(assay(dds.d2))) # rlog transoform the expression data matrix (dds object)
dds.d2_rlogtrans <- tibble::rownames_to_column(dds.d2_rlogtrans,"TranscriptID") # rownames as first column
# call the module colors
modcolor <- as.data.frame(unique(day2_ModuleMembership$moduleColor))
names(modcolor)[1] <- "color"
for(i in 1:nrow(modcolor)) {
# vst read count date - narrow the columns - reshape and rename
Mod_geneIDs      <- day2_ModuleMembership %>% dplyr::filter(moduleColor %in% modcolor[i,]) %>%  dplyr::select("TranscriptID") %>%  na.omit()
d2_rlog_Mod      <- dds.d2_rlogtrans %>% dplyr::filter(TranscriptID %in% Mod_geneIDs[,1])
d2_rlog_Mod_MELT <- melt(d2_rlog_Mod, id=("TranscriptID")) # melt using reshape2
names(d2_rlog_Mod_MELT)[(2:3)] <-  c('Sample.Name', 'rlog_Expression') # change column names
# merge by common row values 'Sample.Name'
merged_Expdata_Mod <- merge(d2_rlog_Mod_MELT, d2.Treatment.data, by ='Sample.Name')
# mean Exp response table
meanEXp_Mod <- merged_Expdata_Mod %>%
select(c('Sample.Name','rlog_Expression','Salinity', 'pCO2', 'Aragonite_saturation')) %>%
group_by(Sample.Name, Aragonite_saturation, Salinity, pCO2) %>%
dplyr::summarize(mean.rlogExp = mean(rlog_Expression),
sd.rlogtExp = sd(rlog_Expression),
na.rm=TRUE)
# summarize datasets further by treatment period  =========================================================================================== #
# remember:this is a mean of a mean!! First we complete mean vst exp by sample id (compiling all red module genes) - next all sample IDs by the treatment period (below
# I will use these for mean SE plots
# Aragonite_saturation ========================== #
meanEXp_Summary.Aragonite_saturation <- meanEXp_Mod %>%
group_by(Aragonite_saturation) %>%
dplyr::summarize(mean = mean(mean.rlogExp),
sd = sd(sd.rlogtExp),
n = n(),
se = sd/sqrt(n))
# Salinity treatment ========================== #
meanEXp_Summary.Salinity <- meanEXp_Mod %>%
group_by(Salinity) %>%
dplyr::summarize(mean = mean(mean.rlogExp),
sd = sd(sd.rlogtExp),
n = n(),
se = sd/sqrt(n))
# pCO2 treatment ========================== #
meanEXp_Summary.pCO2 <- meanEXp_Mod %>%
group_by(pCO2) %>%
dplyr::summarize(mean = mean(mean.rlogExp),
sd = sd(sd.rlogtExp),
n = n(),
se = sd/sqrt(n))
# Salinity treatment ========================== #
meanEXp_Summary.All.Treatment <- meanEXp_Mod %>%
group_by(Salinity, Aragonite_saturation, pCO2) %>%
dplyr::summarize(mean = mean(mean.rlogExp),
sd = sd(sd.rlogtExp),
n = n(),
se = sd/sqrt(n))
# PLOT =========================================================================================== #
# The errorbars overlapped, so use position_dodge to move them horizontally
pd <- position_dodge(0.3) # move them .05 to the left and right
# All.Treatment mean sd - allows all plots to have the same y axis range
min_p <- min(meanEXp_Summary.All.Treatment$mean) - max(meanEXp_Summary.All.Treatment$se)
max_p <- max(meanEXp_Summary.All.Treatment$mean) + max(meanEXp_Summary.All.Treatment$se)
# Temperature mean sd plot ========================== #
Aragonite_saturation.rlog.Mod <- meanEXp_Summary.Aragonite_saturation %>%
dplyr::mutate(Aragonite_saturation    = forcats::fct_relevel(Aragonite_saturation, 'Low', 'Mid', 'High')) %>%
ggplot(aes(x=Aragonite_saturation, y=mean, fill=Aragonite_saturation)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Aragonite_saturation") +
ylab("rlog gene expression") +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("grey", "grey", "grey")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
# ggtitle(paste("Day 7 WGCNA", modcolor[i,], "Module VST GeneExp", sep =' ')) +
# expand_limits(y=0) +                                                    # Expand y range
scale_y_continuous(limits=c((min_p), (max_p))) +
theme(text = element_text(size=10), legend.position="none")
# Salinity mean sd plot ========================== #
Salinity.rlog.Mod <- meanEXp_Summary.Salinity %>%
dplyr::mutate(Salinity    = forcats::fct_relevel(Salinity, 'Low', 'High')) %>%
ggplot(aes(x=Salinity, y=mean, fill=Salinity)) +
theme_classic() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Salinity") +
ylab(NULL) +                 # note the mean was first by sample ID THEN by treatment
# ylab(paste(modcolor[i,]," Module rlog Gene Expression (Mean +/- SE)", sep = ' ')) +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("grey", "grey")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
# ggtitle("Day 21 WGCNA red' Module VST GeneExp") +
# expand_limits(y=0) +                                                    # Expand y range
scale_y_continuous(limits=c((min_p), (max_p))) +
theme(text = element_text(size=10), legend.position="none")
# pCO2 mean sd plot ========================== #
pCO2.rlog.Mod <- meanEXp_Summary.pCO2 %>%
dplyr::mutate(pCO2    = forcats::fct_relevel(pCO2, 'Low', 'High')) %>%
ggplot(aes(x=pCO2, y=mean, fill=pCO2)) +
theme_classic() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("pCO2") +
ylab(NULL) +                 # note the mean was first by sample ID THEN by treatment
# ylab(paste(modcolor[i,]," Module rlog Gene Expression (Mean +/- SE)", sep = ' ')) +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("grey", "grey")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
# ggtitle("Day 21 WGCNA red' Module VST GeneExp") +
# expand_limits(y=0) +                                                    # Expand y range
scale_y_continuous(limits=c((min_p), (max_p))) +
theme(text = element_text(size=10), legend.position="none")
# Assemble these together =========================================================================================== #
single.factor.plot <-  ggarrange(Aragonite_saturation.rlog.Mod, Salinity.rlog.Mod,  pCO2.rlog.Mod,
plotlist = NULL,
ncol = 3,
nrow = 1,
labels = NULL)
# Summary plot of all treatments ==================================================================================== #
AllTreatment.rlog.Mod <- meanEXp_Summary.All.Treatment %>%
dplyr::mutate(Salinity    = forcats::fct_relevel(Salinity, 'Low', 'High')) %>%
dplyr::mutate(pCO2        = forcats::fct_relevel(pCO2, 'Low', 'High')) %>%
dplyr::mutate(Aragonite_saturation = forcats::fct_relevel(Aragonite_saturation, 'High', 'Mid', 'Low')) %>%
ggplot(aes(x=pCO2, y=mean, fill=Aragonite_saturation, group=Aragonite_saturation)) + # group aesthetic connect line (Slaintiy) and color - the x axis in this case is pCO2
theme_classic() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("pCO2") +
ylab("rlog gene expression") +                 # note the mean was first by sample ID THEN by treatment
# ylab(paste(modcolor[i,]," Module rlog Gene Expression (Mean +/- SE)", sep = ' ')) +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#D55E00", "#E69F00", "#56B4E9")) +
scale_y_continuous(limits=c((min_p), (max_p))) +
theme(text = element_text(size=15)) +
facet_wrap(~Salinity) # facetted by temperature
# output   ======================================================================================================== #
pdf(paste("Output/WGCNA/day2_larvae_hightemp/ModuleExpression_Treatment/day2_Exp_Module_",modcolor[i,],".pdf", sep = ''), width=9, height=8)
print(ggarrange(single.factor.plot, AllTreatment.rlog.Mod,
plotlist = NULL,
ncol = 1,
nrow = 2,
labels = NULL))
dev.off()
}
Day2_larvae_hightemp_master
write.csv(Day2_larvae_hightemp_master, file = "Output/WGCNA/day2_larvae_hightemp/GO_analysis/Day2_GO_Results_Master.csv", row.names = FALSE)
# load the output from the previous for loop
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis")
write.csv(Day2_larvae_hightemp_master, file = "Output/WGCNA/day2_larvae_hightemp/GO_analysis/Day2_GO_Results_Master.csv", row.names = FALSE)
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis")
write.csv(Day2_larvae_hightemp_master, file = "Output/WGCNA/day2_larvae_hightemp/GO_analysis/Day2_GO_Results_Master.csv", row.names = FALSE)
