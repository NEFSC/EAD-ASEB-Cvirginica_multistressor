y=mean,
colour=Age,
linetype= fct_relevel(Temp, c("Low", "High")))) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
#scale_colour_manual() + # breaks=c("Low", "High"), values=c("#56B4E9","#E69F00")
#geom_boxplot() +
geom_point(aes(colour = Age),
position = position_dodge2(width = 1)) +
geom_smooth(method = "lm", fill = NA) +
stat_summary(fun.y="mean", size = 0.5,
position = position_dodge2(width = 1)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
position = position_dodge2(width = 1)) +
labs(title="Length data", x ="Aragonite Saturation State", y = "Larvae size (μm)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text=element_text(size=12),
legend.position="none") +
facet_wrap(~Age, scales = "free_y")
ggplot(data=(Master_Lengths_Rep_means %>%
dplyr::filter(!Age %in% c(19, 22)) %>%
dplyr::mutate(AllTreat = paste0(OA,' x ',Salinity,' x ',Temp)) %>%
dplyr::mutate(mean = as.numeric(mean))),
aes(x=Aragonite_saturation,
y=mean,
linetype= fct_relevel(Temp, c("Low", "High")))) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
geom_point(aes(colour = Age),
position = position_dodge2(width = 1)) +
geom_smooth(method = "lm", fill = NA) +
stat_summary(fun.y="mean", size = 0.5,
position = position_dodge2(width = 1)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
position = position_dodge2(width = 1)) +
labs(title="Length data", x ="Aragonite Saturation State", y = "Larvae size (μm)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text=element_text(size=12),
legend.position="none") +
facet_wrap(~Age, scales = "free_y")
ggplot(data=(Master_Lengths_Rep_means %>%
dplyr::filter(!Age %in% c(19, 22)) %>%
dplyr::mutate(AllTreat = paste0(OA,' x ',Salinity,' x ',Temp)) %>%
dplyr::mutate(mean = as.numeric(mean))),
aes(x=Aragonite_saturation,
y=mean,
linetype= fct_relevel(Temp, c("Low", "High")))) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
geom_point(aes(colour = Age),
position = position_dodge2(width = 1)) +
geom_smooth(method = "lm", fill = NA) +
stat_summary(fun.y="mean", size = 0.5,
position = position_dodge2(width = 1)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
position = position_dodge2(width = 1))
ggplot(data=(Master_Lengths_Rep_means %>%
dplyr::filter(!Age %in% c(19, 22)) %>%
dplyr::mutate(AllTreat = paste0(OA,' x ',Salinity,' x ',Temp)) %>%
dplyr::mutate(mean = as.numeric(mean))),
aes(x=as.numeric(Aragonite_saturation),
y=mean,
linetype= fct_relevel(Temp, c("Low", "High")))) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
geom_point(aes(colour = Age),
position = position_dodge2(width = 1)) +
geom_smooth(method = "lm", fill = NA) +
stat_summary(fun.y="mean", size = 0.5,
position = position_dodge2(width = 1)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
position = position_dodge2(width = 1)) +
labs(title="Length data", x ="Aragonite Saturation State", y = "Larvae size (μm)") +
theme_classic()
ggplot(data=(Master_Lengths_Rep_means %>%
dplyr::filter(!Age %in% c(19, 22)) %>%
dplyr::mutate(AllTreat = paste0(OA,' x ',Salinity,' x ',Temp)) %>%
dplyr::mutate(mean = as.numeric(mean))),
aes(x=as.numeric(Aragonite_saturation),
y=mean,
linetype= fct_relevel(Temp, c("Low", "High")))) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
geom_point(aes(colour = Age)) +
geom_smooth(method = "lm", fill = NA)
ggplot(data=(Master_Lengths_Rep_means %>%
dplyr::filter(!Age %in% c(19, 22)) %>%
dplyr::mutate(AllTreat = paste0(OA,' x ',Salinity,' x ',Temp)) %>%
dplyr::mutate(mean = as.numeric(mean))),
aes(x=as.numeric(Aragonite_saturation),
y=mean,
linetype= fct_relevel(Temp, c("Low", "High")))) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
geom_point(aes(colour = Age)) +
geom_smooth(method = "lm", fill = NA) +
stat_summary(fun.y="mean", size = 0.5,
position = position_dodge2(width = 1)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
position = position_dodge2(width = 1))
ggplot(data=(Master_Lengths_Rep_means %>%
dplyr::filter(!Age %in% c(19, 22)) %>%
dplyr::mutate(AllTreat = paste0(OA,' x ',Salinity,' x ',Temp)) %>%
dplyr::mutate(mean = as.numeric(mean))),
aes(x=as.numeric(Aragonite_saturation),
y=mean,
linetype= fct_relevel(Temp, c("Low", "High")))) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
geom_point(aes(colour = Age)) +
geom_smooth(method = "lm", fill = NA) +
stat_summary(fun.y="mean", size = 0.5,
position = position_dodge2(width = 1)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar',
position = position_dodge2(width = 1)) +
labs(title="Length data", x ="Aragonite Saturation State", y = "Larvae size (μm)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text=element_text(size=12),
legend.position="none") +
facet_wrap(~Age, scales = "free_y")
ggplot(data=(Master_Lengths_Rep_means %>%
dplyr::filter(!Age %in% c(19, 22)) %>%
dplyr::mutate(AllTreat = paste0(OA,' x ',Salinity,' x ',Temp)) %>%
dplyr::mutate(mean = as.numeric(mean))),
aes(x=as.numeric(Aragonite_saturation),
y=mean,
linetype= fct_relevel(Temp, c("Low", "High")))) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
geom_point(aes(colour = Age)) +
geom_smooth(method = "lm", fill = NA) +
stat_summary(fun.y="mean", size = 0.5,
position = position_dodge2(width = 1)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar')+ # position = position_dodge2(width = 1)
labs(title="Length data", x ="Aragonite Saturation State", y = "Larvae size (μm)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text=element_text(size=12),
legend.position="none") +
facet_wrap(~Age, scales = "free_y")
ggplot(data=(Master_Lengths_Rep_means %>%
dplyr::filter(!Age %in% c(19, 22)) %>%
dplyr::mutate(AllTreat = paste0(OA,' x ',Salinity,' x ',Temp)) %>%
dplyr::mutate(mean = as.numeric(mean))),
aes(x=as.numeric(Aragonite_saturation),
y=mean,
linetype= fct_relevel(Temp, c("Low", "High")))) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
geom_point(aes(colour = Age)) +
geom_smooth(method = "lm", fill = NA) +
stat_summary(fun.y="mean", size = 0.5) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar')+ # position = position_dodge2(width = 1)
labs(title="Length data", x ="Aragonite Saturation State", y = "Larvae size (μm)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text=element_text(size=12),
legend.position="none") +
facet_wrap(~Age, scales = "free_y")
ggplot(data=(Master_Lengths_Rep_means %>%
dplyr::filter(!Age %in% c(19, 22)) %>%
dplyr::mutate(AllTreat = paste0(OA,' x ',Salinity,' x ',Temp)) %>%
dplyr::mutate(mean = as.numeric(mean))),
aes(x=as.numeric(Aragonite_saturation),
y=mean,
linetype= fct_relevel(Temp, c("Low", "High")))) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
geom_point() +
geom_smooth(method = "lm", fill = NA, color = 'grey') +
stat_summary(fun.y="mean", size = 0.5)
ggplot(data=(Master_Lengths_Rep_means %>%
dplyr::filter(!Age %in% c(19, 22)) %>%
dplyr::mutate(AllTreat = paste0(OA,' x ',Salinity,' x ',Temp)) %>%
dplyr::mutate(mean = as.numeric(mean))),
aes(x=as.numeric(Aragonite_saturation),
y=mean,
linetype= fct_relevel(Temp, c("Low", "High")))) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
geom_point() +
geom_smooth(method = "lm", fill = NA, color = 'grey') +
stat_summary(fun.y="mean", size = 0.5) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar')+ # position = position_dodge2(width = 1)
labs(title="Length data", x ="Aragonite Saturation State", y = "Larvae size (μm)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text=element_text(size=12),
legend.position="none") +
facet_wrap(~Age, scales = "free_y")
ggplot(data=(Master_Lengths_Rep_means %>%
dplyr::filter(!Age %in% c(19, 22)) %>%
dplyr::mutate(AllTreat = paste0(OA,' x ',Salinity,' x ',Temp)) %>%
dplyr::mutate(mean = as.numeric(mean))),
aes(x=as.numeric(Aragonite_saturation),
y=mean,
linetype= fct_relevel(Temp, c("Low", "High")))) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
geom_point() +
geom_smooth(method = "loess", fill = NA, color = 'grey') +
stat_summary(fun.y="mean", size = 0.5) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar')+ # position = position_dodge2(width = 1)
labs(title="Length data", x ="Aragonite Saturation State", y = "Larvae size (μm)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text=element_text(size=12),
legend.position="none") +
facet_wrap(~Age*Temp, scales = "free_y")
ggplot(data=(Master_Lengths_Rep_means %>%
dplyr::filter(!Age %in% c(19, 22)) %>%
dplyr::mutate(AllTreat = paste0(OA,' x ',Salinity,' x ',Temp)) %>%
dplyr::mutate(mean = as.numeric(mean))),
aes(x=as.numeric(Aragonite_saturation),
y=mean,
linetype= fct_relevel(Temp, c("Low", "High")))) +
scale_linetype_manual(breaks=c("Low", "High"), values=c("dashed","solid")) +
geom_point() +
geom_smooth(method = "loess", fill = NA, color = 'grey') +
stat_summary(fun.y="mean", size = 0.5) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar')+ # position = position_dodge2(width = 1)
labs(title="Length data", x ="Aragonite Saturation State", y = "Larvae size (μm)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.text=element_text(size=12),
legend.position="none") +
facet_wrap(~Age, scales = "free_y")
---
---
---
---
---
# title: "WGCNA overlapped genes"
# author: "Samuel Gurr"
# date: "Oct 5, 2022"
---
#  LOAD LIBRARIES
library(dplyr)
library(forcats)
library(ggplot2)
library(reshape2)
library(ggpubr)
library(tidyr)
library(tidyverse)
# SET WORKING DIRECTORY AND LOAD DATA
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis")
path_out = 'C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/Output/WGCNA/' # personnal computer
# master reference view te master ref R script for details
Master_ref  <- read.csv(file= "Data/TagSeq/Seq_details/Seq_Reference_Master.csv", sep=',', header=TRUE) %>%
dplyr::select(c('Cvirginica_TranscriptID','Annotation_GO_ID', 'Cvirginica_length'))
Cvirginica_annot_reference  <- read.csv(file="Data/TagSeq/Seq_details/seq_id_master.csv", sep=',', header=TRUE) %>%
dplyr::select(c('TranscriptID','Function','GeneID')) %>%
dplyr::mutate(TranscriptID = gsub(" ", "", TranscriptID)) %>% # remove the space at the end of each transcript ID
dplyr::mutate(Protein_name = gsub("\\s\\(LOC.*|\\sLOC111.*", "", perl=TRUE, Function)) %>%
dplyr::select(!Function)
d2_Annot_ModuleMembership      <- read.csv("Output/WGCNA/day2_larvae/d2.WGCNA_ModulMembership.csv")
# for loop to call the threshold or module mdembership
d2ModCols                      <- data.frame(moduleColor = unique(d2_Annot_ModuleMembership$moduleColor)) %>% # unique module colors
dplyr::filter(moduleColor %in% c('pink',
'blue',
'turquoise',
'brown',
'black',
'red')) %>% # sig modules
dplyr::mutate(Day = "Day2")
df_total              <- data.frame() # start dataframe
day2_mod_RR           <- data.frame(matrix(nrow = 1, ncol = 5)) # create dataframe to save cumunalitively during for loop
colnames(day2_mod_RR) <- c('Day', 'moduleColor', 'TranscriptID','geneSymbol','Protein_name') # names for comuns in the for loop
for (i in 1:nrow(d2ModCols)) {
# start with loop by calling the row value common with the 'Master_KEGG_BPTerms' data frind from rbind above
modColor         <- d2ModCols[i,1]
loopmodColor_cor <- paste("MM.", modColor, sep = '') # column name for mod color - PEarsons correlation value
loopmodColor_p   <- paste("p.MM.", modColor, sep = '') # column name for mod color - Students asymptotic p value
Mod_loop_d2            <- d2_Annot_ModuleMembership %>%
dplyr::filter(moduleColor %in% modColor) %>%
dplyr::select(c('TranscriptID','geneSymbol','Protein_name','moduleColor', loopmodColor_cor,loopmodColor_p))
Mod_Loop_d2_RRcutoff   <- as.data.frame(Mod_loop_d2 %>%
dplyr::filter(!(.[[5]] <  0.6 & .[[6]] > 0.05)) %>%
dplyr::mutate(Day = "Day2")) %>%
dplyr::select(!c(5,6))
# write csv file for the data reduced mod mem
loopdf       <- data.frame(Mod_Loop_d2_RRcutoff) # name dataframe for this single row
day2_mod_RR  <- rbind(day2_mod_RR,loopdf) #bind to a cumulative list dataframe
print(day2_mod_RR) # print to monitor progress
}
# View(day2_mod_RR)
day2_mod_RR      <- read.csv("Output/WGCNA/day2_larvae/d2.WGCNA_ModulMembership_RRcutoff.csv") %>% dplyr::mutate(Day = "Day2")
d22_Annot_ModuleMembership     <- read.csv("Output/WGCNA/day18_spat/d18.WGCNA_ModulMembership.csv")
d22ModCols                     <- data.frame(moduleColor = unique(d22_Annot_ModuleMembership$moduleColor)) %>% # unique module colors
dplyr:: filter(moduleColor %in% c('tan',
'red',
'turquoise',
'salmon',
'blue',
'green',
'greenyellow')) %>% # sig modules
dplyr::mutate(Day = "Day22")
df_total              <- data.frame() # start dataframe
day22_mod_RR          <- data.frame(matrix(nrow = 1, ncol = 5)) # create dataframe to save cumunalitively during for loop
colnames(day22_mod_RR) <- c('Day', 'moduleColor', 'TranscriptID','geneSymbol','Protein_name') # names for comuns in the for loop
for (i in 1:nrow(d22ModCols)) {
# start with loop by calling the row value common with the 'Master_KEGG_BPTerms' data frind from rbind above
modColor         <- d22ModCols[i,1]
loopmodColor_cor <- paste("MM.", modColor, sep = '') # column name for mod color - PEarsons correlation value
loopmodColor_p   <- paste("p.MM.", modColor, sep = '') # column name for mod color - Students asymptotic p value
Mod_loop_d22            <- d22_Annot_ModuleMembership %>%
dplyr::filter(moduleColor %in% modColor) %>%
dplyr::select(c('TranscriptID','geneSymbol','Protein_name','moduleColor', loopmodColor_cor,loopmodColor_p))
Mod_Loop_d22_RRcutoff   <- as.data.frame(Mod_loop_d22 %>%
dplyr::filter(!(.[[5]] <  0.6 & .[[6]] > 0.05)) %>%
dplyr::mutate(Day = "Day22")) %>%
dplyr::select(!c(5,6))
loopdf       <- data.frame(Mod_Loop_d22_RRcutoff) # name dataframe for this single row
day22_mod_RR  <- rbind(day22_mod_RR,loopdf) #bind to a cumulative list dataframe
print(day22_mod_RR) # print to monitor progress
}
# View(day22_mod_RR)
day22_mod_RR      <- read.csv("Output/WGCNA/day18_spat/d18.WGCNA_ModulMembership_RRcutoff.csv") %>% dplyr::mutate(Day = "Day22")
# master WGCNA module data for for loops!
WGCNA_MasterModData   <-  merge( (as.data.frame(rbind(day2_mod_RR,
# d2_Annot_ModuleMembership_hightemp,
day22_mod_RR)) %>%
dplyr::rename(Cvirginica_TranscriptID=TranscriptID)),
Master_ref, by="Cvirginica_TranscriptID")
d22red <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'red')) %>%
dplyr::mutate(mod_color = 'red')
d22green  <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'green')) %>%
dplyr::mutate(mod_color = 'green')
#merge
modules_HighpCO2LowExp <- rbind(d22red, d22green)
#do genes overlap?
modules_HighpCO2LowExp_filtered <- as.data.frame(modules_HighpCO2LowExp %>%
group_by(Cvirginica_TranscriptID,Protein_name, mod_color) %>%
dplyr::summarise(n = n()) %>%
dplyr::arrange(Protein_name)
filter(!n %in% 1) %>%
modules_HighpCO2LowExp_filtered <- as.data.frame(modules_HighpCO2LowExp %>%
group_by(Cvirginica_TranscriptID,Protein_name, mod_color) %>%
dplyr::summarise(n = n()) %>%
dplyr::arrange(Protein_name))
View(modules_HighpCO2LowExp_filtered)
as.data.frame(modules_HighpCO2LowExp %>%
group_by(Protein_name, mod_color) %>% # Cvirginica_TranscriptID  - add this in if you want the exact ID name
dplyr::summarise(n = n()) %>%
dplyr::arrange(Protein_name))
#do genes overlap?
modules_HighpCO2LowExp_filtered <- as.data.frame(modules_HighpCO2LowExp %>%
group_by(Protein_name, mod_color) %>% # Cvirginica_TranscriptID  - add this in if you want the exact ID name
dplyr::summarise(n = n()) %>%
dplyr::arrange(Protein_name)
filter(!n %in% 1) %>%
#do genes overlap?
modules_HighpCO2LowExp_filtered <- as.data.frame(modules_HighpCO2LowExp %>%
group_by(Protein_name, mod_color) %>% # Cvirginica_TranscriptID  - add this in if you want the exact ID name
dplyr::summarise(n = n()) %>%
dplyr::arrange(Protein_name) %>%
filter(!n %in% 1) %>%
select(!n))
View(modules_HighpCO2LowExp_filtered)
#do genes overlap?
modules_HighpCO2LowExp_filtered <- as.data.frame(modules_HighpCO2LowExp %>%
#do genes overlap?
modules_HighpCO2LowExp_filtered <- as.data.frame(modules_HighpCO2LowExp %>%
#do genes overlap?
modules_HighpCO2LowExp_filtered <- as.data.frame(modules_HighpCO2LowExp %>%
group_by(Protein_name) %>% # Cvirginica_TranscriptID, mod_color  - add this in if you want the exact ID name
dplyr::summarise(n = n()) %>%
dplyr::arrange(Protein_name) %>%
filter(!n %in% 1))
View(modules_HighpCO2LowExp_filtered)
#do genes overlap?
modules_HighpCO2LowExp_filtered <- as.data.frame(modules_HighpCO2LowExp %>%
group_by(Protein_name) %>% # Cvirginica_TranscriptID, mod_color  - add this in if you want the exact ID name
dplyr::summarise(n = n()) %>%
dplyr::arrange(Protein_name) %>%
filter(!n %in% 1))
View(modules_HighpCO2LowExp_filtered)
d22tan <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'tan'))
d22red <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'red'))
# create a vector to filter with
d22tan_filter          <- d22tan %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22tan_proteinNames    <- paste(substr(d22tan_filter$Protein_name,1,15), collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22red_filter          <- d22red %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22red_proteinNames    <- paste(substr(d22red_filter$Protein_name,1,15), collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
# subsets
d22red_SUBSET  <- subset(d22red_filter, !grepl(d22tan_proteinNames, Protein_name))
d22red_SUBSET$Protein_name
nrow(d22red_filter) - nrow(d22red_SUBSET) # only 10 genes omitted in this subsetting
d22red_SUBSET$Protein_name
d22red_SUBSET$Protein_name
d22tan_proteinNames
d22red_filter
View(d22red_filter)
# ============================================================================= #
# Co-expression Pattern: High pCO2 == Low expression - interpreted as those overlapped with day 22 red and day 22 green
# ============================================================================= #
View(d22red)
#do genes overlap?
modules_HighpCO2LowExp_filtered <- as.data.frame(modules_HighpCO2LowExp %>%
group_by(Protein_name, mod_color) %>% # Cvirginica_TranscriptID, mod_color  - add this in if you want the exact ID name
dplyr::summarise(n = n()) %>%
dplyr::arrange(Protein_name) %>%
filter(!n %in% 1))
View(modules_HighpCO2LowExp_filtered)
# create a vector to filter with
d22green_filter          <- d22green %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22green_proteinNames    <- paste(substr(d22green_filter$Protein_name,1,15), collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22green_proteinNames
d22red_filter          <- d22red %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22red_proteinNames    <- paste(substr(d22red_filter$Protein_name,1,15), collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
#do genes overlap? what genes are shared between red and green?
d22red_SUBSET  <- subset(d22red_filter, grepl(d2turquoise_proteinNames, Protein_name))
#do genes overlap? what genes are shared between red and green?
d22red_SUBSET  <- subset(d22red_filter, grepl(d22green_proteinNames, Protein_name))
View(d22red_SUBSET)
d22green_proteinNames
d22red_filter
d22red_filter
d22green_proteinNames
#do genes overlap? what genes are shared between red and green?
d22red_SUBSET  <- subset(d22red_filter, grepl(d22green_proteinNames, Protein_name))
View(d22red_SUBSET)
View(d22green_filter)
# create a vector to filter with
d22green_filter          <- d22green %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22green_proteinNames    <- paste(substr(d22green_filter$Protein_name,1,25), collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22red_filter          <- d22red %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22red_proteinNames    <- paste(substr(d22red_filter$Protein_name,1,25), collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
#do genes overlap? what genes are shared between red and green?
d22red_SUBSET  <- subset(d22red_filter, grepl(d22green_proteinNames, Protein_name))
View(d22red_SUBSET)
# create a vector to filter with
d22green_filter          <- d22green %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22green_proteinNames    <- paste(d22green_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22red_proteinNames    <- paste(d22red_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
#do genes overlap? what genes are shared between red and green?
d22red_SUBSET  <- subset(d22red_filter, grepl(d22green_proteinNames, Protein_name))
View(d22red_SUBSET)
d22green <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'green'))
d22blue  <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'blue'))
d2blue  <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day2' ~ moduleColor %in% 'blue'))
# create a vector to filter with
d22green_filter            <- d22green %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22green_proteinNames      <- paste(d22green_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22blue_filter             <- d22blue %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22blue_proteinNames       <- paste(d22blue_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d2blue_filter             <- d2blue %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d2blue_proteinNames       <- paste(d2blue_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
# subsets
d22green_SUBSET  <- subset(d22green_filter, grepl(d2blue_proteinNames, Protein_name))
unique(sort(d22green_SUBSET$Protein_name)) # all of green D22 that also contains blue D1
d22blue_SUBSET  <- subset(d22blue_filter, grepl(d2blue_proteinNames, Protein_name))
unique(sort(d22blue_SUBSET$Protein_name)) # all of green D22 that also contains blue D1
# genes unique to d2 blue - ommit those that are shared with d22 blue
d2blue_SUBSET  <- d2blue %>% filter(!(Protein_name %in% unique(d22blue_SUBSET$Protein_name)))
sort(d2blue_SUBSET$Protein_name)
d22blue_SUBSET
unique(sort(d22blue_SUBSET$Protein_name)) # all of green D22 that also contains blue D1
# ============================================================================= #
# Co-expression Pattern: High Salinity == High Expression
# ============================================================================= #
d2blue <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day2' ~ moduleColor %in% 'blue'))
d22blue  <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'blue'))
#merge
modules_HighSalHighExp <- rbind(d2blue, d22blue)
#do genes overlap?
modules_HighSalHighExp_filtered <- as.data.frame(modules_HighSalHighExp %>%
group_by(Cvirginica_TranscriptID,Protein_name) %>%
dplyr::summarise(n = n()) %>%
filter(!n %in% 1) %>%
select(!n))
modules_HighSalHighExp_filtered
View(d2blue)
View(d22blue)
