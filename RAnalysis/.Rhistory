na.omit() %>%
dplyr::mutate(Day = "Day18")
d18ModCols                     <- data.frame(moduleColor = unique(d18_Annot_ModuleMembership$moduleColor)) %>% # unique module colors
dplyr:: filter(moduleColor %in% c('tan',
'red',
'turquoise',
'salmon',
'blue',
'green',
'greenyellow')) %>% # sig modules
dplyr::mutate(Day = "Day18")
# master WGCNA module data for for loops!
WGCNA_MasterModData   <-  merge( (as.data.frame(rbind(d2_Annot_ModuleMembership,
d18_Annot_ModuleMembership)) %>%
dplyr::rename(Cvirginica_TranscriptID=TranscriptID)),
Master_ref, by="Cvirginica_TranscriptID")
WGCNA_ColorList       <-  rbind(d2ModCols, d18ModCols) # master WGCNA color list - use this to loop all the analysis
#  mapped read counts for each Day (addressed separately in DESeq2)
d2.counts            <- read.csv(file="Data/TagSeq/Filtered_counts/filtered_counts_5cpm_50perc/day2.filtered_5cpm50perc.csv", sep=',', header=TRUE) %>%
dplyr::rename("TranscriptID" = "X")
d18.counts           <- read.csv(file="Data/TagSeq/Filtered_counts/filtered_counts_5cpm_50perc/day18.filtered_5cpm50perc.csv", sep=',', header=TRUE) %>%
dplyr::rename("TranscriptID" = "X")
# GOslim
slim        <- getOBOCollection("http://current.geneontology.org/ontology/subsets/goslim_generic.obo") #get GO database - # call goslim_generic.obo terms as 'slim'
WGCNA_MasterModData
# call the GO terms
Cvirginica_GOterms                <- as.data.frame(Master_ref) %>% dplyr::select(c('Cvirginica_TranscriptID','Annotation_GO_ID'))
colnames(Cvirginica_GOterms)[1:2] <- c('transcript.ID', 'GO.terms') # call gene name and the GO terms - (Uniprot ID 'V5')
splitted                          <- strsplit(as.character(Cvirginica_GOterms$GO.terms), ";") #slit into multiple GO ids by delimiter'; ' remember the space after ; is needed here! without this you will only call the first listed GO term for each gene!
GO.terms                          <- data.frame(v1 = rep.int(Cvirginica_GOterms$transcript.ID, sapply(splitted, length)), v2 = unlist(splitted)) #list all genes with each of their GO terms in a single row
# Prepare dataframe(s) and vectors for goseq
# Format 'GO.term' for goseq from the P.generosa annotation .fna file 'Geoduck_annotation'
IDvector.d2          <- as.vector(unique(d2.counts$TranscriptID))   # call unique genes day2 - 'IDvector'
IDvector.d2_hightemp <- as.vector(unique(d2.counts_hightemp$TranscriptID))   # call unique genes day2 - 'IDvector'
IDvector.d18         <- as.vector(unique(d18.counts$TranscriptID))  # call unique genes day18 - 'IDvector'
GO_unique.genes.all  <- as.vector(unique(Master_ref$Cvirginica_TranscriptID)) # call all unique genes for GO analysis (goseq)
# Gene length
GO_gene.length  <- unique(Master_ref %>% dplyr::select(c("Cvirginica_TranscriptID","Cvirginica_length")))
# merge length with counts data
length_vector           <- GO_gene.length$Cvirginica_length
GeneLength.d2           <-  dplyr::inner_join(d2.counts, unique((GO_gene.length %>% dplyr::rename(TranscriptID = Cvirginica_TranscriptID)), by='TranscriptID'))
GeneLength.d2_hightemp  <-  dplyr::inner_join(d2.counts_hightemp, unique((GO_gene.length %>% dplyr::rename(TranscriptID = Cvirginica_TranscriptID)), by='TranscriptID'))
GeneLength.d18          <- dplyr::inner_join(d18.counts, unique((GO_gene.length %>% dplyr::rename(TranscriptID = Cvirginica_TranscriptID)), by='TranscriptID'))
# call length values for goseq - confirms that the IDvector and length_vector are the same!!!
length_vector.d2          <- GeneLength.d2$Cvirginica_length    # length vector for all unique reads address in DESeq2 on day 0
sum(sapply(length_vector.d2,length)) == dim(d2.counts)[1] #should be TRUE
length_vector.d2_hightemp <- GeneLength.d2_hightemp$Cvirginica_length    # length vector for all unique reads address in DESeq2 on day 0
sum(sapply(length_vector.d2_hightemp,length)) == dim(d2.counts_hightemp)[1] #should be TRUE
length_vector.d18         <- GeneLength.d18$Cvirginica_length    # length vector for all unique reads address in DESeq2 on day 7
sum(sapply(length_vector.d18,length)) == dim(d18.counts)[1] #should be TRUE
d2_Annot_ModuleMembership
GO_unique.genes.all
Mod         <- d2_Annot_ModuleMembership_hightemp %>% dplyr::filter(moduleColor %in% WGCNA_ColorList[1,1]) # call the WGCNA Day - essential here!
Mod
Mod         <- d2_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% WGCNA_ColorList[1,1]) # call the WGCNA Day - essential here!
Modgenes    <- Mod[1] # TranscriptID
Modgenes
Mod[1]
Mod
Mod_integer <- as.integer(GO_unique.genes.all %in% (Modgenes$TranscriptID)) # w/o day-specific ID vector
names(Mod_integer)=GO_unique.genes.all # rename
pwf         <- nullp(Mod_integer,    id=GO_unique.genes.all, bias.data=length_vector) # make figure margins large enough for this to run...
goseq       <- goseq(pwf, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
GO.05           <- data.frame(goseq$category[goseq$over_represented_pvalue<.05]) # change twice here
colnames(GO.05) <- c("category")
GO.05           <- merge(GO.05, goseq, by="category") # change here
GO.05           <- merge(GO.05, goseq, by="category") # change here
GO.05           <- GO.05[order(GO.05$ontology, GO.05$over_represented_pvalue,-GO.05$numDEInCat),] %>%
dplyr::mutate(term = as.factor(term)) %>%
dplyr::mutate(moduleColor = WGCNA_ColorList[1,1]) %>%
dplyr::mutate(Day = 'Day2')
GO.05
GO.05           <- data.frame(goseq$category[goseq$over_represented_pvalue<.05]) # change twice here
colnames(GO.05) <- c("category")
GO.05           <- merge(GO.05, goseq, by="category") # change here
GO.05           <- GO.05[order(GO.05$ontology, GO.05$over_represented_pvalue,-GO.05$numDEInCat),] %>%
dplyr::mutate(term = as.factor(term)) %>%
dplyr::mutate(moduleColor = WGCNA_ColorList[i,1]) %>%
dplyr::mutate(Day = 'Day2')
GO.05           <- GO.05[order(GO.05$ontology, GO.05$over_represented_pvalue,-GO.05$numDEInCat),] %>%
dplyr::mutate(term = as.factor(term)) %>%
dplyr::mutate(moduleColor = WGCNA_ColorList[1,1]) %>%
dplyr::mutate(Day = 'Day2')
GO.05
for (i in 1:nrow(WGCNA_ColorList)) {
if (WGCNA_ColorList[i,2] == "Day2") {
Mod         <- d2_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% WGCNA_ColorList[i,1]) # call the WGCNA Day - essential here!
Modgenes    <- Mod[1] # TranscriptID
Mod_integer <- as.integer(GO_unique.genes.all %in% (Modgenes$TranscriptID)) # w/o day-specific ID vector
names(Mod_integer)=GO_unique.genes.all # rename
pwf         <- nullp(Mod_integer,    id=GO_unique.genes.all, bias.data=length_vector) # make figure margins large enough for this to run...
goseq       <- goseq(pwf, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
GO.05           <- data.frame(goseq$category[goseq$over_represented_pvalue<.05]) # change twice here
colnames(GO.05) <- c("category")
GO.05           <- merge(GO.05, goseq, by="category") # change here
GO.05           <- GO.05[order(GO.05$ontology, GO.05$over_represented_pvalue,-GO.05$numDEInCat),] %>%
dplyr::mutate(term = as.factor(term)) %>%
dplyr::mutate(moduleColor = WGCNA_ColorList[i,1]) %>%
dplyr::mutate(Day = 'Day2')
# remove Biological Process GO terms with < 10 genesand  Molecular Function terms with < 2 genes in the module (with that term)
GO.05_filtered <- GO.05 %>%
dplyr::mutate(numDEInCat = as.numeric(numDEInCat)) %>%
dplyr::filter(!(numDEInCat<2 & ontology == "BP"), !(numDEInCat<2 & ontology == "MF"))
# write csv
write.csv(GO.05, file = paste("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05",WGCNA_ColorList[i,1], "Module_unfiltered.csv", sep ='')) # save csv
write.csv(GO.05_filtered, file = paste("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05",WGCNA_ColorList[i,1], "Module.csv", sep ='')) # save csv
#print as we go
print(paste(WGCNA_ColorList[i,2], WGCNA_ColorList[i,1], "done", sep = ' '))
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
# Day 18 data              :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
} else if (WGCNA_ColorList[i,2] == "Day18") {
Mod         <- d18_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% WGCNA_ColorList[i,1]) # call the WGCNA Day - essential here!
Modgenes    <- Mod[1] # TranscriptID
Mod_integer <- as.integer(GO_unique.genes.all %in% (Modgenes$TranscriptID)) # w/o day-specific ID vector
names(Mod_integer)=GO_unique.genes.all # rename
pwf       <- nullp(Mod_integer,    id=GO_unique.genes.all, bias.data=length_vector) # make figure margins large enough for this to run...
goseq     <- goseq(pwf, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
GO.05           <- data.frame(goseq$category[goseq$over_represented_pvalue<.05]) # change twice here
colnames(GO.05) <- c("category")
GO.05           <- merge(GO.05, goseq, by="category") # change here
GO.05           <- GO.05[order(GO.05$ontology, GO.05$over_represented_pvalue,-GO.05$numDEInCat),] %>%
dplyr::mutate(term = as.factor(term)) %>%
dplyr::mutate(moduleColor = WGCNA_ColorList[i,1]) %>%
dplyr::mutate(Day = 'Day18')
# remove Biological Process GO terms with < 10 genesand  Molecular Function terms with < 2 genes in the module (with that term)
GO.05_filtered <- GO.05 %>%
dplyr::mutate(numDEInCat = as.numeric(numDEInCat)) %>%
dplyr::filter(!(numDEInCat<2 & ontology == "BP"), !(numDEInCat<2 & ontology == "MF"))
# write csv
write.csv(GO.05, file = paste("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GO.05",WGCNA_ColorList[i,1], "Module_unfiltered.csv", sep ='')) # save csv
write.csv(GO.05_filtered, file = paste("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GO.05",WGCNA_ColorList[i,1], "Module.csv", sep ='')) # save csv
#print as we go
print(paste(WGCNA_ColorList[i,2], WGCNA_ColorList[i,1], "done", sep = ' ')) }
else {} # .. close the if, if else statement
} # close the for loop
# =================================================================================================
# FOR LOOP goseq
# for loop for all goseq analysis - if/else to loop through the day 7, 14, and 21 WGCNA modules separately
# Objectives:
# - run goseq - go enrichment analysis calling just those with adj P value < 0.05
# - run GOslim
# - plot all modules (within each sampling day) with heatmaos fshowing the number of genes within each GOslim
#
# =================================================================================================
# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
# Day 2 data     ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
for (i in 1:nrow(WGCNA_ColorList)) {
if (WGCNA_ColorList[i,2] == "Day2") {
Mod         <- d2_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% WGCNA_ColorList[i,1]) # call the WGCNA Day - essential here!
Modgenes    <- Mod[1] # TranscriptID
Mod_integer <- as.integer(GO_unique.genes.all %in% (Modgenes$TranscriptID)) # w/o day-specific ID vector
names(Mod_integer)=GO_unique.genes.all # rename
pwf         <- nullp(Mod_integer,    id=GO_unique.genes.all, bias.data=length_vector) # make figure margins large enough for this to run...
goseq       <- goseq(pwf, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
GO.05           <- data.frame(goseq$category[goseq$over_represented_pvalue<.05]) # change twice here
colnames(GO.05) <- c("category")
GO.05           <- merge(GO.05, goseq, by="category") # change here
GO.05           <- GO.05[order(GO.05$ontology, GO.05$over_represented_pvalue,-GO.05$numDEInCat),] %>%
dplyr::mutate(term = as.factor(term)) %>%
dplyr::mutate(moduleColor = WGCNA_ColorList[i,1]) %>%
dplyr::mutate(Day = 'Day2')
# remove Biological Process GO terms with < 10 genesand  Molecular Function terms with < 2 genes in the module (with that term)
GO.05_filtered <- GO.05 %>%
dplyr::mutate(numDEInCat = as.numeric(numDEInCat)) %>%
dplyr::filter(!(numDEInCat<2 & ontology == "BP"), !(numDEInCat<2 & ontology == "MF"))
# write csv
write.csv(GO.05, file = paste("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05",WGCNA_ColorList[i,1], "Module_unfiltered.csv", sep ='')) # save csv
write.csv(GO.05_filtered, file = paste("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05",WGCNA_ColorList[i,1], "Module.csv", sep ='')) # save csv
#print as we go
print(paste(WGCNA_ColorList[i,2], WGCNA_ColorList[i,1], "done", sep = ' '))
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
# Day 18 data              :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
} else if (WGCNA_ColorList[i,2] == "Day18") {
Mod         <- d18_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% WGCNA_ColorList[i,1]) # call the WGCNA Day - essential here!
Modgenes    <- Mod[1] # TranscriptID
Mod_integer <- as.integer(GO_unique.genes.all %in% (Modgenes$TranscriptID)) # w/o day-specific ID vector
names(Mod_integer)=GO_unique.genes.all # rename
pwf       <- nullp(Mod_integer,    id=GO_unique.genes.all, bias.data=length_vector) # make figure margins large enough for this to run...
goseq     <- goseq(pwf, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
GO.05           <- data.frame(goseq$category[goseq$over_represented_pvalue<.05]) # change twice here
colnames(GO.05) <- c("category")
GO.05           <- merge(GO.05, goseq, by="category") # change here
GO.05           <- GO.05[order(GO.05$ontology, GO.05$over_represented_pvalue,-GO.05$numDEInCat),] %>%
dplyr::mutate(term = as.factor(term)) %>%
dplyr::mutate(moduleColor = WGCNA_ColorList[i,1]) %>%
dplyr::mutate(Day = 'Day18')
# remove Biological Process GO terms with < 10 genesand  Molecular Function terms with < 2 genes in the module (with that term)
GO.05_filtered <- GO.05 %>%
dplyr::mutate(numDEInCat = as.numeric(numDEInCat)) %>%
dplyr::filter(!(numDEInCat<2 & ontology == "BP"), !(numDEInCat<2 & ontology == "MF"))
# write csv
write.csv(GO.05, file = paste("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GO.05",WGCNA_ColorList[i,1], "Module_unfiltered.csv", sep ='')) # save csv
write.csv(GO.05_filtered, file = paste("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GO.05",WGCNA_ColorList[i,1], "Module.csv", sep ='')) # save csv
#print as we go
print(paste(WGCNA_ColorList[i,2], WGCNA_ColorList[i,1], "done", sep = ' ')) }
else {} # .. close the if, if else statement
} # close the for loop
#=================================================================================================== #
#
#
#  GOslim analysis
# - data reduction from the many GO terms to more broad functions/processes
#
#
#=================================================================================================== #
# load the output from the previous for loop
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis")
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis")
d2_GO.05blackModule        <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05blackModule.csv")
d2_GO.05blueModule         <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05blueModule.csv")
d2_GO.05brownModule        <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05brownModule.csv")
d2_GO.05pinkModule         <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05pinkModule.csv")
d2_GO.05redModule          <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05redModule.csv")
d2_GO.05turquoiseModule    <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05turquoiseModule.csv")
d2_hightemp_GO.05greenyellowModule  <- read.csv("Output/WGCNA/day2_larvae_hightemp/GO_analysis/RR_cutoff/GO.05greenyellowModule.csv")
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis")
d2_GO.05blackModule        <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05blackModule.csv")
d2_GO.05blueModule         <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05blueModule.csv")
d2_GO.05brownModule        <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05brownModule.csv")
d2_GO.05pinkModule         <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05pinkModule.csv")
d2_GO.05redModule          <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05redModule.csv")
d2_GO.05turquoiseModule    <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05turquoiseModule.csv")
d18_GO.05blueModule        <- read.csv("Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GO.05blueModule.csv")
d18_GO.05greenModule       <- read.csv("Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GO.05greenModule.csv")
d18_GO.05greenyellowModule <- read.csv("Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GO.05greenyellowModule.csv")
d18_GO.05redModule         <- read.csv("Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GO.05redModule.csv")
d18_GO.05greenModule
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis")
d2_GO.05blackModule        <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05blackModule.csv")
d2_GO.05blueModule         <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05blueModule.csv")
d2_GO.05brownModule        <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05brownModule.csv")
d2_GO.05pinkModule         <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05pinkModule.csv")
d2_GO.05redModule          <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05redModule.csv")
d2_GO.05turquoiseModule    <- read.csv("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GO.05turquoiseModule.csv")
d18_GO.05blueModule        <- read.csv("Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GO.05blueModule.csv")
d18_GO.05greenModule       <- read.csv("Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GO.05greenModule.csv")
d18_GO.05redModule         <- read.csv("Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GO.05redModule.csv")
d18_GO.05salmonModule      <- read.csv("Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GO.05salmonModule.csv")
d18_GO.05tanModule         <- read.csv("Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GO.05tanModule.csv")
d18_GO.05turquoiseModule   <- read.csv("Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GO.05turquoiseModule.csv")
# Master ALL WGCNA significant modules with treatment
Master_goseq_results      <- rbind(d2_GO.05blackModule, d2_GO.05blueModule, d2_GO.05brownModule,
d2_GO.05pinkModule,d2_GO.05redModule,d2_GO.05turquoiseModule,
d2_hightemp_GO.05greenyellowModule,d2_hightemp_GO.05magentaModule,
d2_hightemp_GO.05brownModule, d2_hightemp_GO.05pinkModule, d2_hightemp_GO.05redModule,
d18_GO.05blueModule, d18_GO.05greenModule, d18_GO.05greenyellowModule,d18_GO.05redModule,
d18_GO.05salmonModule, d18_GO.05tanModule,d18_GO.05turquoiseModule)
# Master ALL WGCNA significant modules with treatment
Master_goseq_results      <- rbind(d2_GO.05blackModule, d2_GO.05blueModule, d2_GO.05brownModule,
d2_GO.05pinkModule,d2_GO.05redModule,d2_GO.05turquoiseModule,
d18_GO.05blueModule, d18_GO.05greenModule,d18_GO.05redModule,
d18_GO.05salmonModule, d18_GO.05tanModule,d18_GO.05turquoiseModule)
# call all the module colors and days to loop GOslim analysis
GOslimLoop_vars <- unique(Master_goseq_results[c(9,10)])
GOslimLoop_vars
for (i in 1:nrow(GOslimLoop_vars)) {
# call the target dataset
goseq_res       <- Master_goseq_results %>%  dplyr::filter(Day %in% GOslimLoop_vars[i,2], moduleColor %in% GOslimLoop_vars[i,1])
WGCNA_res       <- WGCNA_MasterModData  %>%  dplyr::filter(Day %in% GOslimLoop_vars[i,2], moduleColor %in% GOslimLoop_vars[i,1])
transcript_ids  <- WGCNA_res$Cvirginica_TranscriptID
# Biological Function - run GOslim
goseq_res_BP        <- goseq_res %>%
dplyr::mutate(category = as.character(category)) %>%
dplyr::filter(ontology=="BP") # BP - all GO terms upregulated
BP_GOcollection     <- GOCollection(goseq_res_BP$category)
GOslims_BP          <- data.frame(goSlim(BP_GOcollection, slim, "BP")) #Find common parent terms to slim down our list
GOslims_BP$category <- row.names(GOslims_BP) #save rownames as category
# Molecular Function - run GOslim
goseq_res_MF        <- goseq_res %>%
dplyr::mutate(category = as.character(category)) %>%
dplyr::filter(ontology=="MF") # BP - all GO terms upregulated
MF_GOcollection     <- GOCollection(goseq_res_MF$category)
GOslims_MF          <- data.frame(goSlim(MF_GOcollection, slim, "MF")) #Find common parent terms to slim down our list
GOslims_MF$category <- row.names(GOslims_MF) #save rownames as category
# Get mapped terms - add to the GOslims datatable
# from Sam White's Biostars [post](https://support.bioconductor.org/p/128407/#128409).
# Write function mappedIds to get the query terms that mapped to the slim categories
# ...in other words, add a column to your slim dataframe with all the GO terms from goseq
mappedIds <-  function(df, collection, OFFSPRING) {  #the command to run requires a dataframe of slim terms, like slims_MF above, your list of query terms, and the offspring from the GOCollection by goSlim
map <- as.list(OFFSPRING[rownames(df)]) # Subset GOcollection offspring by the rownames of your dataframe
mapped <- lapply(map, intersect, ids(collection)) #Find the terms that intersect between the subset made above of your query terms and the GOids from the GO collection
df[["go_terms"]] <- vapply(unname(mapped), paste, collapse = ";", character(1L)) #Add column "go_terms" with matching terms
df #show resulting dataframe
}
BPslim_Mapped <- mappedIds(GOslims_BP, BP_GOcollection, GOBPOFFSPRING)
MFslim_Mapped <- mappedIds(GOslims_MF, MF_GOcollection, GOMFOFFSPRING)
# BIOLOGICAL PROCESS =============================================================================================== #
BPslim             <- dplyr::filter(BPslim_Mapped, Term!="biological_process") #filter out empty slims and term "biological process"
BPsplitted         <- strsplit(as.character(BPslim$go_terms), ";") #split into multiple GO ids
BPslim$BPsplitted  <- BPsplitted
for (n in 1:nrow(BPslim)) {
table       <- data.frame(GOlist = unlist(BPslim[n,6])) # call the BPsplitted column of characters and create a small table to filter
table       <- unique(table)
Cvirg_module         <- GO.terms %>% dplyr::filter(v1 %in% transcript_ids) # 'GO.terms' has v1 = transcript ids and v2 = GO terms
Cvirg_loop           <- Cvirg_module %>% dplyr::filter(v2 %in% table$GOlist) # filter Gene IDs with the GO term
Cvirg_transcriptIDs  <- Cvirg_loop[-2] # ommit the GO.terms to call unique gene calls
Cvirg_transcriptIDs  <- unique(Cvirg_transcriptIDs) # call unique Gene calls (unique genes that had the GO term within each of the GOslim bins)
BPslim$Gene.Count[[n]] <- nrow(Cvirg_transcriptIDs)  # count of unique GeneIDs in each GOslim bin
BPslim$Gene.IDs[[n]]   <- vapply((Cvirg_transcriptIDs$v1), paste, collapse = ";", character(1L))
} # end m in 1:nrow
BPslim_A <- data.frame(Term = rep.int(BPslim$Term, sapply(BPsplitted, length)), go_term = unlist(BPsplitted)) #list all
BPslim_B <- merge(BPslim_A, BPslim, by="Term") #Add back counts, term, and category info
BPslim_C <- unique(setDT(BPslim_B)[order(go_term)], by = "category") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
BPslim_final <- BPslim_C[,c(1,2,6,9)]
colnames(BPslim_final) <- c("slim_term", "slim_cat",  "GO_list",  "Gene_IDs")
BPslim_final[["Gene_IDs"]] <- vapply(unname(BPslim_final$Gene_IDs), paste, collapse = ";", character(1L)) # convert from a list to simply a charaacter string with ; delimiter
BPslim_final$module_day <- paste(GOslimLoop_vars[i,2], GOslimLoop_vars[i,1], sep = '_')
if (nrow(BPslim_final) >0) {
BPslim_GOterm_summary       <- BPslim_final
s <- strsplit(BPslim_GOterm_summary$GO_list, split = ";")
BPslim_GOterm_summary_2     <- data.frame(slim_term = rep(BPslim_GOterm_summary$slim_term, sapply(s, length)),
Gene_IDs  = rep(BPslim_GOterm_summary$Gene_IDs, sapply(s, length)),
GO_terms = unlist(s))
colnames(goseq_res_BP)[2]   <- 'GO_terms'
BPslim_GOterm_summary_final <- merge(goseq_res_BP, BPslim_GOterm_summary_2, by = 'GO_terms')
s_2 <- strsplit(BPslim_GOterm_summary_final$Gene_IDs, split = ";")
BPslim_GOterm_gene_annotation <- data.frame(slim_term      = rep(BPslim_GOterm_summary_final$slim_term, sapply(s_2, length)),
over_represented_pvalue = rep(BPslim_GOterm_summary_final$over_represented_pvalue, sapply(s_2, length)),
GO_terms       = rep(BPslim_GOterm_summary_final$GO_terms, sapply(s_2, length)),
term           = rep(BPslim_GOterm_summary_final$term, sapply(s_2, length)),
ontology       = rep(BPslim_GOterm_summary_final$ontology, sapply(s_2, length)),
moduleColor    = rep(BPslim_GOterm_summary_final$moduleColor, sapply(s_2, length)),
TranscriptID   = unlist(s_2))
BP_master_gene_reference <- merge(BPslim_GOterm_gene_annotation, Cvirginica_annot_reference, by = "TranscriptID")
} else (c(BPslim_GOterm_summary_final = NULL, BP_master_gene_reference = NULL))
# MOLECULAR FUNCTION ==================================================================================== #
MFslim             <- dplyr::filter(MFslim_Mapped, Term!="molecular_function") #filter out empty slims and term "biological process" (omitted the Count>=2)
MFsplitted         <- strsplit(as.character(MFslim$go_terms), ";") #split into multiple GO ids
MFslim$MFsplitted  <- MFsplitted
for (m in 1:nrow(MFslim)) {
table       <- data.frame(GOlist = unlist(MFslim[m,6])) # call the MFsplitted column of characters and create a small table to filter
table       <- unique(table)
Cvirg_module         <- GO.terms %>% dplyr::filter(v1 %in% transcript_ids) # 'GO.terms' has v1 = transcript ids and v2 = GO terms
Cvirg_loop           <- Cvirg_module %>% dplyr::filter(v2 %in% table$GOlist) # filter Gene IDs with the GO term
Cvirg_transcriptIDs  <- Cvirg_loop[-2] # ommit the GO.terms to call unique gene calls
Cvirg_transcriptIDs  <- unique(Cvirg_transcriptIDs) # call unique Gene calls (unique genes that had the GO term within each of the GOslim bins)
MFslim$Gene.Count[[m]] <- nrow(Cvirg_transcriptIDs)  # count of unique GeneIDs in each GOslim bin
MFslim$Gene.IDs[[m]]   <- vapply((Cvirg_transcriptIDs$v1), paste, collapse = ";", character(1L))
} # end m in 1:nrow
MFslim_A <- data.frame(Term = rep.int(MFslim$Term, sapply(MFsplitted, length)), go_term = unlist(MFsplitted)) #list all
MFslim_B <- merge(MFslim_A, MFslim, by="Term") #Add back counts, term, and category info
MFslim_C <- unique(setDT(MFslim_B)[order(go_term)], by = "category") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
MFslim_final <- MFslim_C[,c(1,2,6,9)]
colnames(MFslim_final) <- c("slim_term", "slim_cat",  "GO_list",  "Gene_IDs")
MFslim_final[["Gene_IDs"]] <- vapply(unname(MFslim_final$Gene_IDs), paste, collapse = ";", character(1L)) # convert from a list to simply a charaacter string with ; delimiter
MFslim_final$module_day <- paste(GOslimLoop_vars[i,2], GOslimLoop_vars[i,1], sep = '_')
if (nrow(MFslim_final) >0) {
MFslim_GOterm_summary       <- MFslim_final
s <- strsplit(MFslim_GOterm_summary$GO_list, split = ";")
MFslim_GOterm_summary_2     <- data.frame(slim_term = rep(MFslim_GOterm_summary$slim_term, sapply(s, length)),
Gene_IDs  = rep(MFslim_GOterm_summary$Gene_IDs, sapply(s, length)),
GO_terms = unlist(s))
colnames(goseq_res_MF)[2]   <- 'GO_terms'
MFslim_GOterm_summary_final <- merge(goseq_res_MF, MFslim_GOterm_summary_2, by = 'GO_terms')
s_2 <- strsplit(MFslim_GOterm_summary_final$Gene_IDs, split = ";")
MFslim_GOterm_gene_annotation <- data.frame(slim_term      = rep(MFslim_GOterm_summary_final$slim_term, sapply(s_2, length)),
over_represented_pvalue = rep(MFslim_GOterm_summary_final$over_represented_pvalue, sapply(s_2, length)),
GO_terms       = rep(MFslim_GOterm_summary_final$GO_terms, sapply(s_2, length)),
term           = rep(MFslim_GOterm_summary_final$term, sapply(s_2, length)),
ontology       = rep(MFslim_GOterm_summary_final$ontology, sapply(s_2, length)),
moduleColor    = rep(MFslim_GOterm_summary_final$moduleColor, sapply(s_2, length)),
TranscriptID   = unlist(s_2))
MF_master_gene_reference <- merge(MFslim_GOterm_gene_annotation, Cvirginica_annot_reference, by = "TranscriptID")
} else (c(MFslim_GOterm_summary_final = NULL, MF_master_gene_reference = NULL))
# save GOslim final datasets for BP and MF of each  module in their respective folder(s) by Day
if (GOslimLoop_vars[i,2] == 'Day2') {
if (nrow(MFslim_final) > 0) {
write.csv(MFslim_final, file = paste("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GOslim/GOslim_MolFunction_",GOslimLoop_vars[i,1], "Module.csv", sep ='')) # save csv file
write.csv(MFslim_GOterm_summary_final, file = paste("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GOslim/GOterms_and_GOslim_MolFunction_",GOslimLoop_vars[i,1], "Module.csv", sep =''))
write.csv(MF_master_gene_reference, file = paste("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GOslim/GOterms_and_GOslim_MolFunction_",GOslimLoop_vars[i,1], "Module_GENE_REFERENCE.csv", sep =''))
} else { }
if (nrow(BPslim_final) > 0) {
write.csv(BPslim_final, file = paste("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GOslim/GOslim_BiolProc_",GOslimLoop_vars[i,1], "Module.csv", sep ='')) # save csv file
write.csv(BPslim_GOterm_summary_final, file = paste("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GOslim/GOterms_and_GOslim_BiolProc_",GOslimLoop_vars[i,1], "Module.csv", sep =''))
write.csv(BP_master_gene_reference, file = paste("Output/WGCNA/day2_larvae/GO_analysis/RR_cutoff/GOslim/GOterms_and_GOslim_BiolProc_",GOslimLoop_vars[i,1], "Module_GENE_REFERENCE.csv", sep =''))
} else { }
}  else if (GOslimLoop_vars[i,2] == 'Day18') {
if (nrow(MFslim_final) > 0) {
write.csv(MFslim_final, file = paste("Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GOslim/GOslim_MolFunction_",GOslimLoop_vars[i,1], "Module.csv", sep ='')) # save csv file
write.csv(MFslim_GOterm_summary_final, file = paste("Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GOslim/GOterms_and_GOslim_MolFunction_",GOslimLoop_vars[i,1], "Module.csv", sep =''))
write.csv(MF_master_gene_reference, file = paste("Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GOslim/GOterms_and_GOslim_MolFunction_",GOslimLoop_vars[i,1], "Module_GENE_REFERENCE.csv", sep =''))
} else { }
if (nrow(BPslim_final) > 0) {
write.csv(BPslim_final, file = paste("Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GOslim/GOslim_BiolProc_",GOslimLoop_vars[i,1], "Module.csv", sep ='')) # save csv file
write.csv(BPslim_GOterm_summary_final, file = paste("Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GOslim/GOterms_and_GOslim_BiolProc_",GOslimLoop_vars[i,1], "Module.csv", sep =''))
write.csv(BP_master_gene_reference, file = paste("Output/WGCNA/day18_spat/GO_analysis/RR_cutoff/GOslim/GOterms_and_GOslim_BiolProc_",GOslimLoop_vars[i,1], "Module_GENE_REFERENCE.csv", sep =''))
} else { }
}  else (NULL)
print(paste(GOslimLoop_vars[i,2], GOslimLoop_vars[i,1], "done", sep = ' '))
} # end of GOslim for loop! (i in 1:nrow)
---
# title: "KEGG analysis"
# author: "Samuel Gurr"
# date: "May 11, 2022"
---
# INFORMATION FOR KEGG IN R FOUND HERE: (http://yulab-smu.top/clusterProfiler-book/chapter6.html#kegg-over-representation-test)
install.packages("fBasics")
library(clusterProfiler)
---
# title: "KEGG analysis"
# author: "Samuel Gurr"
# date: "May 11, 2022"
---
# INFORMATION FOR KEGG IN R FOUND HERE: (http://yulab-smu.top/clusterProfiler-book/chapter6.html#kegg-over-representation-test)
# LOAD PACKAGES
library(reactome.db)
library(KEGGREST)
library(tidyr)
library(stringr)
library(forcats)
library(ggplot2)
library(scales)
library(ape)
library(data.table)
library(tidyverse)
library(fBasics)
library(dplyr)
library(KEGGREST)
library(ggplot2)
# SET WORKING DIRECTORY   ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;: #
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis")
# WGCNA results (all treatments)
d2_WGCNA.data                <- read.csv("Output/WGCNA/day2_larvae/d2.WGCNA_ModulMembership.csv")
d2_WGCNA.data_hightemp       <- read.csv("Output/WGCNA/day2_larvae_hightemp/d2.WGCNA_ModulMembership.csv")
d18_WGCNA.data               <- read.csv("Output/WGCNA/day18_spat/d18.WGCNA_ModulMembership.csv")
Ref_Master                   <- read.csv(file = "Data/TagSeq/Seq_details/Seq_Reference_Master.csv",header = T) %>%
dplyr::rename('TranscriptID' = 'Cvirginica_TranscriptID')
Crass_gigas_genome           <- keggList("crg") # call the C. gigas genome! - notice the csa terms are rownames! (REUIQRES INTERNET)
colnames(Crass_gigas_genome_dataframe) <- c('sseqid', 'Gene_name')
Crass_gigas_genome           <- keggList("crg") # call the C. gigas genome! - notice the csa terms are rownames! (REUIQRES INTERNET)
Crass_gigas_genome_dataframe <- as.data.frame(Crass_gigas_genome) %>%  rownames_to_column() # with will allow us to merge
colnames(Crass_gigas_genome_dataframe) <- c('sseqid', 'Gene_name')
Day2_WGCNA_sigmodules <- as.data.frame(c('pink',
'blue',
'turquoise',
'brown',
'black',
'red',
'yellow'))
# start with loop by calling the row value common with the 'Master_KEGG_BPTerms' data frind from rbind above
modColor <- Day2_WGCNA_sigmodules[1,1]
loopmodColor_cor <- paste("MM.", modColor, sep = '')
loopmodColor_p   <- paste("p.MM.", modColor, sep = '')
# call the module color in the Day 7 data
ModuleLoop                     <- d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor))
ModuleLoop
# start with loop by calling the row value common with the 'Master_KEGG_BPTerms' data frind from rbind above
modColor <- Day2_WGCNA_sigmodules[1,1]
loopmodColor_cor <- paste("MM.", modColor, sep = '')
loopmodColor_p   <- paste("p.MM.", modColor, sep = '')
# call the module color in the Day 7 data
ModuleLoop                     <- d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor))
ModuleLoop
d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)
ModuleLoop
d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor))
loopmodColor_cor
d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor)) %>%
dplyr::filter(loopmodColor_cor > 0.06 & loopmodColor_p < 0.05)
d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor)) %>%
dplyr::filter(loopmodColor_cor > 0.06 | loopmodColor_p < 0.05)
d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor)) %>%
dplyr::filter(loopmodColor_cor > 0.06 && loopmodColor_p < 0.05)
d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor)) %>%
dplyr::filter(loopmodColor_cor > 0.06, loopmodColor_p < 0.05)
d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor)) %>%
dplyr::filter(loopmodColor_cor > 0.6, loopmodColor_p < 0.05)
d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor)) %>%
dplyr::filter(loopmodColor_cor > 0.6 &  loopmodColor_p < 0.05)
d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor)) %>%
dplyr::filter(loopmodColor_cor > 0.6 &&  loopmodColor_p < 0.05)
d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor)) %>%
dplyr::filter(loopmodColor_cor > 0.6 |  loopmodColor_p < 0.05)
d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor)) %>%
dplyr::filter(loopmodColor_cor > 0.6)
d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor)) %>%
dplyr::filter(MM.pink > 0.6)
loopmodColor_cor
d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor)) %>%
dplyr::filter([6] > 0.6)
d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor)) %>%
dplyr::filter(6 > 0.6)
d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor)) %>%
filter_at(1, all_vars(. > 0.6))
d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor)) %>%
filter_at(6 all_vars(. > 0.6))
d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor)) %>%
filter_at(6, all_vars(. > 0.6))
d2_WGCNA.data %>% dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('TranscriptID', 'KEGG_ID', 'geneSymbol', moduleColor, loopmodColor_p, loopmodColor_cor)) %>%
dplyr::filter_at(6, all_vars(. > 0.6)) %>% dplyr::filter_at(5, all_vars(. < 0.05))
