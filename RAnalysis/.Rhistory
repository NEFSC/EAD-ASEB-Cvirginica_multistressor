dplyr::mutate(HHM = as.factor(as.numeric(pCO2_Sal_Arag == "HHM")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::mutate(HLL = as.factor(as.numeric(pCO2_Sal_Arag == "HLL")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::mutate(LHH = as.factor(as.numeric(pCO2_Sal_Arag == "LHH")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::mutate(LLM = as.factor(as.numeric(pCO2_Sal_Arag == "LLM")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::select(-c('pCO2_Sal_Arag', 'pCO2_Salinity','Aragonite_saturation'))
d18.Traits.Group
d18.Traits.pCO2Salinity
# Group
d18.Traits.Group.asnum  <- data.frame(lapply(d18.Traits.Group, function(x) as.numeric(as.character(x))),
check.names=F, row.names = row.names(d18.Traits.Group))
moduleTraitCor_Group    = cor(MEs, d18.Traits.Group.asnum, use = "p");
moduleTraitPvalue_Group = corPvalueStudent(moduleTraitCor_Group, nSamples);
moduleTraitPvalue_Group
sizeGrWindow(10,10)
# Will display correlations and their p-values
d18.Group.matrix <-  paste(signif(moduleTraitCor_Group, 2), "\n(",
signif(moduleTraitPvalue_Group, 1), ")", sep = "")
#dim(textMatrix) == dim(moduleTraitCor_treatonly)
par(mar = c(8, 9.5, 5, 3));
labeledHeatmap(Matrix = moduleTraitCor_Group,
xLabels = names(d18.Traits.Group),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = TRUE,
colors = blueWhiteRed(50),
textMatrix = d18.Group.matrix,
setStdMargins = FALSE,
cex.text = 1,
zlim = c(-0.6,0.6),
main = paste("Module-trait relationships - Group"))
png("Output/WGCNA/day18_spat/heatmaps/Day18_Group_heatmap.png", 1000, 1000, pointsize=20)
labeledHeatmap(Matrix = moduleTraitCor_Group,
xLabels = names(d18.Traits.Group),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = TRUE,
colors = blueWhiteRed(50),
textMatrix = d18.Group.matrix,
setStdMargins = FALSE,
cex.text = 1,
zlim = c(-0.6,0.6),
main = paste("Module-trait relationships - Group"))
dev.off()
# this heatmap looks better
d18.Group.text        <-  as.matrix(signif(moduleTraitPvalue_Group, 3))
d18.Group.COR         <-  as.matrix(signif(moduleTraitCor_Group, 3))
pa                  = cluster::pam(d2.Group.text, k = 5)
pa                  = cluster::pam(d18.Group.COR, k = 5)
col_fun             = colorRamp2(c(-0.5, 0, 0.5), c("blue", "white", "red"))
# this heatmap looks better
d18.Group.text        <-  as.matrix(signif(moduleTraitPvalue_Group, 3))
d18.Group.COR         <-  as.matrix(signif(moduleTraitCor_Group, 3))
pa                  = cluster::pam(d18.Group.COR, k = 5)
col_fun             = colorRamp2(c(-0.5, 0, 0.5), c("blue", "white", "red"))
Heatmap(moduleTraitCor_Group,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Day 2 WGCNA - Group",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 3,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", d2.Group.text[i, j]), x, y, gp = gpar(fontsize = 10))
})
pa                  = cluster::pam(d18.Group.COR, k = 3)
col_fun             = colorRamp2(c(-0.5, 0, 0.5), c("blue", "white", "red"))
Heatmap(moduleTraitCor_Group,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Day 2 WGCNA - Group",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 3,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", d2.Group.text[i, j]), x, y, gp = gpar(fontsize = 10))
})
pa                  = cluster::pam(d18.Group.COR, k = 4)
col_fun             = colorRamp2(c(-0.5, 0, 0.5), c("blue", "white", "red"))
Heatmap(moduleTraitCor_Group,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Day 2 WGCNA - Group",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 3,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", d2.Group.text[i, j]), x, y, gp = gpar(fontsize = 10))
})
pdf("Output/WGCNA/day18_spat/heatmaps/Day18_Group_heatmap.pdf", width=5, height=6)
Heatmap(moduleTraitCor_Group,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Day 2 WGCNA - Group",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 3,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", d2.Group.text[i, j]), x, y, gp = gpar(fontsize = 10))
})
dev.off()
# We quantify associations of individual genes with our trait of interest (TAOC)
load("Output/WGCNA/day18_spat/day18-networkConstruction-stepByStep.RData")
# names (colors) of the modules
modNames = substring(names(mergedMEs), 3) # name all the modules, from 3rd character on (first two are ME)
geneModuleMembership = as.data.frame(cor(dds.d18_vst, mergedMEs, use = "p"));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
# HHM treatment group
HHM = as.data.frame(as.numeric(d18.Traits.Group$HHM)); # Define variable containing the desired column
names(HHM) = "HHM"
HHM_geneTraitSignificance = as.data.frame(cor(dds.d18_vst, HHM, use = "p"));
HHM_GSPvalue = as.data.frame(corPvalueStudent(as.matrix(HHM_geneTraitSignificance), nSamples));
names(HHM_geneTraitSignificance) = paste("GS.", names(HHM), sep=""); # MA_geneTraitSignificance - pearsons correlation between reads and the MA grop
names(HHM_GSPvalue) = paste("p.GS.", names(HHM), sep=""); # corPvalueStudent
#=====================================================================================
#
#  Call annotation data to get module gene data (prep for downstream GO)
#
#=====================================================================================
annot = read.csv(file = "Data/TagSeq/Seq_details/Seq_Reference_Master.csv",header = T)
dim(annot) # 66437     8
names(annot) # view the column names to call
probes = names(as.data.frame(t(d18.data_matrix[, -(1)])))
probes2annot = match(probes, annot$Cvirginica_TranscriptID)
# The following is the number or probes without annotation:
sum(is.na(probes2annot)) # 380
# Should return 0.
#=====================================================================================
#
#  BUILD GENE INFO DATAFRAMES
#
#=====================================================================================
# Create the starting data frame
names(annot)
geneInfo_GROUPS = data.frame(geneSymbol       = annot$Cvirginica_GeneID[probes2annot],
TranscriptID     = annot$Cvirginica_TranscriptID[probes2annot],
moduleColor      = moduleColors,
KEGG_ID          = annot$Cgigas_KEGGID[probes2annot],
Protein_name     = annot$Cvirginica_Protein_name[probes2annot],
gene_length      = annot$Cvirginica_length[probes2annot],
GO.terms         = annot$Annotation_GO_ID[probes2annot],
HHM_geneTraitSignificance, HHM_GSPvalue)
modOrder = order(-abs(cor(mergedMEs, HHM, use = "p"))); # order by the strength of the correlation between module and trait values for each sample
for (mod in 1:ncol(geneModuleMembership)) { # Add module membership information in the chosen order
oldNames = names(geneInfo_GROUPS)
geneInfo_GROUPS = data.frame(geneInfo_GROUPS, geneModuleMembership[, modOrder[mod]],
MMPvalue[, modOrder[mod]]);
names(geneInfo_GROUPS) = c(oldNames, paste("MM.", modNames[modOrder[mod]], sep=""),
paste("p.MM.", modNames[modOrder[mod]], sep=""))
}
# Order the genes in the geneInfo variable first by module color, then by geneTraitSignificance
geneOrder = order(geneInfo_GROUPS$moduleColor, -abs(geneInfo_GROUPS$GS.HHM));
geneInfo_GROUPS = geneInfo_GROUPS[geneOrder, ]
write.csv(geneInfo_GROUPS, file = "Output/WGCNA/day18_spat/d18.WGCNA_ModulMembership.csv")
#=====================================================================================
#
# EXPLORE THE Expression of each module (for loop plots!) BY TREATMENT
#
# evidence from the heatmaps and the regression shwo strong module membership and eigenenge cor strength with lighcyan
# in response to treatment (primary specifically) and Total Antioxidant capacity
#
#=====================================================================================
# load necessary data
load("Output/WGCNA/day18_spat/day18-networkConstruction-stepByStep.RData") # load dds.d2_vst (in addition to other datasets we do not need...)
day18_ModuleMembership  <- read.csv(file="Output/WGCNA/day18_spat/d18.WGCNA_ModulMembership.csv", sep=',', header=TRUE)
d18.Treatment.data <- read.csv(file="Data/TagSeq/day18.exp.data.csv", sep=',', header=TRUE) %>%
dplyr::mutate_if(is.character, as.factor) %>%
dplyr::mutate(Aragonite_saturation = case_when(Aragonite_saturation < 0.5 ~ 'Low',
(Aragonite_saturation > 0.5 & Aragonite_saturation < 1.0) ~ 'Mid',
Aragonite_saturation > 1.0 ~ 'High')) %>%
dplyr::rename('Sample.Name' = 'SapleName_readmatrix') %>%
dplyr::rename('pCO2' = 'OA') %>%
dplyr::select(c('Sample.Name','pCO2','Salinity', 'Aragonite_saturation')) %>%
dplyr::mutate(All_treatment = paste((substr(pCO2,1,1)),
(substr(Salinity,1,1)),
(substr(Aragonite_saturation,1,1)), sep = '')) %>%
dplyr::mutate(pCO2_Salinity = substr(All_treatment, 2,3)) # experiment treatment data
dds.d18_rlogtrans <- as.data.frame(rlogTransformation(assay(dds.d18))) # rlog transoform the expression data matrix (dds object)
dds.d18_rlogtrans <- tibble::rownames_to_column(dds.d18_rlogtrans,"TranscriptID") # rownames as first column
# call the module colors
modcolor <- as.data.frame(unique(day18_ModuleMembership$moduleColor))
names(modcolor)[1] <- "color"
modcolor
for(i in 1:nrow(modcolor)) {
# vst read count date - narrow the columns - reshape and rename
Mod_geneIDs     <- day18_ModuleMembership %>% dplyr::filter(moduleColor %in% modcolor[i,]) %>%  dplyr::select("TranscriptID") %>%  na.omit()
d18_rlog_Mod      <- dds.d18_rlogtrans %>% dplyr::filter(TranscriptID %in% Mod_geneIDs[,1])
d18_rlog_Mod_MELT <- melt(d18_rlog_Mod, id=("TranscriptID")) # melt using reshape2
names(d18_rlog_Mod_MELT)[(2:3)] <-  c('Sample.Name', 'rlog_Expression') # change column names
# merge by common row values 'Sample.Name'
merged_Expdata_Mod <- merge(d18_rlog_Mod_MELT, d18.Treatment.data, by ='Sample.Name')
# mean Exp response table
meanEXp_Mod <- merged_Expdata_Mod %>%
select(c('Sample.Name','rlog_Expression','Salinity', 'pCO2', 'Aragonite_saturation')) %>%
group_by(Sample.Name, Aragonite_saturation, Salinity, pCO2) %>%
dplyr::summarize(mean.rlogExp = mean(rlog_Expression),
sd.rlogtExp = sd(rlog_Expression),
na.rm=TRUE)
# summarize datasets further by treatment period  =========================================================================================== #
# remember:this is a mean of a mean!! First we complete mean vst exp by sample id (compiling all red module genes) - next all sample IDs by the treatment period (below
# I will use these for mean SE plots
# Aragonite_saturation ========================== #
meanEXp_Summary.Aragonite_saturation <- meanEXp_Mod %>%
group_by(Aragonite_saturation) %>%
dplyr::summarize(mean = mean(mean.rlogExp),
sd = sd(sd.rlogtExp),
n = n(),
se = sd/sqrt(n))
# Salinity treatment ========================== #
meanEXp_Summary.Salinity <- meanEXp_Mod %>%
group_by(Salinity) %>%
dplyr::summarize(mean = mean(mean.rlogExp),
sd = sd(sd.rlogtExp),
n = n(),
se = sd/sqrt(n))
# pCO2 treatment ========================== #
meanEXp_Summary.pCO2 <- meanEXp_Mod %>%
group_by(pCO2) %>%
dplyr::summarize(mean = mean(mean.rlogExp),
sd = sd(sd.rlogtExp),
n = n(),
se = sd/sqrt(n))
# Salinity treatment ========================== #
meanEXp_Summary.All.Treatment <- meanEXp_Mod %>%
group_by(Salinity, Aragonite_saturation, pCO2) %>%
dplyr::summarize(mean = mean(mean.rlogExp),
sd = sd(sd.rlogtExp),
n = n(),
se = sd/sqrt(n))
# PLOT =========================================================================================== #
# The errorbars overlapped, so use position_dodge to move them horizontally
pd <- position_dodge(0.3) # move them .05 to the left and right
# Temperature mean sd plot ========================== #
min_p1 <- min(meanEXp_Summary.Aragonite_saturation$mean) - max(meanEXp_Summary.Aragonite_saturation$se)
max_p1 <- max(meanEXp_Summary.Aragonite_saturation$mean) + max(meanEXp_Summary.Aragonite_saturation$se)
Aragonite_saturation.rlog.Mod <- meanEXp_Summary.Aragonite_saturation %>%
dplyr::mutate(Aragonite_saturation    = forcats::fct_relevel(Aragonite_saturation, 'Low', 'Mid', 'High')) %>%
ggplot(aes(x=Aragonite_saturation, y=mean, fill=Aragonite_saturation)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Aragonite_saturation") +
ylab("rlog gene expression") +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("grey", "grey", "grey")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
# ggtitle(paste("Day 7 WGCNA", modcolor[i,], "Module VST GeneExp", sep =' ')) +
# expand_limits(y=0) +                                                    # Expand y range
scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=10), legend.position="none")
# Salinity mean sd plot ========================== #
min_p2 <- min(meanEXp_Summary.Salinity$mean) - max(meanEXp_Summary.Salinity$se)
max_p2 <- max(meanEXp_Summary.Salinity$mean) + max(meanEXp_Summary.Salinity$se)
Salinity.rlog.Mod <- meanEXp_Summary.Salinity %>%
dplyr::mutate(Salinity    = forcats::fct_relevel(Salinity, 'Low', 'High')) %>%
ggplot(aes(x=Salinity, y=mean, fill=Salinity)) +
theme_classic() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Salinity") +
ylab(NULL) +                 # note the mean was first by sample ID THEN by treatment
# ylab(paste(modcolor[i,]," Module rlog Gene Expression (Mean +/- SE)", sep = ' ')) +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("grey", "grey")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
# ggtitle("Day 21 WGCNA red' Module VST GeneExp") +
# expand_limits(y=0) +                                                    # Expand y range
scale_y_continuous(limits=c((min_p2), (max_p2))) +
theme(text = element_text(size=10), legend.position="none")
# pCO2 mean sd plot ========================== #
min_p3 <- min(meanEXp_Summary.pCO2$mean) - max(meanEXp_Summary.pCO2$se)
max_p3 <- max(meanEXp_Summary.pCO2$mean) + max(meanEXp_Summary.pCO2$se)
pCO2.rlog.Mod <- meanEXp_Summary.pCO2 %>%
dplyr::mutate(pCO2    = forcats::fct_relevel(pCO2, 'Low', 'High')) %>%
ggplot(aes(x=pCO2, y=mean, fill=pCO2)) +
theme_classic() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("pCO2") +
ylab(NULL) +                 # note the mean was first by sample ID THEN by treatment
# ylab(paste(modcolor[i,]," Module rlog Gene Expression (Mean +/- SE)", sep = ' ')) +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("grey", "grey")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
# ggtitle("Day 21 WGCNA red' Module VST GeneExp") +
# expand_limits(y=0) +                                                    # Expand y range
scale_y_continuous(limits=c((min_p3), (max_p3))) +
theme(text = element_text(size=10), legend.position="none")
# Assemble these together =========================================================================================== #
single.factor.plot <-  ggarrange(Aragonite_saturation.rlog.Mod, Salinity.rlog.Mod,  pCO2.rlog.Mod,
plotlist = NULL,
ncol = 3,
nrow = 1,
labels = NULL)
# Summary plot of all treatments ==================================================================================== #
# All.Treatment mean sd plot
min_p4 <- min(meanEXp_Summary.All.Treatment$mean) - max(meanEXp_Summary.All.Treatment$se)
max_p4 <- max(meanEXp_Summary.All.Treatment$mean) + max(meanEXp_Summary.All.Treatment$se)
AllTreatment.rlog.Mod <- meanEXp_Summary.All.Treatment %>%
dplyr::mutate(Salinity    = forcats::fct_relevel(Salinity, 'Low', 'High')) %>%
dplyr::mutate(pCO2        = forcats::fct_relevel(pCO2, 'Low', 'High')) %>%
dplyr::mutate(Aragonite_saturation = forcats::fct_relevel(Aragonite_saturation, 'High', 'Mid', 'Low')) %>%
ggplot(aes(x=pCO2, y=mean, fill=Aragonite_saturation, group=Aragonite_saturation)) + # group aesthetic connect line (Slaintiy) and color - the x axis in this case is pCO2
theme_classic() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("pCO2") +
ylab("rlog gene expression") +                 # note the mean was first by sample ID THEN by treatment
# ylab(paste(modcolor[i,]," Module rlog Gene Expression (Mean +/- SE)", sep = ' ')) +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#D55E00", "#E69F00", "#56B4E9")) +
scale_y_continuous(limits=c((min_p4), (max_p4))) +
theme(text = element_text(size=15)) +
facet_wrap(~Salinity) # facetted by temperature
# output   ======================================================================================================== #
pdf(paste("Output/WGCNA/day18_spat/ModuleExpression_Treatment/day18_Exp_Module_",modcolor[i,],".pdf", sep = ''), width=9, height=8)
print(ggarrange(single.factor.plot, AllTreatment.rlog.Mod,
plotlist = NULL,
ncol = 1,
nrow = 2,
labels = NULL))
dev.off()
}
pdf("Output/WGCNA/day18_spat/heatmaps/Day18_Group_heatmap.pdf", width=5, height=6)
Heatmap(moduleTraitCor_Group,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Day 18 WGCNA - Group",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 3,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", d2.Group.text[i, j]), x, y, gp = gpar(fontsize = 10))
})
dev.off()
pdf("Output/WGCNA/day18_spat/heatmaps/day18_pCO2Salinity_heatmap.pdf", width=5, height=6)
Heatmap(moduleTraitCor_pCO2Salinity,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Day 18 WGCNA - pCO2Salinity",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 2,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", d18.pCO2Salinity.text[i, j]), x, y, gp = gpar(fontsize = 10))
})
dev.off()
# this heatmap looks better
d18.pCO2Salinity.text <-  as.matrix(signif(moduleTraitPvalue_pCO2Salinity, 3))
d18.pCO2Salinity.COR      <-  as.matrix(signif(moduleTraitCor_pCO2Salinity, 3))
pa                  = cluster::pam(d18.pCO2Salinity.COR, k = 4)
col_fun             = colorRamp2(c(-0.5, 0, 0.5), c("blue", "white", "red"))
pdf("Output/WGCNA/day18_spat/heatmaps/day18_pCO2Salinity_heatmap.pdf", width=5, height=6)
Heatmap(moduleTraitCor_pCO2Salinity,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Day 18 WGCNA - pCO2Salinity",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 2,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", d18.pCO2Salinity.text[i, j]), x, y, gp = gpar(fontsize = 10))
})
dev.off()
# this heatmap looks better
d18.Group.text        <-  as.matrix(signif(moduleTraitPvalue_Group, 3))
d18.Group.COR         <-  as.matrix(signif(moduleTraitCor_Group, 3))
pa                  = cluster::pam(d18.Group.COR, k = 4)
col_fun             = colorRamp2(c(-0.5, 0, 0.5), c("blue", "white", "red"))
pdf("Output/WGCNA/day18_spat/heatmaps/Day18_Group_heatmap.pdf", width=5, height=6)
Heatmap(moduleTraitCor_Group,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Day 18 WGCNA - Group",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 3,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", d2.Group.text[i, j]), x, y, gp = gpar(fontsize = 10))
})
dev.off()
d18.Salinity.text <-  as.matrix(signif(moduleTraitPvalue_Salinity, 3))
d18.Salinity.COR      <-  as.matrix(signif(moduleTraitCor_Salinity, 3))
pa                  = cluster::pam(d18.Salinity.COR, k = 3)
col_fun             = colorRamp2(c(-0.5, 0, 0.5), c("blue", "white", "red"))
pdf("Output/WGCNA/day18_spat/heatmaps/day18_Salinity_heatmap.pdf", width=5, height=6)
Heatmap(moduleTraitCor_Salinity,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Day 18 WGCNA - Salinity",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 1,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", d18.Salinity.text[i, j]), x, y, gp = gpar(fontsize = 10))
})
dev.off()
d18.pCO2.text <-  as.matrix(signif(moduleTraitPvalue_pCO2, 3))
d18.pCO2.COR      <-  as.matrix(signif(moduleTraitCor_pCO2, 3))
pa                  = cluster::pam(d18.pCO2.COR, k = 3)
col_fun             = colorRamp2(c(-0.5, 0, 0.5), c("blue", "white", "red"))
pdf("Output/WGCNA/day18_spat/heatmaps/day18_pCO2_heatmap.pdf", width=5, height=6)
Heatmap(moduleTraitCor_pCO2,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Day 18 WGCNA - pCO2",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 1,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", d18.pCO2.text[i, j]), x, y, gp = gpar(fontsize = 10))
})
dev.off()
Heatmap(moduleTraitCor_pCO2,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Day 18 WGCNA - pCO2",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 1,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", d18.pCO2.text[i, j]), x, y, gp = gpar(fontsize = 10))
})
