(substr(Salinity,1,1)), sep = '')) %>%
dplyr::mutate(pCO2_Salinity = substr(All_treatment, 2,3)) %>%
dplyr::mutate(Aragonite_saturation = case_when(Aragonite_saturation < 0.5 ~ 1, Aragonite_saturation > 1.0 ~ 3))
d2.Treatment.data
d2.Treatment.data <- read.csv(file="Data/TagSeq/day2.exp.data.csv", sep=',', header=TRUE) %>%
dplyr::mutate_if(is.character, as.factor) %>%
dplyr::rename('Sample.Name' = 'SapleName_readmatrix') %>%
dplyr::rename('pCO2' = 'OA') %>%
dplyr::select(c('Sample.Name','Temperature','pCO2','Salinity', 'Aragonite_saturation')) %>%
dplyr::mutate(All_treatment = paste( (substr(Temperature,1,1)),
(substr(pCO2,1,1)),
(substr(Salinity,1,1)), sep = '')) %>%
dplyr::mutate(pCO2_Salinity = substr(All_treatment, 2,3)) %>%
dplyr::mutate(Aragonite_saturation = case_when(Aragonite_saturation < 0.5 ~ 'Low',
(Aragonite_saturation > 0.5 & Aragonite_saturation < 1.0) ~ 'Mid',
Aragonite_saturation > 1.0 ~ 'High'))
d2.Treatment.data
dim(d2.Treatment.data)[1] ==  dim(d2.data_matrix)[2]# TRUE - each contains all 36 samples sequenced for Day 7 of the experiment
# NOTE: ~1 stands for no design; user will need to add a design for differential testing
# however for our purpose of just creating an object to transform, we do not need a design here...
dds.d2 <- DESeqDataSetFromMatrix(countData = d2.data_matrix,
colData = d2.Treatment.data, design = ~ 1) # DESeq Data Set (dds)
dds.d2 # view the DESeqDataSet - notice the colData containg our critical treatment and sample ID data, rownames, etc.
# transform the data  ========================================================== #
# run in order (kept name as dds.d2_vst)
dds.d2_vst <- vst(dds.d2) # transform it vst (variance stabilized transformation)
dds.d2_vst <- assay(dds.d2_vst) # call only the transformed coutns in the dds object
#fix(dds.d2_vst)
dds.d2_vst <- t(dds.d2_vst) # transpose columns to rows and vice versa
# checks before we start....
dim(dds.d2_vst) #  8548 genes; 36  samples
gsg = goodSamplesGenes(dds.d2_vst, verbose = 3);  # We first check for genes and samples with too many missing values:
gsg$allOK # If the statement returns TRUE, all genes have passed the cuts.
# call the cluster and set window dimenstions to view..
sampleTree = hclust(dist(dds.d2_vst), method = "average") # Next we cluster the samples (in contrast to clustering genes that will come later)  to see if there are any obvious outliers.
sizeGrWindow(12,9) # The user should change the dimensions if the window is too large or too small.
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2) # appears there are two outliers SG59; can remove by hand or an automatic appraoch
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2) # appears there are two outliers SG59; can remove by hand or an automatic appraoch
# cut the tree and omit  ========================================================== #
clust = cutreeStatic(sampleTree, cutHeight = 11, minSize = 10) # Determine cluster under the line
table(clust) # 0 = cut; 1 = kept; says it will cut 1 and save 35; exactly what we want!
keepSamples = (clust==1) # 'keepsamples' boolean to call the main dataset - notice there are TWO occurrences of FALSE - these are C6.larva and B12.larva
# integrate keepsamples  ========================================================== #
dds.d2_vst = dds.d2_vst[keepSamples, ] # integrate the boolean 'keepsamples' to omit outliers determined in the sample tree above
nGenes = ncol(dds.d2_vst) # number of genes == 4820
nSamples = nrow(dds.d2_vst) # number of samples == 22  - the cut tree removed 2 samples
# plot the tree with the 'keep samples'  =========================================== #
sampleTree2 = hclust(dist(dds.d2_vst), method = "average") # Next we cluster the samples (in contrast to clustering genes that will come later)  to see if there are any obvious outliers.
plot(sampleTree2, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
# based on outlier removal... call Trait data ===================================================== #
dim(dds.d2_vst) # 22 4820- transformed count data now  has 35 samples - 1 cut in the tree step above
dim(d2.Treatment.data) # 24 4 - trait data has  36 samples - not yet cut!
# Form a data frame analogous to expression data that will hold the clinical traits.
d2.Samples    = rownames(dds.d2_vst); # start new variable 'd7.Samples' calling the row names of the gene data (sample as 'Mouse' in trait data)
TreatRows     = match(d2.Samples, d2.Treatment.data$Sample.Name); # match the names - calls the list number of 'd7.Samples' matching 'd7.Treatment.data$Sample.Name'
d2.Traits     = d2.Treatment.data[TreatRows, -1]; # insert TreatRows as the row numbers in 'd7.Treatment.data'
rownames(d2.Traits)     = d2.Treatment.data[TreatRows, 1]; # inserts the new TreatRows - matches sample IDs
all(rownames(d2.Traits) == rownames(dds.d2_vst)) # should be TRUE
dim(d2.Traits) # 22 Samples 3 columns; now we have 22 samples! - colnames are all treatment, primary and second treatment
# temperature groups ======================================================== #
d2.Traits.Temperature  <-  d2.Traits %>% dplyr::select('Temperature') %>% # primary treatment as Ambient (A) vs. Moderate (M)
dplyr::mutate(High = as.factor(as.numeric(Temperature == "High")))  %>%  # call occurrence of 'A' as 0s and 1s (factor)
dplyr::mutate(Low = as.factor(as.numeric(Temperature == "Low")))    %>%  # call occurrence of 'M'  as 0s and 1s (factor)
dplyr::select(-Temperature)
d2.Traits.Temperature  # final dataset of 0,1 for treatment groups - temperature only!
# Salinity groups  ===================================================== #
d2.Traits.Salinity      <-  d2.Traits %>% dplyr::select('Salinity')  %>% # primary treatment as Ambient (A) vs. Moderate (M)
dplyr::mutate(High = as.factor(as.numeric(Salinity == "High")))  %>%  # call occurrence of 'A' as 0s and 1s (factor)
dplyr::mutate(Low = as.factor(as.numeric(Salinity == "Low")))    %>%  # call occurrence of 'M'  as 0s and 1s (factor)
dplyr::select(-Salinity)
d2.Traits.Salinity  # final dataset of 0,1 for treatment groups - Primary only!
# pCO2 groups  ===================================================== #
d2.Traits.pCO2          <-  d2.Traits %>% dplyr::select('pCO2')  %>% # primary treatment as Ambient (A) vs. Moderate (M)
dplyr::mutate(High = as.factor(as.numeric(pCO2 == "High")))  %>%  # call occurrence of 'A' as 0s and 1s (factor)
dplyr::mutate(Low = as.factor(as.numeric(pCO2 == "Low")))    %>%  # call occurrence of 'M'  as 0s and 1s (factor)
dplyr::select(-pCO2)
d2.Traits.pCO2  # final dataset of 0,1 for treatment groups - Primary only!
# oCO2_Salinity (as _ _ pCO2 and salinity)  ================================================================ #
d2.Traits.pCO2Salinity   <- d2.Traits %>%
dplyr::select('pCO2_Salinity') %>% # primary treatment as Ambient (A) vs. Moderate (M)
dplyr::mutate(HH = as.factor(as.numeric(pCO2_Salinity == "HH")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::mutate(HL = as.factor(as.numeric(pCO2_Salinity == "HL")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::mutate(LL = as.factor(as.numeric(pCO2_Salinity == "LL")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::mutate(LH = as.factor(as.numeric(pCO2_Salinity == "LH")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::select(-pCO2_Salinity)
d2.Traits.pCO2Salinity
# pCO2 groups  ===================================================== #
d2.Traits.AragoniteSat <-  d2.Traits %>% dplyr::select('Aragonite_saturation')  %>% # primary treatment as Ambient (A) vs. Moderate (M)
dplyr::mutate(High = as.factor(as.numeric(pCO2 == "High")))  %>%  # call occurrence of 'A' as 0s and 1s (factor)
dplyr::mutate(Mid = as.factor(as.numeric(pCO2 == "Mid")))    %>%  # call occurrence of 'M'  as 0s and 1s (factor)
dplyr::mutate(Low = as.factor(as.numeric(pCO2 == "Low")))    %>%  # call occurrence of 'M'  as 0s and 1s (factor)
dplyr::select(-pCO2)
d2.Traits %>% dplyr::select('Aragonite_saturation')
# pCO2 groups  ===================================================== #
d2.Traits.AragoniteSat <-  d2.Traits %>% dplyr::select('Aragonite_saturation')  %>% # primary treatment as Ambient (A) vs. Moderate (M)
dplyr::mutate(High = as.factor(as.numeric(Aragonite_saturation == "High")))  %>%  # call occurrence of 'A' as 0s and 1s (factor)
dplyr::mutate(Mid = as.factor(as.numeric(Aragonite_saturation == "Mid")))    %>%  # call occurrence of 'M'  as 0s and 1s (factor)
dplyr::mutate(Low = as.factor(as.numeric(Aragonite_saturation == "Low")))    %>%  # call occurrence of 'M'  as 0s and 1s (factor)
dplyr::select(-pCO2)
# pCO2 groups  ===================================================== #
d2.Traits.AragoniteSat <-  d2.Traits %>% dplyr::select('Aragonite_saturation')  %>% # primary treatment as Ambient (A) vs. Moderate (M)
dplyr::mutate(High = as.factor(as.numeric(Aragonite_saturation == "High")))  %>%  # call occurrence of 'A' as 0s and 1s (factor)
dplyr::mutate(Mid = as.factor(as.numeric(Aragonite_saturation == "Mid")))    %>%  # call occurrence of 'M'  as 0s and 1s (factor)
dplyr::mutate(Low = as.factor(as.numeric(Aragonite_saturation == "Low")))    %>%  # call occurrence of 'M'  as 0s and 1s (factor)
dplyr::select(-Aragonite_saturation)
d2.Traits.AragoniteSat  # final dataset of 0,1 for treatment groups - Primary only!
# oCO2_Salinity (as _ _ pCO2 and salinity)  ================================================================ #
d2.Traits.pCO2Salinity   <- d2.Traits %>%
dplyr::select('pCO2_Salinity') %>% # primary treatment as Ambient (A) vs. Moderate (M)
dplyr::mutate(HH = as.factor(as.numeric(pCO2_Salinity == "HH")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::mutate(HL = as.factor(as.numeric(pCO2_Salinity == "HL")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::mutate(LL = as.factor(as.numeric(pCO2_Salinity == "LL")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::mutate(LH = as.factor(as.numeric(pCO2_Salinity == "LH")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::select(-pCO2_Salinity)
d2.Traits.pCO2Salinity
# all treatment grousp (as _ _ _ for temp, pCO2 and salinity)  ================================================================ #
d2.Traits.Group         <- d2.Traits %>%
dplyr::select('All_treatment') %>% # primary treatment as Ambient (A) vs. Moderate (M)
dplyr::mutate(HHH = as.factor(as.numeric(All_treatment == "HHH")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::mutate(HHL = as.factor(as.numeric(All_treatment == "HHL")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::mutate(HLL = as.factor(as.numeric(All_treatment == "HLL")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::mutate(HLH = as.factor(as.numeric(All_treatment == "HLH")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::mutate(LLL = as.factor(as.numeric(All_treatment == "LLL")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::mutate(LHH = as.factor(as.numeric(All_treatment == "LHH")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::mutate(LHL = as.factor(as.numeric(All_treatment == "LHL")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::mutate(LLH = as.factor(as.numeric(All_treatment == "LLH")))  %>%  # call occurrence of 'AA' as 0s and 1s (factor)
dplyr::select(-All_treatment)
d2.Traits.Group
traitColors_Temperature = labels2colors(d2.Traits.Temperature); # Convert traits to a color representation: white means low, red means high, grey means missing entry
plotDendroAndColors(sampleTree2, traitColors_Temperature, # Plot the sample dendrogram and the colors underneath.
groupLabels = names(d2.Traits.Temperature),
main = "Sample dendrogram and trait heatmap (temperature)")
traitColors_pCO2 = labels2colors(d2.Traits.pCO2); # Convert traits to a color representation: white means low, red means high, grey means missing entry
plotDendroAndColors(sampleTree2, traitColors_pCO2, # Plot the sample dendrogram and the colors underneath.
groupLabels = names(d2.Traits.pCO2),
main = "Sample dendrogram and trait heatmap (pCO2)")
traitColors_Temperature = labels2colors(d2.Traits.Temperature); # Convert traits to a color representation: white means low, red means high, grey means missing entry
plotDendroAndColors(sampleTree2, traitColors_Temperature, # Plot the sample dendrogram and the colors underneath.
groupLabels = names(d2.Traits.Temperature),
main = "Sample dendrogram and trait heatmap (temperature)")
traitColors_pCO2 = labels2colors(d2.Traits.pCO2); # Convert traits to a color representation: white means low, red means high, grey means missing entry
plotDendroAndColors(sampleTree2, traitColors_pCO2, # Plot the sample dendrogram and the colors underneath.
groupLabels = names(d2.Traits.pCO2),
main = "Sample dendrogram and trait heatmap (pCO2)")
traitColors_Salinity = labels2colors(d2.Traits.Salinity); # Convert traits to a color representation: white means low, red means high, grey means missing entry
plotDendroAndColors(sampleTree2, traitColors_Salinity, # Plot the sample dendrogram and the colors underneath.
groupLabels = names(d2.Traits.Salinity),
main = "Sample dendrogram and trait heatmap (Salinity)")
traitColors_AragoniteSat = labels2colors(d2.Traits.AragoniteSat); # Convert traits to a color representation: white means low, red means high, grey means missing entry
plotDendroAndColors(sampleTree2, traitColors_AragoniteSat, # Plot the sample dendrogram and the colors underneath.
groupLabels = names(d2.Traits.AragoniteSat),
main = "Sample dendrogram and trait heatmap (AragoniteSat)")
png("Output/WGCNA/day2_larvae/Day2_ClusterTree_AragoniteSat.png", 1000, 1000, pointsize=20)
traitColors_AragoniteSat = labels2colors(d2.Traits.AragoniteSat); # Convert traits to a color representation: white means low, red means high, grey means missing entry
plotDendroAndColors(sampleTree2, traitColors_AragoniteSat, # Plot the sample dendrogram and the colors underneath.
groupLabels = names(d2.Traits.AragoniteSat),
main = "Sample dendrogram and trait heatmap (AragoniteSat)")
dev.off()
traitColors_pCO2Sal = labels2colors(d2.Traits.pCO2Salinity); # Convert traits to a color representation: white means low, red means high, grey means missing entry
plotDendroAndColors(sampleTree2, traitColors_pCO2Sal, # Plot the sample dendrogram and the colors underneath.
groupLabels = names(d2.Traits.pCO2Salinity),
main = "Sample dendrogram and trait heatmap (pCO2_Salinity)")
traitColors_Group = labels2colors(d2.Traits.Group); # Convert traits to a color representation: white means low, red means high, grey means missing entry
plotDendroAndColors(sampleTree2, traitColors_Group, # Plot the sample dendrogram and the colors underneath.
groupLabels = names(d2.Traits.Group),
main = "Sample dendrogram and trait heatmap (Group)")
dim(dds.d2_vst) #  22 4820 - again double check you have the correct data...
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(dds.d2_vst, powerVector = powers, verbose = 5) #...wait for this to finish
par(mfrow = c(1,2));
cex1 = 0.9;
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], # Scale-free topology fit index as a function of the soft-thresholding power
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
abline(h=0.90,col="red") # look at at cut off at power of 3 - this line corresponds to using an R^2 cut-off of h
plot(sft$fitIndices[,1], sft$fitIndices[,5], # Mean connectivity as a function of the soft-thresholding power
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
#=====================================================================================
#
#  Satrt the step-wise module construction:
# Step 1 = create adjacency matrix
# https://peterlangfelder.com/2018/11/25/signed-or-unsigned-which-network-type-is-preferable/
# https://www.rdocumentation.org/packages/WGCNA/10cpm/versions/1.69/topics/adjacency
# https://ramellose.github.io/networktutorials/wgcna.html
# https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/10cpm/TechnicalReports/signedTOM.pdf
#=====================================================================================
softPower = 10 # set your soft threshold based on the plots above
# signed - must call te type, defaults to unsigned
adjacency_sign = adjacency(dds.d2_vst, power = softPower, type="signed") # this takes a long time.. just wait...
# signed matrix
TOM_sign       = TOMsimilarity(adjacency_sign, TOMType="signed")  # this takes a long time.. just wait...
dissTOM_sign   = 1-TOM_sign
#=====================================================================================
#
#  Step 3:Call the hierarchical clustering function - plot the tree
#
#=====================================================================================
# Call the hierarchical clustering function
geneTree_sign   = hclust(as.dist(dissTOM_sign), method = "average");
# Plot the resulting clustering tree (dendrogram)
sizeGrWindow(12,9)
plot(geneTree_sign, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity - SIGNED",
labels = FALSE, hang = 0.04);
# We like large modules, so we set the minimum module size relatively high:
minModuleSize = 100; # set this for the subseqent call - WGCNA authors recomend diligence when calling module size to avoid too many/too few modules...
# Module identification using dynamic tree cut:
dynamicMods_sign = cutreeDynamic(dendro = geneTree_sign, distM = dissTOM_sign,
deepSplit = 1, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize);
table(dynamicMods_sign) # view the number of genes per module
# Convert numeric lables into colors
dynamicColors_sign = labels2colors(dynamicMods_sign) # add colors to module labels (previously numbers)
table(dynamicColors_sign) # lets look at this table...
plotDendroAndColors(geneTree_sign, dynamicColors_sign, "Dynamic Tree Cut - SIGNED",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05,
main = "Gene dendrogram and module colors 'SIGNED'")
# MEList = moduleEigengenes(dds.d7_vst, colors = dynamicColors)
MEList = moduleEigengenes(dds.d2_vst, colors = dynamicColors_sign)
MEs    = MEList$eigengenes # you can view MEs, condenses gene counts down to a single number for each sample representive of that expressoin pattern
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
METree = hclust(as.dist(MEDiss), method = "average") # Cluster module eigengenes
plot(METree, main = "Clustering of module eigengenes - SIGNED (dissimilarity calc = MEDiss = 1-cor(MEs))",
xlab = "", sub = "")
#=====================================================================================
#
#  Step 9: Commit to mergedcolors as 'MEs' and 'moduleColors'
#
#=====================================================================================
# Rename to moduleColors
moduleColors = dynamicColors_sign
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
# Save module colors and labels for use in subsequent parts
save(MEs, dds.d2_vst, moduleLabels, moduleColors, file = "Output/WGCNA/day2_larvae/Day2-networkConstruction-stepByStep.RData")
# write csv - save the module eigengenes
write.csv(MEs, file = "Output/WGCNA/day2_larvae/d2.WGCNA_ModulEigengenes.csv")
# Define numbers of genes and samples
nGenes = ncol(dds.d2_vst); # 8548
nSamples = nrow(dds.d2_vst); # 35
# Recalculate MEs with color labels
# Recalculate MEs with color labels
MEs0           <-  read.csv("Output/WGCNA/day2_larvae/d2.WGCNA_ModulEigengenes.csv") # read merged eigengene dataset
rownames(MEs0) <- MEs0[,1] # make first column into row names
MEs0           <- MEs0[,-1] # omit the first column (now inserted as rownames...)
MEs = orderMEs(MEs0) # reorders the columns (colors/modules)
dim(d2.Traits)  # 22  5
dim(MEs)  # 22  8
# temperature
d2.Traits.Temperature.asnum    <- data.frame(lapply(d2.Traits.Temperature, function(x) as.numeric(as.character(x))),
check.names=F, row.names = row.names(d2.Traits.Temperature))
moduleTraitCor_Temperature      = cor(MEs, d2.Traits.Temperature.asnum, use = "p");
moduleTraitPvalue_Temperature   = corPvalueStudent(moduleTraitCor_Temperature, nSamples);
moduleTraitPvalue_Temperature
# pCO2
d2.Traits.pCO2.asnum  <- data.frame(lapply(d2.Traits.pCO2, function(x) as.numeric(as.character(x))),
check.names=F, row.names = row.names(d2.Traits.pCO2))
moduleTraitCor_pCO2    = cor(MEs, d2.Traits.pCO2.asnum, use = "p");
moduleTraitPvalue_pCO2 = corPvalueStudent(moduleTraitCor_pCO2, nSamples);
moduleTraitPvalue_pCO2
# Salinity
d2.Traits.Salinity.asnum  <- data.frame(lapply(d2.Traits.Salinity, function(x) as.numeric(as.character(x))),
check.names=F, row.names = row.names(d2.Traits.Salinity))
moduleTraitCor_Salinity    = cor(MEs, d2.Traits.Salinity.asnum, use = "p");
moduleTraitPvalue_Salinity = corPvalueStudent(moduleTraitCor_Salinity, nSamples);
moduleTraitPvalue_Salinity
d2.Traits.Aragonite.Sat
d2.Traits.Aragonite.sat
# Aragonite.Sat
d2.Traits.AragoniteSat.asnum  <- data.frame(lapply(d2.Traits.AragoniteSat, function(x) as.numeric(as.character(x))),
check.names=F, row.names = row.names(d2.Traits.AragoniteSat))
moduleTraitCor_AragoniteSat    = cor(MEs, d2.Traits.AragoniteSat.asnum, use = "p");
moduleTraitPvalue_AragoniteSat = corPvalueStudent(moduleTraitCor_AragoniteSat, nSamples);
moduleTraitPvalue_AragoniteSat
sizeGrWindow(10,10)
# Will display correlations and their p-values
d2.AragoniteSat.matrix <-  paste(signif(moduleTraitCor_AragoniteSat, 2), "\n(",
signif(moduleTraitPvalue_AragoniteSat, 1), ")", sep = "")
#dim(textMatrix) == dim(moduleTraitCor_treatonly)
par(mar = c(8, 9.5, 5, 3));
labeledHeatmap(Matrix = moduleTraitCor_AragoniteSat,
xLabels = names(d2.Traits.AragoniteSat),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = TRUE,
colors = blueWhiteRed(50),
textMatrix = d2.AragoniteSat.matrix,
setStdMargins = FALSE,
cex.text = 1,
zlim = c(-0.6,0.6),
main = paste("Module-trait relationships - AragoniteSat"))
png("Output/WGCNA/day2_larvae/heatmaps/Day2_AragoniteSat_heatmap.png", 500, 1000, pointsize=20)
labeledHeatmap(Matrix = moduleTraitCor_AragoniteSat,
xLabels = names(d2.Traits.AragoniteSat),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = TRUE,
colors = blueWhiteRed(50),
textMatrix = d2.AragoniteSat.matrix,
setStdMargins = FALSE,
cex.text = 1,
zlim = c(-0.6,0.6),
main = paste("Module-trait relationships - AragoniteSat"))
dev.off()
# this heatmap looks better
d7.AragoniteSat.text <-  as.matrix(signif(moduleTraitPvalue_AragoniteSat, 3))
pa                  = cluster::pam(d7.AragoniteSat.text, k = 3)
col_fun             = colorRamp2(c(-0.5, 0, 0.5), c("blue", "white", "red"))
Heatmap(moduleTraitCor_AragoniteSat,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Day 2 WGCNA - AragoniteSat",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 1,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", d7.AragoniteSat.text[i, j]), x, y, gp = gpar(fontsize = 10))
})
Heatmap(moduleTraitCor_AragoniteSat,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Day 2 WGCNA - AragoniteSat",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 2,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", d7.AragoniteSat.text[i, j]), x, y, gp = gpar(fontsize = 10))
})
# this heatmap looks better
d7.AragoniteSat.text <-  as.matrix(signif(moduleTraitPvalue_AragoniteSat, 3))
pa                  = cluster::pam(d7.AragoniteSat.text, k = 3)
col_fun             = colorRamp2(c(-0.5, 0, 0.5), c("blue", "white", "red"))
pdf("Output/WGCNA/day2_larvae/heatmaps/Day2_AragoniteSat_heatmap.pdf", width=5, height=6)
Heatmap(moduleTraitCor_AragoniteSat,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Day 2 WGCNA - AragoniteSat",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 2,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", d7.AragoniteSat.text[i, j]), x, y, gp = gpar(fontsize = 10))
})
dev.off()
# We like large modules, so we set the minimum module size relatively high:
minModuleSize = 50; # set this for the subseqent call - WGCNA authors recomend diligence when calling module size to avoid too many/too few modules...
# Module identification using dynamic tree cut:
dynamicMods_sign = cutreeDynamic(dendro = geneTree_sign, distM = dissTOM_sign,
deepSplit = 1, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize);
table(dynamicMods_sign) # view the number of genes per module
# Convert numeric lables into colors
dynamicColors_sign = labels2colors(dynamicMods_sign) # add colors to module labels (previously numbers)
table(dynamicColors_sign) # lets look at this table...
plotDendroAndColors(geneTree_sign, dynamicColors_sign, "Dynamic Tree Cut - SIGNED",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05,
main = "Gene dendrogram and module colors 'SIGNED'")
# MEList = moduleEigengenes(dds.d7_vst, colors = dynamicColors)
MEList = moduleEigengenes(dds.d2_vst, colors = dynamicColors_sign)
MEs    = MEList$eigengenes # you can view MEs, condenses gene counts down to a single number for each sample representive of that expressoin pattern
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
METree = hclust(as.dist(MEDiss), method = "average") # Cluster module eigengenes
plot(METree, main = "Clustering of module eigengenes - SIGNED (dissimilarity calc = MEDiss = 1-cor(MEs))",
xlab = "", sub = "")
#=====================================================================================
#
#  Step 9: Commit to mergedcolors as 'MEs' and 'moduleColors'
#
#=====================================================================================
# Rename to moduleColors
moduleColors = dynamicColors_sign
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
# Define numbers of genes and samples
nGenes = ncol(dds.d2_vst); # 8548
nSamples = nrow(dds.d2_vst); # 35
dim(d2.Traits)  # 22  6
dim(MEs)  # 22  8
# temperature
d2.Traits.Temperature.asnum    <- data.frame(lapply(d2.Traits.Temperature, function(x) as.numeric(as.character(x))),
check.names=F, row.names = row.names(d2.Traits.Temperature))
moduleTraitCor_Temperature      = cor(MEs, d2.Traits.Temperature.asnum, use = "p");
moduleTraitPvalue_Temperature   = corPvalueStudent(moduleTraitCor_Temperature, nSamples);
moduleTraitPvalue_Temperature
# pCO2
d2.Traits.pCO2.asnum  <- data.frame(lapply(d2.Traits.pCO2, function(x) as.numeric(as.character(x))),
check.names=F, row.names = row.names(d2.Traits.pCO2))
moduleTraitCor_pCO2    = cor(MEs, d2.Traits.pCO2.asnum, use = "p");
moduleTraitPvalue_pCO2 = corPvalueStudent(moduleTraitCor_pCO2, nSamples);
moduleTraitPvalue_pCO2
# Salinity
d2.Traits.Salinity.asnum  <- data.frame(lapply(d2.Traits.Salinity, function(x) as.numeric(as.character(x))),
check.names=F, row.names = row.names(d2.Traits.Salinity))
moduleTraitCor_Salinity    = cor(MEs, d2.Traits.Salinity.asnum, use = "p");
moduleTraitPvalue_Salinity = corPvalueStudent(moduleTraitCor_Salinity, nSamples);
moduleTraitPvalue_Salinity
# Aragonite.Sat
d2.Traits.AragoniteSat.asnum  <- data.frame(lapply(d2.Traits.AragoniteSat, function(x) as.numeric(as.character(x))),
check.names=F, row.names = row.names(d2.Traits.AragoniteSat))
moduleTraitCor_AragoniteSat    = cor(MEs, d2.Traits.AragoniteSat.asnum, use = "p");
moduleTraitPvalue_AragoniteSat = corPvalueStudent(moduleTraitCor_AragoniteSat, nSamples);
moduleTraitPvalue_AragoniteSat
# pCO2 and Salinity
d2.Traits.pCO2Salinity.asnum  <- data.frame(lapply(d2.Traits.pCO2Salinity, function(x) as.numeric(as.character(x))),
check.names=F, row.names = row.names(d2.Traits.pCO2Salinity))
moduleTraitCor_pCO2Salinity    = cor(MEs, d2.Traits.pCO2Salinity.asnum, use = "p");
moduleTraitPvalue_pCO2Salinity = corPvalueStudent(moduleTraitCor_pCO2Salinity, nSamples);
moduleTraitPvalue_pCO2Salinity
# Group
d2.Traits.Group.asnum  <- data.frame(lapply(d2.Traits.Group, function(x) as.numeric(as.character(x))),
check.names=F, row.names = row.names(d2.Traits.Group))
moduleTraitCor_Group    = cor(MEs, d2.Traits.Group.asnum, use = "p");
moduleTraitPvalue_Group = corPvalueStudent(moduleTraitCor_Group, nSamples);
moduleTraitPvalue_Group
sizeGrWindow(10,10)
# Will display correlations and their p-values
d2.pCO2.matrix <-  paste(signif(moduleTraitCor_pCO2, 2), "\n(",
signif(moduleTraitPvalue_pCO2, 1), ")", sep = "")
#dim(textMatrix) == dim(moduleTraitCor_treatonly)
par(mar = c(8, 9.5, 5, 3));
# this heatmap looks better
d7.pCO2.text <-  as.matrix(signif(moduleTraitPvalue_pCO2, 3))
pa                  = cluster::pam(d7.pCO2.text, k = 3)
col_fun             = colorRamp2(c(-0.5, 0, 0.5), c("blue", "white", "red"))
Heatmap(moduleTraitCor_pCO2,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Day 2 WGCNA - pCO2",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 1,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", d7.pCO2.text[i, j]), x, y, gp = gpar(fontsize = 10))
})
# this heatmap looks better
d7.AragoniteSat.text <-  as.matrix(signif(moduleTraitPvalue_AragoniteSat, 3))
pa                  = cluster::pam(d7.AragoniteSat.text, k = 3)
col_fun             = colorRamp2(c(-0.5, 0, 0.5), c("blue", "white", "red"))
Heatmap(moduleTraitCor_AragoniteSat,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Day 2 WGCNA - AragoniteSat",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 2,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", d7.AragoniteSat.text[i, j]), x, y, gp = gpar(fontsize = 10))
})
plot(METree, main = "Clustering of module eigengenes - SIGNED (dissimilarity calc = MEDiss = 1-cor(MEs))",
xlab = "", sub = "")
table(dynamicColors_sign) # lets look at this table...
# We like large modules, so we set the minimum module size relatively high:
minModuleSize = 100; # set this for the subseqent call - WGCNA authors recomend diligence when calling module size to avoid too many/too few modules...
# Module identification using dynamic tree cut:
dynamicMods_sign = cutreeDynamic(dendro = geneTree_sign, distM = dissTOM_sign,
deepSplit = 1, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize);
table(dynamicMods_sign) # view the number of genes per module
