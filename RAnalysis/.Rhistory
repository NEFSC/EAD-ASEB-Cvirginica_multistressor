ylim(-15, 25) +
theme(legend.position = "none") +
ggtitle("PCA: Day2 (rlog)") +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
d2.PCA_allgroups
d2.PCA_allgroups <- ggplot(pcaData_d2, aes(x = PC1,
y = PC2,
shape = OA_Sal,
color = factor(Temperature))) +
geom_point(size =3) +
scale_color_manual(values = c("grey20", "grey85")) +
scale_shape_manual(values = c(1, 19, 2, 17)) +
#geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=2) +
theme_half_open(10) +
xlim(-25, 40) +
ylim(-15, 25) +
#theme(legend.position = "none") +
ggtitle("PCA: Day2 (rlog)") +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
d2.PCA_allgroups
d2.PCA_SalTemp
d2.PCA_SalTemp <- ggplot(pcaData_d2, aes(x = PC1,
y = PC2,
shape = factor(Sal_Temp),
color = factor(Sal_Temp))) +
geom_point(size =3) +
scale_color_manual(values = c("grey20", "grey85","grey20", "grey85")) +
scale_shape_manual(values = c(1, 19, 2, 17)) +
stat_ellipse(aes(fill = factor(Sal_Temp)), level = 0.67) +
#geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=2) +
theme_half_open(10) +
xlim(-25, 40) +
ylim(-15, 25) +
#theme(legend.position = "none") +
ggtitle("PCA: Day2 (rlog)") +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
d2.PCA_SalTemp
d2.PCA_arag.sat
pdf("../Output/DESeq2/Day2_larva/plots/Day2.rlog_PCA_all.pdf")
plot_grid(d2.PCA_allgroups, d2.PCA_SalTemp, d2.PCA_arag.sat, labels = c('A', 'B', 'C'))
dev.off()
d2.PCA_allgroups <- ggplot(pcaData_d2, aes(x = PC1,
y = PC2,
shape = OA_Sal,
color = factor(Temperature))) +
geom_point(size =3) +
scale_color_manual(values = c("grey20", "grey85")) +
scale_shape_manual(values = c(1, 19, 2, 17)) +
#geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=2) +
theme_half_open(10) +
xlim(-25, 40) +
ylim(-15, 25) +
#theme(legend.position = "none") +
ggtitle("PCA: Day2 (rlog)") +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
d2.PCA_allgroups
# Data transformations for heatmap and PCA visuals :::::::
# rlog - regularized log transformation of origin count data to log2 scale - fit for each sample and dist. of coefficients in the data
rlog.d18 <- rlogTransformation(dds.d18.group) # rlog transform (regularized log)
---
# title: "WGCNA overlapped genes"
# author: "Samuel Gurr"
# date: "Oct 5, 2022"
---
#  LOAD LIBRARIES
library(dplyr)
library(forcats)
library(ggplot2)
library(reshape2)
library(ggpubr)
library(tidyr)
library(tidyverse)
# SET WORKING DIRECTORY AND LOAD DATA
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis")
path_out = 'C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/Output/WGCNA/' # personnal computer
# master reference view te master ref R script for details
Master_ref  <- read.csv(file= "Data/TagSeq/Seq_details/Seq_Reference_Master.csv", sep=',', header=TRUE) %>%
dplyr::select(c('Cvirginica_TranscriptID','Annotation_GO_ID', 'Cvirginica_length'))
Cvirginica_annot_reference  <- read.csv(file="Data/TagSeq/Seq_details/seq_id_master.csv", sep=',', header=TRUE) %>%
dplyr::select(c('TranscriptID','Function','GeneID')) %>%
dplyr::mutate(TranscriptID = gsub(" ", "", TranscriptID)) %>% # remove the space at the end of each transcript ID
dplyr::mutate(Protein_name = gsub("\\s\\(LOC.*|\\sLOC111.*", "", perl=TRUE, Function)) %>%
dplyr::select(!Function)
d2_Annot_ModuleMembership      <- read.csv("Output/WGCNA/day2_larvae/d2.WGCNA_ModulMembership.csv")
# for loop to call the threshold or module mdembership
d2ModCols                      <- data.frame(moduleColor = unique(d2_Annot_ModuleMembership$moduleColor)) %>% # unique module colors
dplyr::filter(moduleColor %in% c('pink',
'blue',
'turquoise',
'brown',
'black',
'red')) %>% # sig modules
dplyr::mutate(Day = "Day2")
df_total              <- data.frame() # start dataframe
day2_mod_RR           <- data.frame(matrix(nrow = 1, ncol = 5)) # create dataframe to save cumunalitively during for loop
colnames(day2_mod_RR) <- c('Day', 'moduleColor', 'TranscriptID','geneSymbol','Protein_name') # names for comuns in the for loop
for (i in 1:nrow(d2ModCols)) {
# start with loop by calling the row value common with the 'Master_KEGG_BPTerms' data frind from rbind above
modColor         <- d2ModCols[i,1]
loopmodColor_cor <- paste("MM.", modColor, sep = '') # column name for mod color - PEarsons correlation value
loopmodColor_p   <- paste("p.MM.", modColor, sep = '') # column name for mod color - Students asymptotic p value
Mod_loop_d2            <- d2_Annot_ModuleMembership %>%
dplyr::filter(moduleColor %in% modColor) %>%
dplyr::select(c('TranscriptID','geneSymbol','Protein_name','moduleColor', loopmodColor_cor,loopmodColor_p))
Mod_Loop_d2_RRcutoff   <- as.data.frame(Mod_loop_d2 %>%
dplyr::filter(!(.[[5]] <  0.6 & .[[6]] > 0.05)) %>%
dplyr::mutate(Day = "Day2")) %>%
dplyr::select(!c(5,6))
# write csv file for the data reduced mod mem
loopdf       <- data.frame(Mod_Loop_d2_RRcutoff) # name dataframe for this single row
day2_mod_RR  <- rbind(day2_mod_RR,loopdf) #bind to a cumulative list dataframe
print(day2_mod_RR) # print to monitor progress
}
# View(day2_mod_RR)
day2_mod_RR      <- read.csv("Output/WGCNA/day2_larvae/d2.WGCNA_ModulMembership_RRcutoff.csv") %>% dplyr::mutate(Day = "Day2")
d22_Annot_ModuleMembership     <- read.csv("Output/WGCNA/day18_spat/d18.WGCNA_ModulMembership.csv")
d22ModCols                     <- data.frame(moduleColor = unique(d22_Annot_ModuleMembership$moduleColor)) %>% # unique module colors
dplyr:: filter(moduleColor %in% c('tan',
'red',
'turquoise',
'salmon',
'blue',
'green',
'greenyellow')) %>% # sig modules
dplyr::mutate(Day = "Day22")
df_total              <- data.frame() # start dataframe
day22_mod_RR          <- data.frame(matrix(nrow = 1, ncol = 5)) # create dataframe to save cumunalitively during for loop
colnames(day22_mod_RR) <- c('Day', 'moduleColor', 'TranscriptID','geneSymbol','Protein_name') # names for comuns in the for loop
for (i in 1:nrow(d22ModCols)) {
# start with loop by calling the row value common with the 'Master_KEGG_BPTerms' data frind from rbind above
modColor         <- d22ModCols[i,1]
loopmodColor_cor <- paste("MM.", modColor, sep = '') # column name for mod color - PEarsons correlation value
loopmodColor_p   <- paste("p.MM.", modColor, sep = '') # column name for mod color - Students asymptotic p value
Mod_loop_d22            <- d22_Annot_ModuleMembership %>%
dplyr::filter(moduleColor %in% modColor) %>%
dplyr::select(c('TranscriptID','geneSymbol','Protein_name','moduleColor', loopmodColor_cor,loopmodColor_p))
Mod_Loop_d22_RRcutoff   <- as.data.frame(Mod_loop_d22 %>%
dplyr::filter(!(.[[5]] <  0.6 & .[[6]] > 0.05)) %>%
dplyr::mutate(Day = "Day22")) %>%
dplyr::select(!c(5,6))
loopdf       <- data.frame(Mod_Loop_d22_RRcutoff) # name dataframe for this single row
day22_mod_RR  <- rbind(day22_mod_RR,loopdf) #bind to a cumulative list dataframe
print(day22_mod_RR) # print to monitor progress
}
# View(day22_mod_RR)
day22_mod_RR      <- read.csv("Output/WGCNA/day18_spat/d18.WGCNA_ModulMembership_RRcutoff.csv") %>% dplyr::mutate(Day = "Day22")
# master WGCNA module data for for loops!
WGCNA_MasterModData   <-  merge( (as.data.frame(rbind(day2_mod_RR,
# d2_Annot_ModuleMembership_hightemp,
day22_mod_RR)) %>%
dplyr::rename(Cvirginica_TranscriptID=TranscriptID)),
Master_ref, by="Cvirginica_TranscriptID")
d2blue <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day2' ~ moduleColor %in% 'blue'))
d22blue  <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'blue'))
#merge
modules_HighSalHighExp <- rbind(d2blue, d22blue)
#do genes overlap?
modules_HighSalHighExp_filtered <- as.data.frame(modules_HighSalHighExp %>%
group_by(Cvirginica_TranscriptID,Protein_name) %>%
dplyr::summarise(n = n()) %>%
filter(!n %in% 1) %>%
select(!n))
modules_HighSalHighExp_filtered
d2turquoise <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day2' ~ moduleColor %in% 'blue'))
d2turquoise <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day2' ~ moduleColor %in% 'turquoise'))
d22turquoise  <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'turquoise'))
d22salmon  <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'salmon'))
d22salmon
d22salmon
d22salmon[d22salmon$Protein_name %like% d22turquoise$Protein_name,]
d22turquoise$Protein_name
d22salmon$Protein_name
d22salmon[d22salmon$Protein_name %like% d22turquoise$Protein_name]
# ============================================================================= #
# Co-expression Pattern: High Salinity == High Expression
# ============================================================================= #
library(DescTools)
d22salmon[d22salmon$Protein_name %like% d22turquoise$Protein_name]
d22salmon[d22salmon$Protein_name %like% d22turquoise$Protein_name,]
d22salmon[d22salmon$Protein_name %like% c(d22turquoise$Protein_name),]
c(d22turquoise$Protein_name)
subset(d22salmon, rowSums(sapply(d22salmon, grepl, pattern(c(d22turquoise$Protein_name))))) >0
grep("oxid", x=d22salmon)
grep("oxid", x=d22salmon$Protein_name)
grep(d22turquoise$Protein_name, x=d22salmon$Protein_name)
grep(c(d22turquoise$Protein_name), x=d22salmon$Protein_name)
p <- paste(d22salmon$Protein_name , collapse="|")
p
subset(d22turquoise, grep1(p, Protein_name))
subset(d22turquoise, grepl(p, Protein_name))
d22salmon_proteinNames <-d22salmon %>% dplyr::filter(!Protein_name %in% 'uncharacterized') %>%  paste(Protein_name, collapse="|")
d22salmon %>% dplyr::filter(!Protein_name %in% 'uncharacterized')
d22salmon_filter       <- d22salmon %>% dplyr::filter(!Protein_name %in% 'uncharacterized') # removed "uncharacterized from protein names
d22salmon_proteinNames <- paste(d22salmon_filter$Protein_name, collapse="|")
d22salmon_proteinNames
subset(d22turquoise, grepl(p, d22salmon_proteinNames)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
d22salmon_filter       <- d22salmon %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22salmon_proteinNames <- paste(d22salmon_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
subset(d22turquoise, grepl(p, d22salmon_proteinNames)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
d22salmon_filter       <- d22salmon %>% dplyr::filter(!Protein_name %in% 'uncharacterized') # removed "uncharacterized from protein names
d22salmon_proteinNames <- paste(d22salmon_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
subset(d22turquoise, grepl(p, d22salmon_proteinNames)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
d22salmon_proteinNames
subset(d22turquoise, grepl(p, d22salmon_proteinNames)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
nrow(d22turquoise)
nrow(subset(d22turquoise, grepl(p, d22salmon_proteinNames))) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
subset(d22turquoise, grepl(d22salmon_proteinNames, d22salmon_proteinNames)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
d22salmon_filter       <- d22salmon %>% dplyr::filter(!Protein_name %in% 'uncharacterized') # removed "uncharacterized from protein names
d22salmon_proteinNames <- paste(d22salmon_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22salmon_proteinNames
d22turquoise
subset(d22turquoise, grepl(d22salmon_proteinNames, Protein_name)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
nrow(subset(d22turquoise, grepl(d22salmon_proteinNames, Protein_name))) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
d22turquoise_SUBSET <- subset(d22turquoise, grepl(d22salmon_proteinNames, Protein_name)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
d22turquoise_SUBSET$Protein_name
d22salmon_filter       <- d22salmon %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22salmon_proteinNames <- paste(d22salmon_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
nrow(d22turquoise)
d22turquoise_SUBSET <- subset(d22turquoise, grepl(d22salmon_proteinNames, Protein_name)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
d22turquoise_SUBSET$Protein_name
nrow(d22turquoise_SUBSET)
d22turquoise_SUBSET    <- subset(d22turquoise, grepl(d22salmon_proteinNames, Protein_name)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
d22turquoise_SUBSET$Protein_name
nrow(d22turquoise_SUBSET) # 19 overlapped genes
nrow(d22turquoise_SUBSET) # 19 overlapped genes
# create a vector to filter with
d2turquoise_filter     <- d2turquoise %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22turquoise_filter    <- d22turquoise %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22salmon_filter       <- d22salmon %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d2turquoise_proteinNames <- paste(d2turquoise_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22turquoise_filter        <- d22turquoise %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22turqupoise_proteinNames <- paste(d22turquoise_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22salmon_filter           <- d22salmon %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22salmon_proteinNames     <- paste(d22salmon_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22salmon_proteinNames
d2turquoise_SUBSET  <- subset(d2turquoise, grepl(d22turqupoise_proteinNames, Protein_name))
# create a vector to filter with
d2turquoise_filter         <- d2turquoise %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d2turquoise_proteinNames   <- paste(d2turquoise_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22turquoise_filter        <- d22turquoise %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22turqupoise_proteinNames <- paste(d22turquoise_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22salmon_filter           <- d22salmon %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22salmon_proteinNames     <- paste(d22salmon_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d2turquoise_SUBSET  <- subset(d2turquoise, grepl(d22turqupoise_proteinNames, Protein_name))
d22turqupoise_proteinNames
d2turquoise
# create a vector to filter with
d2turquoise_filter         <- d2turquoise %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d2turquoise_proteinNames   <- paste(d2turquoise_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d2turquoise_proteinNames
d22turquoise_SUBSET    <- subset(d22turquoise, grepl(d22salmon_proteinNames, Protein_name)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
d22turquoise_SUBSET$Protein_name
d22turquoise_SUBSET    <- subset(d22salmon, grepl(d22turqupoise_proteinNames, Protein_name)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
d22salmon_filter           <- d22salmon %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22salmon_proteinNames     <- paste(d22salmon_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22salmon_proteinNames
d22turqupoise_proteinNames
d22turquoise_SUBSET    <- subset(d22turquoise, grepl(d22salmon_proteinNames, Protein_name)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
d22turquoise_SUBSET$Protein_name
d2turquoise_SUBSET  <- subset(d2turquoise, grepl(d22turqupoise_proteinNames, Protein_name))
# create a vector to filter with
d2turquoise_filter         <- d2turquoise %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d2turquoise_proteinNames   <- paste(d2turquoise_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d2turquoise_filter
d2turquoise_proteinNames
d22salmon_proteinNames
d22turqupoise_proteinNames
c    <- subset(d22salmon, grepl(d22turqupoise_proteinNames, Protein_name)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
d22turquoise_SUBSET    <- subset(d22turquoise, grepl(d22salmon_proteinNames, Protein_name)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
d2turquoise_SUBSET  <- subset(d22turquoise, grepl(d2turquoise_proteinNames, Protein_name))
d2turquoise_SUBSET$Protein_name
d22salmon_SUBSET    <- subset(d22salmon, grepl(d2turquoise_proteinNames, Protein_name)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
d22salmon_SUBSET$Protein_name
# subset both d22 modules for character strings in the d2 turquoise of the same pattern
d22turquoise_SUBSET  <- subset(d22turquoise, grepl(d2turquoise_proteinNames, Protein_name))
d22turquoise_SUBSET$Protein_name
d22salmon_SUBSET    <- subset(d22salmon, grepl(d2turquoise_proteinNames, Protein_name)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
d22salmon_SUBSET$Protein_name
d22turquoise_SUBSET$Protein_name
d22salmon_SUBSET    <- subset(d22salmon, grepl(d2turquoise_proteinNames, Protein_name)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
d22salmon_SUBSET$Protein_name
sort(d22turquoise_SUBSET$Protein_name)
View(sort(d22turquoise_SUBSET$Protein_name))
View(sort(list(d22turquoise_SUBSET$Protein_name)))
View(sort(as.data.frame(d22turquoise_SUBSET$Protein_name)))
as.data.frame(d22turquoise_SUBSET$Protein_name)
View(as.data.frame(sort(d22turquoise_SUBSET$Protein_name)))
View(as.data.frame(sort(d22salmon_SUBSET$Protein_name)))
d2turquoise_SUBSET$Protein_name
d22salmon_proteinNames
d2turquoise_SUBSET$Protein_name
d22green <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'green'))
d22blue  <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'blue'))
# create a vector to filter with
d22green_filter         <- d22green %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22green_proteinNames      <- paste(d22green_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
# create a vector to filter with
d22green_filter            <- d22green %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22green_proteinNames      <- paste(d22green_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22blue_filter             <- d22blue %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22blue_proteinNames       <- paste(d22blue_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
# subsets
d22green_SUBSET  <- subset(d22green_filter, grepl(!d22blue_proteinNames, Protein_name))
# subsets
d22green_SUBSET  <- subset(d22green_filter, !grepl(d22blue_proteinNames, Protein_name))
# subsets
d22green_SUBSET  <- subset(d22green_filter, grepl(d22blue_proteinNames, Protein_name))
d22blue_proteinNames
d22green_filter
d22turquoise_SUBSET    <- subset(d22turquoise, !grepl(d22salmon_proteinNames, Protein_name)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
d22turquoise_SUBSET$Protein_name
d22turquoise_SUBSET    <- subset(d22turquoise, grepl(d22salmon_proteinNames, Protein_name)) # subset d22 turquoise for character matches in d22 salmon (w/o 'unchracterized')
d22turquoise_SUBSET$Protein_name
# subsets
d22green_SUBSET  <- subset(d22green_filter, grepl(d22blue_proteinNames, Protein_name))
# create a vector to filter with
d22green_filter            <- d22green %>% dplyr::filter(!Protein_name %in% 'uncharacterized') # removed "uncharacterized from protein names
d22green_proteinNames      <- paste(d22green_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22blue_filter             <- d22blue %>% dplyr::filter(!Protein_name %in% 'uncharacterized') # removed "uncharacterized from protein names
d22blue_proteinNames       <- paste(d22blue_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
# subsets
d22green_SUBSET  <- subset(d22green_filter, grepl(d22blue_proteinNames, Protein_name))
# create a vector to filter with
d22green_filter            <- d22green %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22green_proteinNames      <- paste(d22green_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22blue_filter             <- d22blue %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22blue_proteinNames       <- paste(d22blue_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
# subsets
d22green_SUBSET  <- subset(d22green_filter, grepl(d22blue_proteinNames, Protein_name))
d22green_SUBSET$Protein_name
d22blue_proteinNames
d22green_filter
d22blue_SUBSET  <- subset(d22blue_filter, grepl(d22green_proteinNames, Protein_name))
d22blue_SUBSET$Protein_name
paste(d22blue_SUBSET, collapse="|")
# subsets
d22blue_SUBSET  <- subset(d22blue_filter, grepl(d22green_proteinNames, Protein_name)) # everything that overlaps with green and blue
d22blue_SUBSET
paste(d22blue_SUBSET$Protein_name, collapse="|")
d22blue_SUBSETNames<-paste(d22blue_SUBSET$Protein_name, collapse="|")
# subsets
overlap_SUBSET  <- subset(d22blue_filter, grepl(d22green_proteinNames, Protein_name)) # everything that overlaps with green and blue
overlap_SUBSET     <- paste(overlap_SUBSET$Protein_name, collapse="|")
# subsets
overlap            <- subset(d22blue_filter, grepl(d22green_proteinNames, Protein_name)) # everything that overlaps with green and blue
overlap_proteinNames <- paste(overlap$Protein_name, collapse="|")
d22green_SUBSET  <- subset(d22green_filter, grepl(overlap_proteinNames, Protein_name))
d22green_SUBSET$Protein_name
d22green_SUBSET  <- subset(d22green_filter, !grepl(overlap_proteinNames, Protein_name))
d22green_SUBSET$Protein_name
d22blue_proteinNames
d22green_SUBSET  <- subset(d22green_filter, !grepl(d22blue_proteinNames, Protein_name))
# subsets
overlap              <- subset(d22blue_filter, grepl(d22green_proteinNames, Protein_name)) # everything that overlaps with green and blue
overlap_proteinNames <- paste(overlap$Protein_name, collapse="|")
overlap_proteinNames
d22green_SUBSET  <- subset(d22green_filter, !grepl(overlap_proteinNames, Protein_name))
d22green_SUBSET$Protein_name
d22tan <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'tan'))
# create a vector to filter with
d22tan_filter            <- d22tan %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22tan_proteinNames      <- paste(d22tan_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22geenUNIQUE_proteinNames      <- paste(d22green_SUBSET$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
# subsets
d22tan_SUBSET  <- subset(d22tan_filter, grepl(d22geenUNIQUE_proteinNames, Protein_name))
d22tan_SUBSET$Protein_name
# ============================================================================= #
# Co-expression Pattern: High Salinity == High Expression
# ============================================================================= #
d2blue <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day2' ~ moduleColor %in% 'blue'))
d22blue  <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'blue'))
d2blue
d22tan <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'tan'))
# create a vector to filter with
d22tan_filter            <- d22tan %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22tan_proteinNames      <- paste(d22tan_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22geenUNIQUE_proteinNames      <- paste(d22green_SUBSET$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
# subsets
d22tan_SUBSET  <- subset(d22tan_filter, grepl(d22geenUNIQUE_proteinNames, Protein_name))
d22tan_SUBSET$Protein_name
# subsets
d22tan_SUBSET  <- subset(d22tan_filter, grepl(d22geenUNIQUE_proteinNames, Protein_name))
d22tan_SUBSET$Protein_name
d22green_SUBSET$Protein_name
d22green_SUBSET      <- subset(d22green_filter, grepl(overlap_proteinNames, Protein_name))
d22green_SUBSET$Protein_name
d22green_SUBSET      <- subset(d22green_filter, !grepl(overlap_proteinNames, Protein_name))
d22green_SUBSET$Protein_name
d22green_SUBSET      <- subset(d22green_filter, grepl(overlap_proteinNames, Protein_name))
d22green_SUBSET$Protein_name
d22green_SUBSET      <- subset(d22green_filter, grepl("*-like",overlap_proteinNames, Protein_name))
d22green_SUBSET$Protein_name
d22green_SUBSET      <- subset(d22green_filter, !grepl("*-like",overlap_proteinNames, Protein_name))
d22green_SUBSET$Protein_name
nrow(d22green_filter)
d22green_SUBSET      <- subset(d22green_filter, grepl("*-like",overlap_proteinNames, Protein_name))
d22green_SUBSET$Protein_name
d22green_SUBSET      <- subset(d22green_filter, grepl("*",overlap_proteinNames, Protein_name))
d22green_SUBSET$Protein_name
d22green_SUBSET      <- subset(d22green_filter, grepl(overlap_proteinNames, Protein_name))
d22green_SUBSET$Protein_name
d22tan <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'tan'))
# create a vector to filter with
d22tan_filter              <- d22tan %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22tan_proteinNames        <- paste(d22tan_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22geenUNIQUE_proteinNames <- paste(d22green_SUBSET$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
# subsets
d22tan_SUBSET  <- subset(d22tan_filter, grepl(d22geenUNIQUE_proteinNames, Protein_name))
d22tan_SUBSET$Protein_name
d22tan_filter
# subsets
overlap              <- subset(d22blue_filter, grepl(d22green_proteinNames, Protein_name)) # everything that overlaps with green and blue
overlap_proteinNames <- paste(overlap$Protein_name, collapse="|")
overlap_proteinNames
overlap
overlap_proteinNames <- paste(overlap$Protein_name, collapse="|")
d22green_SUBSET      <- subset(d22green_filter, grepl(overlap_proteinNames, Protein_name))
d22green_SUBSET$Protein_name
d22green_SUBSET$Protein_name
d22red <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'red'))
d2turquoise <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day2' ~ moduleColor %in% 'turquoise'))
# create a vector to filter with
d2tuquoise_filter          <- d2turquoise %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d2tuquoise_proteinNames    <- paste(d2tuquoise_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22red_filter              <- d22red %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22red_proteinNames       <- paste(d22red_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22red_proteinNames
# subsets
d22red_SUBSET  <- subset(d22red_filter, grepl(d2tuquoise_proteinNames, Protein_name))
d22red_SUBSET$Protein_name
d2tuquoise_proteinNames
d22red_SUBSET
d22red_filter
d22red_SUBSET$Protein_name
d22green <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'green'))
d22blue  <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'blue'))
# create a vector to filter with
d22green_filter            <- d22green %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22green_proteinNames      <- paste(d22green_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22blue_filter             <- d22blue %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22blue_proteinNames       <- paste(d22blue_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
# subsets
overlap              <- subset(d22blue_filter, grepl(d22green_proteinNames, Protein_name)) # everything in blue that matches green
overlap_proteinNames <- paste(overlap$Protein_name, collapse="|")
d22green_SUBSET      <- subset(d22green_filter, grepl(overlap_proteinNames, Protein_name))
d22green_SUBSET$Protein_name
# subsets
overlap              <- subset(d22blue_filter, grepl(d22green_proteinNames, Protein_name)) # everything in blue that matches green
overlap
# subsets
overlap              <- subset(d22blue_filter, !grepl(d22green_proteinNames, Protein_name)) # everything in blue that matches green
# subsets
overlap              <- subset(d22green_filter, !grepl(d22blue_proteinNames, Protein_name)) # everything in blue that matches green
d22green_proteinNames
View(d22green_proteinNames)
# subsets
overlap              <- subset(d22green_filter, !grepl(d22blue_proteinNames, Protein_name)) # everything in blue that matches green
d22green_proteinNames
d22blue_proteinNames
d22green_proteinNames
# subsets
overlap              <- subset(d22green_filter, !grepl(d22blue_proteinNames, Protein_name)) # everything in blue that matches green
# subsets
overlap              <- subset(d22green_filter, !grepl(d22blue_proteinNames,[a-Z], Protein_name)) # everything in blue that matches green
# subsets
overlap              <- subset(d22green_filter, !grepl(-f d22blue_proteinNames, Protein_name)) # everything in blue that matches green
# subsets
overlap              <- subset(d22green_filter, !grepl(d22blue_proteinNames, Protein_name)) # everything in blue that matches green
d22blue_proteinNames
d22green_proteinNames
d22blue_proteinNames
d22blue_filter
d22blue  <- WGCNA_MasterModData %>%
dplyr::filter(case_when(Day == 'Day22' ~ moduleColor %in% 'red'))
# create a vector to filter with
d22green_filter            <- d22green %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22green_proteinNames      <- paste(d22green_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
d22blue_filter             <- d22blue %>% dplyr::filter(!Protein_name %in% ' uncharacterized') # removed "uncharacterized from protein names
d22blue_proteinNames       <- paste(d22blue_filter$Protein_name, collapse="|") # separate all protein names by | to use grep to subset anoter dataframe
# subsets
overlap              <- subset(d22green_filter, !grepl(d22blue_proteinNames, Protein_name)) # everything in blue that matches green
overlap_proteinNames <- paste(overlap$Protein_name, collapse="|")
overlap_proteinNames
overlap
# subsets
overlap              <- subset(d22green_filter, grepl(d22blue_proteinNames, Protein_name)) # everything in blue that matches green
overlap
