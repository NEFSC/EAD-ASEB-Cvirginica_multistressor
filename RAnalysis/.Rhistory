dplyr::group_by(qseqid) %>%
dplyr::filter(evalue == min(evalue)) %>%
dplyr::select(c('qseqid','sseqid'))  %>%
dplyr::rename(Cvirg_TranscriptID = qseqid, Cgigas_KEGGID = sseqid)
blastx_CgigasCvirg            <- read.delim2(file="../Data/TagSeq/Seq_details/Cgigas_refs/crgKEGG_diamond_out.txt",header=FALSE) %>%
dplyr::rename(qseqid = V1,sseqid = V2,pident = V3,length = V4,mismatch = V5,gapopen = V6,qstart = V7,qend = V8,sstart = V9,send = V10,evalue = V11,bitscore = V12)
blastx_CgigasCvirg
blastx_CgigasCvirg_besthits   <- blastx_CgigasCvirg %>%
dplyr::group_by(qseqid) %>% # group by the query C virginica transcript IDs
dplyr::filter(evalue == min(evalue)) %>% # call the lowest E value (also highest bitscore) indicating the bst blast hit
dplyr::select(c('qseqid','sseqid'))  %>%  # call the two target columns - the query (C virginica transcript IDs) and the database of the blast (Cgigas KEGG IDs)
dplyr::rename(Cvirg_TranscriptID = qseqid, Cgigas_KEGGID = sseqid) # rename these columns for clarity
blastx_CgigasCvirg_besthits
Cgigas_KEGGIDs
blastx_CgigasCvirg_besthits
Cgigas_KEGGIDs
# Explore the accuracy of the blast blastx KEGG ID
blastx_CgigasCvirg_besthits   <- blastx_CgigasCvirg %>%
dplyr::group_by(qseqid) %>% # group by the query C virginica transcript IDs
dplyr::filter(evalue == min(evalue)) %>% # call the lowest E value (also highest bitscore) indicating the bst blast hit
dplyr::select(c('qseqid','sseqid'))  %>%  # call the two target columns - the query (C virginica transcript IDs) and the database of the blast (Cgigas KEGG IDs)
dplyr::rename(Cvirg_TranscriptID = qseqid, Cgigas_KEGGID = sseqid) # rename these columns for clarity
blastx_CgigasCvirg_besthits
Cgigas_KEGGIDs
Cgigas_KEGGIDs
blastx_CgigasCvirg_besthits
blastx_CgigasCvirg_besthits
Cgigas_KEGGIDs
Cgigas_KEGGIDs      <- as.data.frame(read.delim2(file = "C:/Users/samjg/Documents/Bioinformatics/refs/Cgigas/T03920_(2021_06_23 21_09_09 UTC).nuc", header=FALSE)) %>%
dplyr::filter(grepl(">crg:", V1)) %>%
dplyr::mutate(Cgigas_KEGGID = gsub("\\s.*|>", "",V1)) %>%
dplyr::mutate(Function = gsub("\\sLOC105.*|*.;", "", substring(V1, 16))) %>%
dplyr::select(!V1)
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
merge(blastx_CgigasCvirg_besthits
blastx_CgigasCvirg_besthits
# Explore the accuracy of the blast blastx KEGG ID
blastx_CgigasCvirg_besthits   <- blastx_CgigasCvirg %>%
dplyr::group_by(qseqid) %>% # group by the query C virginica transcript IDs
dplyr::filter(evalue == min(evalue)) %>% # call the lowest E value (also highest bitscore) indicating the bst blast hit
dplyr::select(c('qseqid','sseqid'))  %>%  # call the two target columns - the query (C virginica transcript IDs) and the database of the blast (Cgigas KEGG IDs)
dplyr::rename(Cvirg_TranscriptID = qseqid, Cgigas_KEGGID = sseqid) # rename these columns for clarity
blastx_CgigasCvirg_besthits
Cgigas_KEGGIDs
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
merge(blastx_CgigasCvirg_besthits, Cgigas_KEGGIDs)
nrow(blastx_CgigasCvirg_besthits)
nrow(Cgigas_KEGGIDs)
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
merge(blastx_CgigasCvirg_besthits, Cgigas_KEGGIDs)
Cvirginica_annot_reference
blastx_CgigasCvirg_besthits
Cgigas_KEGGIDs
Cgigas_KEGGIDs      <- as.data.frame(read.delim2(file = "C:/Users/samjg/Documents/Bioinformatics/refs/Cgigas/T03920_(2021_06_23 21_09_09 UTC).nuc", header=FALSE)) %>%
dplyr::filter(grepl(">crg:", V1)) %>%
dplyr::mutate(Cgigas_KEGGID = gsub("\\s.*|>", "",V1)) %>%
dplyr::mutate(Protein_name = gsub("\\sLOC105.*|*.;", "", substring(V1, 16))) %>%
dplyr::select(!V1)
Cgigas_KEGGIDs
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
merge(blastx_CgigasCvirg_besthits, Cgigas_KEGGIDs)
Cgigas_KEGGIDs      <- as.data.frame(read.delim2(file = "C:/Users/samjg/Documents/Bioinformatics/refs/Cgigas/T03920_(2021_06_23 21_09_09 UTC).nuc", header=FALSE)) %>%
dplyr::filter(grepl(">crg:", V1)) %>%
dplyr::mutate(Cgigas_KEGGID = gsub("\\s.*|>", "",V1)) %>%
dplyr::mutate(Cgigas_Protein_name = gsub("\\sLOC105.*|*.;", "", substring(V1, 16))) %>%
dplyr::select(!V1)
Cvirginica_annot_reference
# Explore the accuracy of the blast blastx KEGG ID
blastx_CgigasCvirg_besthits   <- blastx_CgigasCvirg %>%
dplyr::group_by(qseqid) %>% # group by the query C virginica transcript IDs
dplyr::filter(evalue == min(evalue)) %>% # call the lowest E value (also highest bitscore) indicating the bst blast hit
dplyr::select(c('qseqid','sseqid'))  %>%  # call the two target columns - the query (C virginica transcript IDs) and the database of the blast (Cgigas KEGG IDs)
dplyr::rename(TranscriptID = qseqid, Cgigas_KEGGID = sseqid) # rename these columns for clarity
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
merge(blastx_CgigasCvirg_besthits, Cgigas_KEGGIDs)
blastx_CgigasCvirg_besthits
Cgigas_KEGGIDs
KEGGIDmerge_check1 <- merge(Cvirginica_annot_reference, KEGGIDmerge_check1) # merged by the common column 'TranscriptID'
Cvirginica_annot_reference
KEGGIDmerge_check1
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
KEGGIDmerge_check1 <- merge(blastx_CgigasCvirg_besthits, Cgigas_KEGGIDs) # merged by the common column 'Cgigas_KEGGID'
KEGGIDmerge_check1
KEGGIDmerge_check1 <- merge(Cvirginica_annot_reference, KEGGIDmerge_check1) # merged by the common column 'TranscriptID'
KEGGIDmerge_check1
Cvirginica_annot_reference
KEGGIDmerge_check1
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
KEGGIDmerge_check1 <- merge(blastx_CgigasCvirg_besthits, Cgigas_KEGGIDs) # merged by the common column 'Cgigas_KEGGID'
KEGGIDmerge_check1
KEGGIDmerge_check1 <- merge(Cvirginica_annot_reference, KEGGIDmerge_check1) # merged by the common column 'TranscriptID'
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
KEGGIDmerge_check1 <- merge(blastx_CgigasCvirg_besthits, Cgigas_KEGGIDs) # merged by the common column 'Cgigas_KEGGID'
KEGGIDmerge_check2 <- merge(Cvirginica_annot_reference, KEGGIDmerge_check1) # merged by the common column 'TranscriptID'
KEGGIDmerge_check2
Cvirginica_annot_reference
KEGGIDmerge_check1
Cvirginica_annot_reference
KEGGIDmerge_check1
Cvirginica_annot_reference
KEGGIDmerge_check1
Cvirginica_annot_reference
KEGGIDmerge_check1
View(Cvirginica_annot_reference)
View(KEGGIDmerge_check1)
KEGGIDmerge_check2 <- merge(Cvirginica_annot_reference, KEGGIDmerge_check1, by=c("TranscriptID")) # merged by the common column 'TranscriptID'
KEGGIDmerge_check2
KEGGIDmerge_check1
Cvirginica_annot_reference
KEGGIDmerge_check1
KEGGIDmerge_check2 <- merge(Cvirginica_annot_reference, KEGGIDmerge_check1, by="TranscriptID") # merged by the common column 'TranscriptID'
KEGGIDmerge_check2
KEGGIDmerge_check2 <- cbind(Cvirginica_annot_reference, KEGGIDmerge_check1, by="TranscriptID") # merged by the common column 'TranscriptID'
KEGGIDmerge_check2 <- merge(Cvirginica_annot_reference, KEGGIDmerge_check1, by="TranscriptID", all=FALSE) # merged by the common column 'TranscriptID'
KEGGIDmerge_check2
Cvirginica_annot_reference
KEGGIDmerge_check1
Cvirginica_annot_reference
KEGGIDmerge_check1
Cvirginica_annot_reference
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
KEGGIDmerge_check1 <- as.data.frame(merge(blastx_CgigasCvirg_besthits, Cgigas_KEGGIDs)) # merged by the common column 'Cgigas_KEGGID'
KEGGIDmerge_check2 <- merge(Cvirginica_annot_reference, KEGGIDmerge_check1, by="TranscriptID", all=FALSE) # merged by the common column 'TranscriptID'
KEGGIDmerge_check2
Cvirginica_annot_reference
KEGGIDmerge_check1
Cvirginica_annot_reference$TranscriptID <- as.character(Cvirginica_annot_reference$TranscriptID)
KEGGIDmerge_check2 <- merge(Cvirginica_annot_reference, KEGGIDmerge_check1, by="TranscriptID", all=FALSE) # merged by the common column 'TranscriptID'
KEGGIDmerge_check2
KEGGIDmerge_check2 <- merge(Cvirginica_annot_reference, KEGGIDmerge_check1) # merged by the common column 'TranscriptID'
KEGGIDmerge_check2
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
KEGGIDmerge_check1 <- as.data.frame(merge(blastx_CgigasCvirg_besthits, Cgigas_KEGGIDs)) # merged by the common column 'Cgigas_KEGGID'
Cvirginica_annot_reference
KEGGIDmerge_check2
KEGGIDmerge_check1
KEGGIDmerge_check2
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
KEGGIDmerge_check1 <- as.data.frame(merge(blastx_CgigasCvirg_besthits, Cgigas_KEGGIDs)) # merged by the common column 'Cgigas_KEGGID'
KEGGIDmerge_check1
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
KEGGIDmerge_check1 <- as.data.frame(merge(blastx_CgigasCvirg_besthits, Cgigas_KEGGIDs,Cvirginica_annot_reference)) # merged by the common column 'Cgigas_KEGGID'
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
KEGGIDmerge_check1 <- as.data.frame(merge(blastx_CgigasCvirg_besthits, Cgigas_KEGGIDs,Cvirginica_annot_reference, by = TranscriptID)) # merged by the common column 'Cgigas_KEGGID'
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
KEGGIDmerge_check1 <- as.data.frame(merge(blastx_CgigasCvirg_besthits, Cgigas_KEGGIDs,Cvirginica_annot_reference, by = 'TranscriptID')) # merged by the common column 'Cgigas_KEGGID'
blastx_CgigasCvirg_besthits
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
KEGGIDmerge_check1 <- as.data.frame(merge(blastx_CgigasCvirg_besthits, Cvirginica_annot_reference)) # merged by the common column 'Cgigas_KEGGID'
KEGGIDmerge_check1
Cgigas_KEGGIDs
Cvirginica_annot_reference
# annotation master data
# first the crassotrea virginica reference - containing the transcript IDs and functional annotation (nOTE: no KEGG or GO term-level annotation in this file!)
Cvirginica_annot_reference  <- read.csv(file="../Data/TagSeq/Seq_details/seq_id_master.csv", sep=',', header=TRUE) %>%
dplyr::select(c('TranscriptID','Function','GeneID')) %>%
dplyr::mutate(Protein_name = gsub("\\s\\(LOC.*|\\sLOC111.*", "", perl=TRUE, Function)) %>% dplyr::select(!Function)
nrow(Cvirginica_annot_reference) #66625 including all genes
Cvirginica_annot_reference
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
colnames(Cvirginica_annot_reference)
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
Cvirginica_annot_reference$TranscriptID <- as.factor(Cvirginica_annot_reference$TranscriptID)
KEGGIDmerge_check1 <- as.data.frame(merge(blastx_CgigasCvirg_besthits, Cgigas_KEGGIDs)) # merged by the common column 'Cgigas_KEGGID'
KEGGIDmerge_check2 <- merge(Cvirginica_annot_reference, KEGGIDmerge_check1) # merged by the common column 'TranscriptID'
KEGGIDmerge_check2
Cvirginica_annot_reference$TranscriptID
Cvirginica_annot_reference$TranscriptID <- as.character(Cvirginica_annot_reference$TranscriptID)
KEGGIDmerge_check2 <- merge(Cvirginica_annot_reference, KEGGIDmerge_check1) # merged by the common column 'TranscriptID'
KEGGIDmerge_check2
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
KEGGIDmerge_check1 <- as.data.frame(merge(blastx_CgigasCvirg_besthits, Cgigas_KEGGIDs)) # merged by the common column 'Cgigas_KEGGID'
View(Cvirginica_annot_reference)
View(KEGGIDmerge_check1)
blastx_CgigasCvirg_besthits
# Explore the accuracy of the blast blastx KEGG ID
blastx_CgigasCvirg_besthits   <- blastx_CgigasCvirg %>%
dplyr::group_by(qseqid) %>% # group by the query C virginica transcript IDs
dplyr::filter(evalue == min(evalue)) %>% # call the lowest E value (also highest bitscore) indicating the bst blast hit
dplyr::select(c('qseqid','sseqid'))  %>%  # call the two target columns - the query (C virginica transcript IDs) and the database of the blast (Cgigas KEGG IDs)
dplyr::rename('TranscriptID' = 'qseqid', Cgigas_KEGGID = sseqid) # rename these columns for clarity
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
KEGGIDmerge_check1 <- as.data.frame(merge(blastx_CgigasCvirg_besthits, Cgigas_KEGGIDs)) # merged by the common column 'Cgigas_KEGGID'
KEGGIDmerge_check1
KEGGIDmerge_check2 <- merge(Cvirginica_annot_reference, KEGGIDmerge_check1) # merged by the common column 'TranscriptID'
KEGGIDmerge_check2
KEGGIDmerge_check1
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
KEGGIDmerge_check1 <- merge(blastx_CgigasCvirg_besthits, Cgigas_KEGGIDs) # merged by the common column 'Cgigas_KEGGID'
KEGGIDmerge_check2 <- merge(Cvirginica_annot_reference, KEGGIDmerge_check1) # merged by the common column 'TranscriptID'
KEGGIDmerge_check2
KEGGIDmerge_check1
KEGGIDmerge_check1$TranscriptID
Cvirginica_annot_reference$TranscriptID
# annotation master data
# first the crassotrea virginica reference - containing the transcript IDs and functional annotation (nOTE: no KEGG or GO term-level annotation in this file!)
Cvirginica_annot_reference  <- read.csv(file="../Data/TagSeq/Seq_details/seq_id_master.csv", sep=',', header=TRUE) %>%
dplyr::select(c('TranscriptID','Function','GeneID')) %>%
dplyr::mutate(TranscriptID = gsub(" ", "", TranscriptID)) %>% # remove the space at the end of each transcript ID
dplyr::mutate(Protein_name = gsub("\\s\\(LOC.*|\\sLOC111.*", "", perl=TRUE, Function)) %>%
dplyr::select(!Function)
Cvirginica_annot_reference
KEGGIDmerge_check2 <- merge(Cvirginica_annot_reference, KEGGIDmerge_check1) # merged by the common column 'TranscriptID'
KEGGIDmerge_check2
View(KEGGIDmerge_check2)
# Explore the accuracy of the blast blastx KEGG ID
blastx_CgigasCvirg_besthits   <- blastx_CgigasCvirg %>%
dplyr::group_by(qseqid) %>% # group by the query C virginica transcript IDs
dplyr::filter(evalue == min(evalue)) %>% # call the lowest E value (also highest bitscore) indicating the bst blast hit
dplyr::select(c('qseqid','sseqid', 'bitscore'))  %>%  # call the two target columns - the query (C virginica transcript IDs) and the database of the blast (Cgigas KEGG IDs)
dplyr::rename('TranscriptID' = 'qseqid', Cgigas_KEGGID = sseqid) # rename these columns for clarity
blastx_CgigasCvirg_besthits
# Explore the accuracy of the blast blastx KEGG ID
blastx_CgigasCvirg_besthits   <- blastx_CgigasCvirg %>%
dplyr::group_by(qseqid) %>% # group by the query C virginica transcript IDs
dplyr::filter(evalue == min(evalue)) %>% # call the lowest E value (also highest bitscore) indicating the bst blast hit
dplyr::select(c('qseqid','sseqid', 'evalue', 'bitscore'))  %>%  # call the two target columns - the query (C virginica transcript IDs) and the database of the blast (Cgigas KEGG IDs)
dplyr::rename('TranscriptID' = 'qseqid', Cgigas_KEGGID = sseqid) # rename these columns for clarity
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
KEGGIDmerge_check1 <- merge(blastx_CgigasCvirg_besthits, Cgigas_KEGGIDs) # merged by the common column 'Cgigas_KEGGID'
Cvirginica_annot_reference
KEGGIDmerge_check2 <- merge(Cvirginica_annot_reference, KEGGIDmerge_check1)  %>%  dplyr::rename(Cvirginica_Protein_name = Protein_name)# merged by the common column 'TranscriptID'
KEGGIDmerge_check2
Cgigas_KEGGIDs
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
KEGGIDmerge_check1 <- merge(Cgigas_KEGGIDs, blastx_CgigasCvirg_besthits) # merged by the common column 'Cgigas_KEGGID'
KEGGIDmerge_check2 <- merge(Cvirginica_annot_reference, KEGGIDmerge_check1)  %>%  dplyr::rename(Cvirginica_Protein_name = Protein_name)# merged by the common column 'TranscriptID'
KEGGIDmerge_check2
Cgigas_KEGGIDs
View(KEGGIDmerge_check2)
Cgigas_GOterms
Cvirginica_GOterms
merge(KEGGIDmerge_check2, Cvirginica_GOterms , by = 'TranscriptID)
merge(KEGGIDmerge_check2, Cvirginica_GOterms , by = 'TranscriptID')
KEGGIDmerge_check2
Cvirginica_GOterms
KEGGIDmerge_check2
Cvirginica_GOterms
KEGGIDmerge_check2
Cvirginica_GOterms
merge(KEGGIDmerge_check2, Cvirginica_GOterms , by = 'TranscriptID')
merge(KEGGIDmerge_check2, Cvirginica_GOterms)
Cvirginica_GOterms$TranscriptID
KEGGIDmerge_check2$TranscriptID
merge(KEGGIDmerge_check2, Cvirginica_GOterms)
Cvirginica_GOterms
KEGGIDmerge_check2
merge(KEGGIDmerge_check2, Cvirginica_GOterms, by = c('TranscriptID','GeneID'))
KEGGIDmerge_check2
View(Cvirginica_GOterms)
Cvirginica_GOterms  <- read.csv(file="../Data/TagSeq/Seq_details/Cviginiva_GOterms.csv", sep=',', header=TRUE) %>%
dplyr::select(c('Protein_product','Replicon_Accession','GeneID', 'Protein_name' ,'Annotation_GO_ID'))
merge(KEGGIDmerge_check2, Cvirginica_GOterms, by = 'GeneID')
View(merge(KEGGIDmerge_check2, Cvirginica_GOterms, by = 'GeneID'))
Cvirginica_GOterms  <- read.csv(file="../Data/TagSeq/Seq_details/Cviginiva_GOterms.csv", sep=',', header=TRUE) %>%
dplyr::select(c('Replicon_Accession','GeneID', 'Protein_name' ,'Annotation_GO_ID'))
View(merge(KEGGIDmerge_check2, Cvirginica_GOterms, by = 'GeneID'))
Cvirginica_GOterms  <- read.csv(file="../Data/TagSeq/Seq_details/Cviginiva_GOterms.csv", sep=',', header=TRUE) %>%
dplyr::select(c('Replicon_Accession','GeneID' ,'Annotation_GO_ID'))
View(merge(KEGGIDmerge_check2, Cvirginica_GOterms, by = 'GeneID'))
KEGGIDmerge_check2
Masterref <- (merge(KEGGIDmerge_check2, Cvirginica_GOterms, by = 'GeneID'))
Master_ref <- (merge(KEGGIDmerge_check2, Cvirginica_GOterms, by = 'GeneID'))
as.data.frame(Master_ref)
# call the GO terms
Cvirginica_GOterms             <- as.data.frame(Master_ref) %>% dplyr::select(c('TranscriptID','Annotation_GO_ID'))
colnames(Cvirginica_GOterms)[1:2] <- c('transcript.ID', 'GO.terms') # call gene name and the GO terms - (Uniprot ID 'V5')
splitted                       <- strsplit(as.character(Cvirginica_GOterms$GO.terms), "; ") #slit into multiple GO ids by delimiter'; ' remember the space after ; is needed here! without this you will only call the first listed GO term for each gene!
GO.terms                          <- data.frame(v1 = rep.int(Cvirginica_GOterms$transcript.ID, sapply(splitted, length)), v2 = unlist(splitted)) #list all genes with each of their GO terms in a single row
GO.terms
d2.counts
# Prepare dataframe(s) and vectors for goseq
# Format 'GO.term' for goseq from the P.generosa annotation .fna file 'Geoduck_annotation'
IDvector.d2 <- as.vector(unique(d2.counts$TranscriptID))   # call unique genes (those filtered and used in DESEq2) on day0 - 'IDvector'
IDvector.d18 <- as.vector(unique(d18.counts$TranscriptID))  # call unique genes (those filtered and used in DESEq2) on day7 - 'IDvector'
# Prepare dataframe(s) and vectors for goseq
# Format 'GO.term' for goseq from the P.generosa annotation .fna file 'Geoduck_annotation'
IDvector.d2         <- as.vector(unique(d2.counts$TranscriptID))   # call unique genes (those filtered and used in DESEq2) on day0 - 'IDvector'
IDvector.d18        <- as.vector(unique(d18.counts$TranscriptID))  # call unique genes (those filtered and used in DESEq2) on day7 - 'IDvector'
GO_unique.genes.all <- as.vector(unique(Master_ref$TranscriptID)) # call all unique genes for GO analysis (goseq)
Master_ref
Cvirginica_GOterms
read.csv(file="../Data/TagSeq/Seq_details/Cviginiva_GOterms.csv", sep=',', header=TRUE)
Cvirginica_GOterms  <- read.csv(file="../Data/TagSeq/Seq_details/Cviginiva_GOterms.csv", sep=',', header=TRUE) %>%
dplyr::select(c('Replicon_Accession','GeneID' ,'Annotation_GO_ID', 'Length'))
Cgigas_GOterms  <- read.csv(file="../Data/TagSeq/Seq_details/Cgigas_refs/Cgigas_GOterms_uniprot.csv", sep=',', header=TRUE) %>%
dplyr::select(c('Entry.name','Protein.names','Gene.ontology.IDs'))
Cgigas_KEGGIDs      <- as.data.frame(read.delim2(file = "C:/Users/samjg/Documents/Bioinformatics/refs/Cgigas/T03920_(2021_06_23 21_09_09 UTC).nuc", header=FALSE)) %>%
dplyr::filter(grepl(">crg:", V1)) %>%
dplyr::mutate(Cgigas_KEGGID = gsub("\\s.*|>", "",V1)) %>%
dplyr::mutate(Cgigas_Protein_name = gsub("\\sLOC105.*|*.;", "", substring(V1, 16))) %>%
dplyr::select(!V1)
Cgigas_KEGGIDs      <- as.data.frame(read.delim2(file = "C:/Users/samjg/Documents/Bioinformatics/refs/Cgigas/T03920_(2021_06_23 21_09_09 UTC).nuc", header=FALSE)) %>%
dplyr::filter(grepl(">crg:", V1)) %>%
dplyr::mutate(Cgigas_KEGGID = gsub("\\s.*|>", "",V1)) %>%
dplyr::mutate(Cgigas_Protein_name = gsub("\\sLOC105.*|*.;", "", substring(V1, 16))) %>%
dplyr::select(!V1)
blastx_CgigasCvirg  <- read.delim2(file="../Data/TagSeq/Seq_details/Cgigas_refs/crgKEGG_diamond_out.txt",header=FALSE) %>%
dplyr::rename(qseqid = V1,sseqid = V2,pident = V3,length = V4,mismatch = V5,gapopen = V6,qstart = V7,qend = V8,sstart = V9,send = V10,evalue = V11,bitscore = V12) # rename columns
# Explore the accuracy of the blast blastx KEGG ID
blastx_CgigasCvirg_besthits   <- blastx_CgigasCvirg %>%
dplyr::group_by(qseqid) %>% # group by the query C virginica transcript IDs
dplyr::filter(evalue == min(evalue)) %>% # call the lowest E value (also highest bitscore) indicating the bst blast hit
dplyr::select(c('qseqid','sseqid', 'evalue', 'bitscore'))  %>%  # call the two target columns - the query (C virginica transcript IDs) and the database of the blast (Cgigas KEGG IDs)
dplyr::rename('TranscriptID' = 'qseqid', Cgigas_KEGGID = sseqid) # rename these columns for clarity
# we now have two columns indicating the best blast hits of C virginica mRNA annotated reference to the Cgigas protein database of KEGG IDs
# explore the accuray of these hits to the protein.names in the Cvirg and Cgigas references
KEGGIDmerge_check1 <- merge(Cgigas_KEGGIDs, blastx_CgigasCvirg_besthits) # merged by the common column 'Cgigas_KEGGID'
KEGGIDmerge_check2 <- merge(Cvirginica_annot_reference, KEGGIDmerge_check1)  %>%  dplyr::rename(Cvirginica_Protein_name = Protein_name)# merged by the common column 'TranscriptID'
Master_ref <- (merge(KEGGIDmerge_check2, Cvirginica_GOterms, by = 'GeneID'))
# Gene length
GO_gene.length <- Master_ref %>% dplyr::select(c("TranscriptID","length"))
Master_ref
# Gene length
GO_gene.length <- Master_ref %>% dplyr::select(c("TranscriptID","Length"))
GO_gene.length
# merge length with counts data
length_vector   <- GO_gene.length$length
GeneLength.d2   <- merge(GO_gene.length, d2.counts, by = "TranscriptID")   # merge day0 counts with 'GO_gene.length'
GeneLength.d18  <- merge(GO_gene.length, d18.counts, by = "TranscriptID")  # merge day7 counts with 'GO_gene.length'
GeneLength.d18
GeneLength.d2
# call length values for goseq - confirms that the IDvector and length_vector are the same!!!
length_vector.d2 <- GeneLength.d2$Length    # length vector for all unique reads address in DESeq2 on day 0
length_vector.d2
sum(sapply(length_vector.d2,Length)) == dim(d2.counts)[1] #should be TRUE
dim(d2.counts)[1]
length_vector.d2
sum(sapply(length_vector.d2,Length))
sum(sapply(length_vector.d2,length))
dim(d2.counts)[1]
sum(sapply(length_vector.d2,length)) == dim(d2.counts)[1] #should be TRUE
length_vector.d18 <- GeneLength.d18$length    # length vector for all unique reads address in DESeq2 on day 7
sum(sapply(length_vector.d18,length)) == dim(d18.counts)[1] #should be TRUE
GeneLength.d18$length
length_vector.d18 <- GeneLength.d18$Length    # length vector for all unique reads address in DESeq2 on day 7
length_vector.d18
sum(sapply(length_vector.d18,Length))
sum(sapply(length_vector.d18,Length))
sum(sapply(length_vector.d18,length))
dim(d18.counts)[1]
dim(d18.counts)
dim(d18.counts)[1]
GeneLength.d18$Length
length_vector.d18
sum(sapply(length_vector.d18,length))
length_vector.d18
d2.counts
GO_gene.length
d2.counts
GeneLength.d2   <- merge(GO_gene.length, d2.counts, by = "TranscriptID")   # merge day0 counts with 'GO_gene.length'
GeneLength.d18  <- merge(GO_gene.length, d18.counts, by = "TranscriptID")  # merge day7 counts with 'GO_gene.length'
sum(sapply(GeneLength.d2,length)) == dim(d2.counts)[1] #should be TRUE
sum(sapply(GeneLength.d2,length))
GeneLength.d2
length_vector
# merge length with counts data
length_vector   <- GO_gene.length$length
length_vector
# Gene length
GO_gene.length <- Master_ref %>% dplyr::select(c("TranscriptID","Length"))
# merge length with counts data
length_vector   <- GO_gene.length$Length
length_vector
GeneLength.d2   <- merge(GO_gene.length, d2.counts, by = "TranscriptID")   # merge day0 counts with 'GO_gene.length'
GeneLength.d18  <- merge(GO_gene.length, d18.counts, by = "TranscriptID")  # merge day7 counts with 'GO_gene.length'
# call length values for goseq - confirms that the IDvector and length_vector are the same!!!
length_vector.d2 <- GeneLength.d2$length    # length vector for all unique reads address in DESeq2 on day 0
sum(sapply(length_vector.d2,length))
# call length values for goseq - confirms that the IDvector and length_vector are the same!!!
length_vector.d2 <- GeneLength.d2$Length    # length vector for all unique reads address in DESeq2 on day 0
length_vector.d2
sum(sapply(length_vector.d2,length))
dim(d2.counts)
dim(d18.counts)
merge(GO_gene.length, d2.counts, by = "TranscriptID")
d2.counts
GO_gene.length
# Gene length
GO_gene.length <- Master_ref %>% dplyr::select(c("TranscriptID","Length"))
GO_gene.length
Master_ref
Cvirginica_GOterms
read.csv(file="../Data/TagSeq/Seq_details/Cviginiva_GOterms.csv", sep=',', header=TRUE)
Cvirginica_GOterms  <- read.csv(file="../Data/TagSeq/Seq_details/Cviginiva_GOterms.csv", sep=',', header=TRUE) %>%
dplyr::select(c('Replicon_Accession','GeneID' ,'Annotation_GO_ID', 'Length')) %>%
dplyr::group_by(GeneID) %>%
dplyr::filter(Length = max(Length))
Cvirginica_GOterms  <- read.csv(file="../Data/TagSeq/Seq_details/Cviginiva_GOterms.csv", sep=',', header=TRUE) %>%
dplyr::select(c('Replicon_Accession','GeneID' ,'Annotation_GO_ID', 'Length')) %>%
dplyr::group_by(GeneID) %>%
dplyr::filter(Length == max(Length))
Cvirginica_GOterms
Master_ref <- (merge(KEGGIDmerge_check2, Cvirginica_GOterms, by = 'GeneID'))
Master_ref
Cvirginica_annot_reference
Cvirginica_GOterms
Master_ref <- (merge(Cvirginica_annot_reference, Cvirginica_GOterms, by = 'GeneID'))
Master_ref
# Prepare dataframe(s) and vectors for goseq
# Format 'GO.term' for goseq from the P.generosa annotation .fna file 'Geoduck_annotation'
IDvector.d2         <- as.vector(unique(d2.counts$TranscriptID))   # call unique genes (those filtered and used in DESEq2) on day0 - 'IDvector'
IDvector.d18        <- as.vector(unique(d18.counts$TranscriptID))  # call unique genes (those filtered and used in DESEq2) on day7 - 'IDvector'
GO_unique.genes.all <- as.vector(unique(Master_ref$TranscriptID)) # call all unique genes for GO analysis (goseq)
# Gene length
GO_gene.length <- Master_ref %>% dplyr::select(c("TranscriptID","Length"))
# merge length with counts data
length_vector   <- GO_gene.length$Length
GeneLength.d2   <- merge(GO_gene.length, d2.counts, by = "TranscriptID")   # merge day0 counts with 'GO_gene.length'
GeneLength.d18  <- merge(GO_gene.length, d18.counts, by = "TranscriptID")  # merge day7 counts with 'GO_gene.length'
GeneLength.d2
d2.counts
GO_gene.length
d2.counts
GO_gene.length
merge(GO_gene.length, d2.counts, by = "TranscriptID")
GeneLength.d2   <- unique(merge(GO_gene.length, d2.counts, by = "TranscriptID"))   # merge day0 counts with 'GO_gene.length'
GeneLength.d2
d2.counts
GeneLength.d18  <- unique(merge(GO_gene.length, d18.counts, by = "TranscriptID"))  # merge day7 counts with 'GO_gene.length'
GeneLength.d18
d18.counts
unique(d18.counts)
d18.counts
GeneLength.d2   <- unique(merge(d2.counts, GO_gene.length, by = "TranscriptID"))   # merge day0 counts with 'GO_gene.length'
GeneLength.d2
GeneLength.d2   <- (merge(d2.counts, GO_gene.length, by = "TranscriptID"))   # merge day0 counts with 'GO_gene.length'
GeneLength.d2
d2.counts
GeneLength.d2   <- unique(merge(d2.counts, GO_gene.length))   # merge day0 counts with 'GO_gene.length'
GeneLength.d2
GeneLength.d2   <- (merge(d2.counts, GO_gene.length))   # merge day0 counts with 'GO_gene.length'
GeneLength.d2
GeneLength.d2   <- unique(merge(d2.counts, GO_gene.length, by = "TranscriptID"))   # merge day0 counts with 'GO_gene.length'
GeneLength.d18  <- unique(merge(GO_gene.length, d18.counts, by = "TranscriptID"))  # merge day7 counts with 'GO_gene.length'
# call length values for goseq - confirms that the IDvector and length_vector are the same!!!
length_vector.d2 <- GeneLength.d2$Length    # length vector for all unique reads address in DESeq2 on day 0
length_vector.d2
sum(sapply(length_vector.d2,length)) == dim(d2.counts)[1] #should be TRUE
dim(d2.counts)
d2.counts
IDvector.d2
IDvector.d18
GO_unique.genes.all
GO_gene.length
GeneLength.d2
d2.counts
GO_gene.length
d2.counts
GeneLength.d2
GeneLength.d2   <-  dplyr::inner_join(d2.counts, GO_gene.length, by=TranscriptID)
GeneLength.d2   <-  dplyr::inner_join(d2.counts, GO_gene.length, by='TranscriptID')
GeneLength.d2
uniqu(GeneLength.d2$TranscriptID)
unique(GeneLength.d2$TranscriptID)
length(unique(GeneLength.d2$TranscriptID))
length(unique(d2.counts$TranscriptID))
length(unique(GO_gene.length$TranscriptID))
length(unique(d2.counts$TranscriptID))
d2.counts
length(d2.counts$TranscriptID)
length(unique(d2.counts$TranscriptID))
length(unique(d2.counts$TranscriptID))
length(d2.counts$TranscriptID)
d2.counts
GO_gene.length
dplyr::inner_join(d2.counts, GO_gene.length, by='TranscriptID')
Cvirginica_GOterms  <- read.csv(file="../Data/TagSeq/Seq_details/Cviginiva_GOterms.csv", sep=',', header=TRUE) %>%
dplyr::select(c('Replicon_Accession','GeneID' ,'Annotation_GO_ID', 'Length')) %>%
dplyr::group_by(GeneID) %>%
dplyr::filter(Length == max(Length))
Cvirginica_GOterms
Cvirginica_GOterms  <- read.csv(file="../Data/TagSeq/Seq_details/Cviginiva_GOterms.csv", sep=',', header=TRUE) %>%
dplyr::select(c('GeneID' ,'Annotation_GO_ID', 'Length')) %>%
dplyr::group_by(GeneID) %>%
dplyr::filter(Length == max(Length))
Cvirginica_GOterms
Master_ref <- (merge(Cvirginica_annot_reference, Cvirginica_GOterms, by = 'GeneID'))
# Gene length
GO_gene.length <- Master_ref %>% dplyr::select(c("TranscriptID","Length"))
# merge length with counts data
length_vector   <- GO_gene.length$Length
GeneLength.d2   <-  dplyr::inner_join(d2.counts, GO_gene.length, by='TranscriptID')
GeneLength.d2
GO_gene.length
Master_ref
GeneLength.d2   <-  unique(dplyr::inner_join(d2.counts, GO_gene.length, by='TranscriptID'))
GeneLength.d2
length(d2.counts$TranscriptID)
length(unique(d2.counts$TranscriptID))
