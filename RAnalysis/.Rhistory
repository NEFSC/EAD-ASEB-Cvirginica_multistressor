exp_metadata <- read.csv(file="Data/ExperimentMetadata.csv", header=T) # treatment assignments to 'Chamber_Tank'
aragonite_dat<- read.csv(file='Output/Water_Chem/Chem.Table_sep.csv', header = T) %>%
dplyr::select(c('meanAragonite','Temp_OA_Sal')) %>%
dplyr::rename(TempCarbSal = Temp_OA_Sal)
aragonite_dat$TempCarbSal <-  gsub("_", "", aragonite_dat$TempCarbSal)
counts_resp  <- read.csv(file="Data/Counts_resp.csv", header=T) # reference for the respirometry data - contains the 'Chamber_Tank' for each sensor channel (whether an animal or a blank)
resp.ref     <- read.csv(file="Data/Respiration/Reference_master.csv", header=T) %>%
dplyr::filter(!Filename %in% c('1_3_19_21_raw.txt', 'may_7_2021_low_temo_10-12_ans_13-15_high_sal_raw_b.txt')) # reference for the respirometry data - contains the 'Chamber_Tank' for each sensor channel (whether an animal or a blank)
resp.data    <- read.csv(file="Output/Respiration/Cumulative_resp_alpha0.4.csv", header=T) %>%
dplyr::filter(!Filename %in% c('1_3_19_21_raw.txt', 'may_7_2021_low_temo_10-12_ans_13-15_high_sal_raw_b.txt'))# read the calculated raw rates from 'resp_LoLin' script - contains the calculated rate (not normalized for blanks) for each sensor-channel
# merge the exp_metadata with the resp.data
resp.ref_merged                 <- merge(exp_metadata, resp.ref, by = 'Chamber_tank', all=TRUE) # all TRUE allows us to keep the blanks
resp.data_merged                <- merge(resp.data, resp.ref_merged, by = c('Date', 'Channel','Notes','Filename')) %>%
dplyr::mutate(TempCarbSal = case_when( !is.na(Temp) ~ (as.character(paste(Temp, pCO2, Salinity, sep =''))) )) %>%
dplyr::mutate(Aragonite_saturation = case_when( (TempCarbSal == "HHH") ~ 0.7,
(TempCarbSal == 'HHL') ~ 0.3,
(TempCarbSal == 'HLH') ~ 1.6,
(TempCarbSal == 'HLL') ~ 0.6,
(TempCarbSal == 'LLL') ~ 0.5,
(TempCarbSal == 'LLH') ~ 1.5,
(TempCarbSal == 'LHL') ~ 0.2,
(TempCarbSal == 'LHH') ~ 0.6))
dates.runs <- resp.data_merged %>%  # call table
dplyr::distinct(Date, Notes) # call all unique values for date run and sw condition
dates.runs <- na.omit(dates.runs)
# call dataframe and build table to rbind in for loop
blanks_total <- data.frame() # start dataframe
blanks.table <- data.frame(matrix(nrow = 1,ncol = 5)) # make a table template
colnames(blanks.table)<-c('Date', 'Notes', 'BLANK.mean.Lpc', 'BLANK.mean.Leq' , 'BLANK.mean.Lz') # names for comuns in the for loop
# for loop. objective = obtian a mean value for all blanks specific to date, run #, seawater treatment
for(i in 1:nrow(dates.runs)) {
data <- resp.data_merged %>%
dplyr::select(Date, Chamber_tank, Notes, Lpc,  Leq, Lz) %>%
dplyr::filter(!is.na(Lpc)) %>% # ommits empty resp channels (if any)
dplyr::filter(Notes == dates.runs[i,2])
blanks <- data %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::summarise(mean_Lpc = mean(abs(Lpc)),
mean_Leq = mean(abs(Leq)),
mean_Lz = mean(abs(Lz)))
blanks.table$Date           <- dates.runs[i,1] # all files have date in the form of yyyymmdd at the start of each csv name
#blanks.table$RUN <- dates.runs[i,2] # assign the run to the number in the title for the trials completed that day
blanks.table$Notes      <- dates.runs[i,2]
blanks.table$BLANK.mean.Lpc <- blanks[1,1]
blanks.table$BLANK.mean.Leq <- blanks[1,2]
blanks.table$BLANK.mean.Lz  <- blanks[1,3]
# blanks.table$alpha <- data[1,9] # set at start of script - reresents the proportion of data for final estimate of slopes (Lpc, Leq, Lz)
df <- data.frame(blanks.table) # name dataframe for this singl e row
blanks_total <- rbind(blanks_total,df) #bind to a cumulative list dataframe
# print(blanks_total) # print to monitor progress
}
head(blanks_total) # view blanks table
Resp.blanks.merge <- merge(resp.data_merged, blanks_total, by=c("Date", "Notes")) %>% # NOTE: this repeats for every distinct length value
dplyr::filter(!Chamber_tank =='blank') %>%
dplyr::filter(!Lpc > 0) %>% # onlynegative raw lpc values from LoLinR represent oxygen depletion - positive values are errors
dplyr::mutate(resp_norm = abs(Lpc) - BLANK.mean.Lpc)   #  Lpc is still raw data (take abs) then resp - blank,
Resp.blanks.merge_OM <- Resp.blanks.merge %>% dplyr::filter(resp_norm > 0)  # omits respiration rate values LESS than the blank (resp_norm < 0)
Resp.outliers        <- Resp.blanks.merge %>% dplyr::filter(resp_norm < 0)  # 10 total samples lower than the blank
print(c("number of blank resp > sample resp =",nrow(Resp.outliers)))
count_check_all <- Resp.blanks.merge_OM %>% dplyr::group_by(Date,TempCarbSal) %>% dplyr::summarise(n = n())
knitr::kable(count_check_all)
count_check_true_rates <- Resp.blanks.merge_OM %>% dplyr::filter(!Lpc > 0) %>% dplyr::group_by(Date,TempCarbSal) %>% dplyr::summarise(n = n()) # omit those wit positive values - no oxygen consumption recorded
knitr::kable(count_check_true_rates)
### no HLL after filtered of poor data
vial.vol <- 0.08 # milliliters (ml)
Resp.Master <- merge(Resp.blanks.merge_OM[,c(1,3,5,9:14,18)], counts_resp[,c(1,6:7)], by = c('Date','Chamber_tank'))
Resp.Master$resp_ng_L_indiv_hr <- (
( ( (abs(Resp.Master$resp_norm)*1000000) * # call absolute value of resp in mg per minute - convert to ng min-1
(vial.vol/1000) ) / # correct ng minute-1 to ng liter-1 by multiplying by the resp vial in liters
Resp.Master$Counts ) * # normalize by individual or larvae count - as to ng L-1 individual-1
(60)) # correct for the time; final value is ng Liter-1 individual-1 hour-1
# mean sd rates
# mean(Resp.Master$resp_ng_L_indiv_hr) # mean = 0.4994656
# sd(Resp.Master$resp_ng_L_indiv_hr) # sd= 0.8197345
Resp.Master[,c(1:3,12)]
# a.
Resp_age1_hightemp <- Resp.Master %>%
dplyr::filter(Date %in% '4/30/2021')  %>%
dplyr::filter(Temp %in% 'H') %>%
dplyr::mutate(Treatment = as.character(paste('OA.', pCO2, '_Sal.',Salinity, sep = ''))) %>%
dplyr::mutate(pCO2_Salinity = as.character(substr(TempCarbSal, 2, 3)))
# b.
Resp_age1_hightemp <- merge(Resp_age1_hightemp, aragonite_dat, by = 'TempCarbSal') # merge with the mean aragonite saturation state
## Plot geeom boxlot with jitter
Resp_Age1_Boxplot_hightemp <- ggplot(data=Resp_age1_hightemp,
aes(x=as.factor(Aragonite_saturation),
#aes(x=meanAragonite,
y=resp_ng_L_indiv_hr,
fill=pCO2_Salinity)) +
geom_boxplot()+
geom_jitter(width = 0.1)+
scale_fill_manual(values=c("skyblue2", "darkorange3","royalblue3", "orange2"))+
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title = "Age =24 hours; Respiration rates",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%indiv^{-1}%.% hr^{-1}~")"),
x = "Aragonite saturation") +
theme(axis.title.y = element_text(size = rel(1.3), angle =90), axis.title.x = element_text(size = rel(1.3), angle = 0))+
theme(axis.text=element_text(size=12))
Resp_Age1_Boxplot_hightemp
LMmod.age1_hightemp   <- aov(lm( log(resp_ng_L_indiv_hr)~pCO2*Salinity,data=Resp_age1_hightemp))
print('LM model  == aov( lm ( resp_ng_L_indiv_hr ~ pCO2 * Salinity, data = Resp_APRIL ) )')
pander(anova(LMmod.age1_hightemp), style='rmarkdown') # anova table of lmer
# |      &nbsp;       | Df | Sum Sq | Mean Sq | F value |  Pr(>F)  |
# |:-----------------:|:--:|:------:|:-------:|:-------:|:--------:|
# |     **pCO2**      | 1  | 13.18  |  13.18  |  20.62  | 0.001896 |
# |   **Salinity**    | 1  | 0.5436 | 0.5436  | 0.8505  |  0.3834  |
# | **pCO2:Salinity** | 1  | 0.5741 | 0.5741  | 0.8983  |  0.371   |
# |   **Residuals**   | 8  | 5.113  | 0.6391  |   NA    |    NA    |
check_model(LMmod.age1_hightemp) # observe the diagnostics of the model
# |      &nbsp;       | Df | Sum Sq | Mean Sq | F value |  Pr(>F)  |
# |:-----------------:|:--:|:------:|:-------:|:-------:|:--------:|
# |     **pCO2**      | 1  | 13.18  |  13.18  |  20.62  | 0.001896 |
# |   **Salinity**    | 1  | 0.5436 | 0.5436  | 0.8505  |  0.3834  |
# | **pCO2:Salinity** | 1  | 0.5741 | 0.5741  | 0.8983  |  0.371   |
# |   **Residuals**   | 8  | 5.113  | 0.6391  |   NA    |    NA    |
check_model(LMmod.age1_hightemp) # observe the diagnostics of the model
shapiro.test(residuals(LMmod.age1_hightemp)) # 0.001365 non normal
leveneTest(LMmod.age1_hightemp) # 0.3834 good
# c.2 ommit the high outlier resp value (> 0.14)
Resp_age1_hightempOM   <- Resp_age1_hightemp %>% dplyr::filter(!resp_ng_L_indiv_hr > 0.14) # ommit the outlier at ~ 0.15
LMmod.age1_hightempOM  <- aov(lm( log(resp_ng_L_indiv_hr)~pCO2*Salinity,data=Resp_age1_hightempOM))
print('LM model  == aov( lm ( resp_ng_L_indiv_hr ~ pCO2 * Salinity, data = Resp_APRIL ) )')
pander(anova(LMmod.age1_hightempOM), style='rmarkdown') # anova table of lmer
# |      &nbsp;       | Df |  Sum Sq  | Mean Sq  | F value | Pr(>F)  |
# |:-----------------:|:--:|:--------:|:--------:|:-------:|:-------:|
# |     **pCO2**      | 1  |  3.432   |  3.432   |  32.13  | 0.00076 |
# |   **Salinity**    | 1  | 0.009019 | 0.009019 | 0.08443 | 0.7798  |
# | **pCO2:Salinity** | 1  |  0.0363  |  0.0363  | 0.3399  | 0.5782  |
# |   **Residuals**   | 7  |  0.7477  |  0.1068  |   NA    |   NA    |
check_model(LMmod.age1_hightempOM) # observe the diagnostics of the model
shapiro.test(residuals(LMmod.age1_hightempOM)) # 0.3748  normal
leveneTest(LMmod.age1_hightempOM) # 0.915 good
LMmod.age1_hightempOM  <- aov(lm( log(resp_ng_L_indiv_hr)~pCO2*Salinity,data=Resp_age1_hightempOM))
print('LM model  == aov( lm ( resp_ng_L_indiv_hr ~ pCO2 * Salinity, data = Resp_APRIL ) )')
pander(anova(LMmod.age1_hightempOM), style='rmarkdown') # anova table of lmer
merge(resp.data_merged, blanks_total, by=c("Date", "Notes")) %>% # NOTE: this repeats for every distinct length value
dplyr::filter(!Chamber_tank =='blank')
blanks_total
dates.runs <- resp.data_merged %>%  # call table
dplyr::distinct(Date, Notes) # call all unique values for date run and sw condition
dates.runs <- na.omit(dates.runs)
# call dataframe and build table to rbind in for loop
blanks_total <- data.frame() # start dataframe
blanks.table <- data.frame(matrix(nrow = 1,ncol = 5)) # make a table template
colnames(blanks.table)<-c('Date', 'Notes', 'BLANK.mean.Lpc', 'BLANK.mean.Leq' , 'BLANK.mean.Lz') # names for comuns in the for loop
# for loop. objective = obtian a mean value for all blanks specific to date, run #, seawater treatment
for(i in 1:nrow(dates.runs)) {
data <- resp.data_merged %>%
dplyr::select(Date, Chamber_tank, Notes, Lpc,  Leq, Lz) %>%
dplyr::filter(!is.na(Lpc)) %>% # ommits empty resp channels (if any)
dplyr::filter(Notes == dates.runs[i,2])
blanks <- data %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::filter(!Lpc > 0) %>%
dplyr::summarise(mean_Lpc = mean(abs(Lpc)),
mean_Leq = mean(abs(Leq)),
mean_Lz = mean(abs(Lz)))
blanks.table$Date           <- dates.runs[i,1] # all files have date in the form of yyyymmdd at the start of each csv name
#blanks.table$RUN <- dates.runs[i,2] # assign the run to the number in the title for the trials completed that day
blanks.table$Notes      <- dates.runs[i,2]
blanks.table$BLANK.mean.Lpc <- blanks[1,1]
blanks.table$BLANK.mean.Leq <- blanks[1,2]
blanks.table$BLANK.mean.Lz  <- blanks[1,3]
# blanks.table$alpha <- data[1,9] # set at start of script - reresents the proportion of data for final estimate of slopes (Lpc, Leq, Lz)
df <- data.frame(blanks.table) # name dataframe for this singl e row
blanks_total <- rbind(blanks_total,df) #bind to a cumulative list dataframe
# print(blanks_total) # print to monitor progress
}
head(blanks_total) # view blanks table
data
data %>%
dplyr::filter(Chamber_tank == "blank")
blanks_total
data %>%
dplyr::filter(Chamber_tank == "blank")
blanks_total
dates.runs
# for loop. objective = obtian a mean value for all blanks specific to date, run #, seawater treatment
for(i in 1:nrow(dates.runs)) {
data <- resp.data_merged %>%
dplyr::select(Date, Chamber_tank, Notes, Lpc,  Leq, Lz) %>%
dplyr::filter(!is.na(Lpc)) %>% # ommits empty resp channels (if any)
dplyr::filter(Notes == dates.runs[i,2])
blanks <- data %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::filter(!Lpc > 0) %>%
dplyr::summarise(mean_Lpc = mean(abs(Lpc)),
mean_Leq = mean(abs(Leq)),
mean_Lz = mean(abs(Lz)))
blanks.table$Date           <- dates.runs[i,1] # all files have date in the form of yyyymmdd at the start of each csv name
#blanks.table$RUN <- dates.runs[i,2] # assign the run to the number in the title for the trials completed that day
blanks.table$Notes      <- dates.runs[i,2]
blanks.table$BLANK.mean.Lpc <- blanks[1,1]
blanks.table$BLANK.mean.Leq <- blanks[1,2]
blanks.table$BLANK.mean.Lz  <- blanks[1,3]
# blanks.table$alpha <- data[1,9] # set at start of script - reresents the proportion of data for final estimate of slopes (Lpc, Leq, Lz)
df <- data.frame(blanks.table) # name dataframe for this singl e row
blanks_total <- rbind(blanks_total,df) #bind to a cumulative list dataframe
# print(blanks_total) # print to monitor progress
}
head(blanks_total) # view blanks table
blanks_total
Resp.blanks.merge <- merge(resp.data_merged, blanks_total, by=c("Date", "Notes")) %>% # NOTE: this repeats for every distinct length value
dplyr::filter(!Chamber_tank =='blank') %>%
dplyr::filter(!Lpc > 0) %>% # onlynegative raw lpc values from LoLinR represent oxygen depletion - positive values are errors
dplyr::mutate(resp_norm = abs(Lpc) - BLANK.mean.Lpc)   #  Lpc is still raw data (take abs) then resp - blank - all Lpc are <0 before the abs value taken
Resp.blanks.merge_OM <- Resp.blanks.merge %>% dplyr::filter(resp_norm > 0)  # omits respiration rate values LESS than the blank (resp_norm < 0)
Resp.outliers        <- Resp.blanks.merge %>% dplyr::filter(resp_norm < 0)  # 10 total samples lower than the blank
print(c("number of blank resp > sample resp =",nrow(Resp.outliers)))
count_check_all <- Resp.blanks.merge_OM %>% dplyr::group_by(Date,TempCarbSal) %>% dplyr::summarise(n = n())
knitr::kable(count_check_all)
count_check_true_rates <- Resp.blanks.merge_OM %>% dplyr::filter(!Lpc > 0) %>% dplyr::group_by(Date,TempCarbSal) %>% dplyr::summarise(n = n()) # omit those wit positive values - no oxygen consumption recorded
knitr::kable(count_check_true_rates)
### no HLL after filtered of poor data
vial.vol <- 0.08 # milliliters (ml)
Resp.Master <- merge(Resp.blanks.merge_OM[,c(1,3,5,9:14,18)], counts_resp[,c(1,6:7)], by = c('Date','Chamber_tank'))
Resp.Master$resp_ng_L_indiv_hr <- (
( ( (abs(Resp.Master$resp_norm)*1000000) * # call absolute value of resp in mg per minute - convert to ng min-1
(vial.vol/1000) ) / # correct ng minute-1 to ng liter-1 by multiplying by the resp vial in liters
Resp.Master$Counts ) * # normalize by individual or larvae count - as to ng L-1 individual-1
(60)) # correct for the time; final value is ng Liter-1 individual-1 hour-1
# mean sd rates
# mean(Resp.Master$resp_ng_L_indiv_hr) # mean = 0.4994656
# sd(Resp.Master$resp_ng_L_indiv_hr) # sd= 0.8197345
Resp.Master[,c(1:3,12)]
# a.
Resp_age1_hightemp <- Resp.Master %>%
dplyr::filter(Date %in% '4/30/2021')  %>%
dplyr::filter(Temp %in% 'H') %>%
dplyr::mutate(Treatment = as.character(paste('OA.', pCO2, '_Sal.',Salinity, sep = ''))) %>%
dplyr::mutate(pCO2_Salinity = as.character(substr(TempCarbSal, 2, 3)))
# b.
Resp_age1_hightemp <- merge(Resp_age1_hightemp, aragonite_dat, by = 'TempCarbSal') # merge with the mean aragonite saturation state
## Plot geeom boxlot with jitter
Resp_Age1_Boxplot_hightemp <- ggplot(data=Resp_age1_hightemp,
aes(x=as.factor(Aragonite_saturation),
#aes(x=meanAragonite,
y=resp_ng_L_indiv_hr,
fill=pCO2_Salinity)) +
geom_boxplot()+
geom_jitter(width = 0.1)+
scale_fill_manual(values=c("skyblue2", "darkorange3","royalblue3", "orange2"))+
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title = "Age =24 hours; Respiration rates",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%indiv^{-1}%.% hr^{-1}~")"),
x = "Aragonite saturation") +
theme(axis.title.y = element_text(size = rel(1.3), angle =90), axis.title.x = element_text(size = rel(1.3), angle = 0))+
theme(axis.text=element_text(size=12))
Resp_Age1_Boxplot_hightemp
LMmod.age1_hightemp   <- aov(lm( log(resp_ng_L_indiv_hr)~pCO2*Salinity,data=Resp_age1_hightemp))
print('LM model  == aov( lm ( resp_ng_L_indiv_hr ~ pCO2 * Salinity, data = Resp_APRIL ) )')
LMmod.age1_hightemp   <- aov(lm( log(resp_ng_L_indiv_hr)~pCO2*Salinity,data=Resp_age1_hightemp))
Resp_age1_hightemp
data <- resp.data_merged %>%
dplyr::select(Date, Chamber_tank, Notes, Lpc,  Leq, Lz) %>%
dplyr::filter(!is.na(Lpc)) %>% # ommits empty resp channels (if any)
dplyr::filter(Notes == dates.runs[i,2])
data <- resp.data_merged %>%
dplyr::select(Date, Chamber_tank, Notes, Lpc,  Leq, Lz) %>%
dplyr::filter(!is.na(Lpc))
data %>%
dplyr::filter(Chamber_tank == "blank")
data %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::case_when(Lpc > 0 ~ 0)
data %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::mutate(Lpc = case_when(Lpc >= 0 ~ 0))
data %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::mutate(Lpc = case_when(Lpc >= 0 ~ 0, TRUE ~ Lpc))
data %>%
dplyr::filter(Chamber_tank == "blank")
# for loop. objective = obtian a mean value for all blanks specific to date, run #, seawater treatment
for(i in 1:nrow(dates.runs)) {
data <- resp.data_merged %>%
dplyr::select(Date, Chamber_tank, Notes, Lpc,  Leq, Lz) %>%
dplyr::filter(!is.na(Lpc)) %>% # ommits empty resp channels (if any)
dplyr::filter(Notes == dates.runs[i,2])
blanks <- data %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::mutate(Lpc = case_when(Lpc >= 0 ~ 0, TRUE ~ Lpc)) %>%
dplyr::summarise(mean_Lpc = mean(abs(Lpc)),
mean_Leq = mean(abs(Leq)),
mean_Lz = mean(abs(Lz)))
blanks.table$Date           <- dates.runs[i,1] # all files have date in the form of yyyymmdd at the start of each csv name
#blanks.table$RUN <- dates.runs[i,2] # assign the run to the number in the title for the trials completed that day
blanks.table$Notes      <- dates.runs[i,2]
blanks.table$BLANK.mean.Lpc <- blanks[1,1]
blanks.table$BLANK.mean.Leq <- blanks[1,2]
blanks.table$BLANK.mean.Lz  <- blanks[1,3]
# blanks.table$alpha <- data[1,9] # set at start of script - reresents the proportion of data for final estimate of slopes (Lpc, Leq, Lz)
df <- data.frame(blanks.table) # name dataframe for this singl e row
blanks_total <- rbind(blanks_total,df) #bind to a cumulative list dataframe
# print(blanks_total) # print to monitor progress
}
blanks_total
blanks
dates.runs <- resp.data_merged %>%  # call table
dplyr::distinct(Date, Notes) # call all unique values for date run and sw condition
dates.runs <- na.omit(dates.runs)
# call dataframe and build table to rbind in for loop
blanks_total <- data.frame() # start dataframe
blanks.table <- data.frame(matrix(nrow = 1,ncol = 5)) # make a table template
colnames(blanks.table)<-c('Date', 'Notes', 'BLANK.mean.Lpc', 'BLANK.mean.Leq' , 'BLANK.mean.Lz') # names for comuns in the for loop
# for loop. objective = obtian a mean value for all blanks specific to date, run #, seawater treatment
for(i in 1:nrow(dates.runs)) {
data <- resp.data_merged %>%
dplyr::select(Date, Chamber_tank, Notes, Lpc,  Leq, Lz) %>%
dplyr::filter(!is.na(Lpc)) %>% # ommits empty resp channels (if any)
dplyr::filter(Notes == dates.runs[i,2])
blanks <- data %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::mutate(Lpc = case_when(Lpc >= 0 ~ 0, TRUE ~ Lpc)) %>%
dplyr::summarise(mean_Lpc = mean(abs(Lpc)),
mean_Leq = mean(abs(Leq)),
mean_Lz = mean(abs(Lz)))
blanks.table$Date           <- dates.runs[i,1] # all files have date in the form of yyyymmdd at the start of each csv name
#blanks.table$RUN <- dates.runs[i,2] # assign the run to the number in the title for the trials completed that day
blanks.table$Notes      <- dates.runs[i,2]
blanks.table$BLANK.mean.Lpc <- blanks[1,1]
blanks.table$BLANK.mean.Leq <- blanks[1,2]
blanks.table$BLANK.mean.Lz  <- blanks[1,3]
# blanks.table$alpha <- data[1,9] # set at start of script - reresents the proportion of data for final estimate of slopes (Lpc, Leq, Lz)
df <- data.frame(blanks.table) # name dataframe for this singl e row
blanks_total <- rbind(blanks_total,df) #bind to a cumulative list dataframe
# print(blanks_total) # print to monitor progress
}
blanks_total
Resp.blanks.merge <- merge(resp.data_merged, blanks_total, by=c("Date", "Notes")) %>% # NOTE: this repeats for every distinct length value
dplyr::filter(!Chamber_tank =='blank') %>%
dplyr::filter(!Lpc > 0) %>% # onlynegative raw lpc values from LoLinR represent oxygen depletion - positive values are errors
dplyr::mutate(resp_norm = abs(Lpc) - BLANK.mean.Lpc)   #  Lpc is still raw data (take abs) then resp - blank - all Lpc are <0 before the abs value taken
Resp.blanks.merge_OM <- Resp.blanks.merge %>% dplyr::filter(resp_norm > 0)  # omits respiration rate values LESS than the blank (resp_norm < 0)
Resp.outliers        <- Resp.blanks.merge %>% dplyr::filter(resp_norm < 0)  # 10 total samples lower than the blank
print(c("number of blank resp > sample resp =",nrow(Resp.outliers)))
count_check_all <- Resp.blanks.merge_OM %>% dplyr::group_by(Date,TempCarbSal) %>% dplyr::summarise(n = n())
knitr::kable(count_check_all)
count_check_true_rates <- Resp.blanks.merge_OM %>% dplyr::filter(!Lpc > 0) %>% dplyr::group_by(Date,TempCarbSal) %>% dplyr::summarise(n = n()) # omit those wit positive values - no oxygen consumption recorded
knitr::kable(count_check_true_rates)
vial.vol <- 0.08 # milliliters (ml)
Resp.Master <- merge(Resp.blanks.merge_OM[,c(1,3,5,9:14,18)], counts_resp[,c(1,6:7)], by = c('Date','Chamber_tank'))
Resp.Master$resp_ng_L_indiv_hr <- (
( ( (abs(Resp.Master$resp_norm)*1000000) * # call absolute value of resp in mg per minute - convert to ng min-1
(vial.vol/1000) ) / # correct ng minute-1 to ng liter-1 by multiplying by the resp vial in liters
Resp.Master$Counts ) * # normalize by individual or larvae count - as to ng L-1 individual-1
(60)) # correct for the time; final value is ng Liter-1 individual-1 hour-1
# mean sd rates
# mean(Resp.Master$resp_ng_L_indiv_hr) # mean = 0.4994656
# sd(Resp.Master$resp_ng_L_indiv_hr) # sd= 0.8197345
Resp.Master[,c(1:3,12)]
# a.
Resp_age1_hightemp <- Resp.Master %>%
dplyr::filter(Date %in% '4/30/2021')  %>%
dplyr::filter(Temp %in% 'H') %>%
dplyr::mutate(Treatment = as.character(paste('OA.', pCO2, '_Sal.',Salinity, sep = ''))) %>%
dplyr::mutate(pCO2_Salinity = as.character(substr(TempCarbSal, 2, 3)))
# b.
Resp_age1_hightemp <- merge(Resp_age1_hightemp, aragonite_dat, by = 'TempCarbSal') # merge with the mean aragonite saturation state
## Plot geeom boxlot with jitter
Resp_Age1_Boxplot_hightemp <- ggplot(data=Resp_age1_hightemp,
aes(x=as.factor(Aragonite_saturation),
#aes(x=meanAragonite,
y=resp_ng_L_indiv_hr,
fill=pCO2_Salinity)) +
geom_boxplot()+
geom_jitter(width = 0.1)+
scale_fill_manual(values=c("skyblue2", "darkorange3","royalblue3", "orange2"))+
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title = "Age =24 hours; Respiration rates",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%indiv^{-1}%.% hr^{-1}~")"),
x = "Aragonite saturation") +
theme(axis.title.y = element_text(size = rel(1.3), angle =90), axis.title.x = element_text(size = rel(1.3), angle = 0))+
theme(axis.text=element_text(size=12))
Resp_Age1_Boxplot_hightemp
LMmod.age1_hightemp   <- aov(lm( log(resp_ng_L_indiv_hr)~pCO2*Salinity,data=Resp_age1_hightemp))
print('LM model  == aov( lm ( resp_ng_L_indiv_hr ~ pCO2 * Salinity, data = Resp_APRIL ) )')
pander(anova(LMmod.age1_hightemp), style='rmarkdown') # anova table of lmer
shapiro.test(residuals(LMmod.age1_hightemp)) # 0.592  normal
leveneTest(LMmod.age1_hightemp) # 0.596 good
# c.2 ommit the high outlier resp value (> 0.14)
Resp_age1_hightempOM   <- Resp_age1_hightemp %>% dplyr::filter(!resp_ng_L_indiv_hr > 0.14) # ommit the outlier at ~ 0.15
LMmod.age1_hightempOM  <- aov(lm( log(resp_ng_L_indiv_hr)~pCO2*Salinity,data=Resp_age1_hightempOM))
print('LM model  == aov( lm ( resp_ng_L_indiv_hr ~ pCO2 * Salinity, data = Resp_APRIL ) )')
pander(anova(LMmod.age1_hightempOM), style='rmarkdown') # anova table of lmer
Resp_age1_hightemp
LMmod.age1_hightempOM  <- aov(lm( log(resp_ng_L_indiv_hr)~pCO2*Salinity,data=Resp_age1_hightempOM))
print('LM model  == aov( lm ( resp_ng_L_indiv_hr ~ pCO2 * Salinity, data = Resp_APRIL ) )')
pander(anova(LMmod.age1_hightempOM), style='rmarkdown') # anova table of lmer
# |      &nbsp;       | Df | Sum Sq  | Mean Sq | F value |  Pr(>F)   |
# |:-----------------:|:--:|:-------:|:-------:|:-------:|:---------:|
# |     **pCO2**      | 1  |  6.241  |  6.241  |  30.12  | 0.0009177 |
# |   **Salinity**    | 1  | 0.01217 | 0.01217 | 0.05872 |  0.8155   |
# | **pCO2:Salinity** | 1  | 0.03412 | 0.03412 | 0.1647  |   0.697   |
|   **Residuals**   | 7  |  1.45   | 0.2072  |   NA    |    NA     |
# |      &nbsp;       | Df | Sum Sq  | Mean Sq | F value |  Pr(>F)   |
# |:-----------------:|:--:|:-------:|:-------:|:-------:|:---------:|
# |     **pCO2**      | 1  |  6.241  |  6.241  |  30.12  | 0.0009177 |
# |   **Salinity**    | 1  | 0.01217 | 0.01217 | 0.05872 |  0.8155   |
# | **pCO2:Salinity** | 1  | 0.03412 | 0.03412 | 0.1647  |   0.697   |
# |   **Residuals**   | 7  |  1.45   | 0.2072  |   NA    |    NA     |
check_model(LMmod.age1_hightempOM) # observe the diagnostics of the model
shapiro.test(residuals(LMmod.age1_hightempOM)) # 0.4452  normal
leveneTest(LMmod.age1_hightempOM) # 0.4676 good
Age24hrs_Resp_hightemp.Box <- ggplot(data=Resp_age1_hightempOM, aes(x=fct_relevel(pCO2, c("L", "H")),
y=resp_ng_L_indiv_hr,
colour=fct_relevel(Salinity, c("L", "H")))) +
geom_boxplot() +
theme_classic() +
geom_jitter(width = 0.1)+
ylim(0,0.03) +
stat_summary(fun.y="mean",position = position_dodge2(width = 0.75)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title="Age = 24 hours (high temp only)",
x ="pCO2 level",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%indiv^{-1}%.% hr^{-1}~")")) +
theme(axis.title.y = element_text(size = rel(1.3), angle =90),
axis.title.x = element_text(size = rel(1.3), angle = 0)) +
theme(axis.text=element_text(size=12))
Age24hrs_Resp_hightemp.MEANSE <- Resp_age1_hightempOM %>%
dplyr::group_by(pCO2,Salinity) %>%
dplyr::summarise(mean_resp = mean(resp_ng_L_indiv_hr),
n         = n(),
sd_resp   = sd(resp_ng_L_indiv_hr),
se_resp   = sd_resp/(sqrt(n))) %>%
ggplot(aes(x=fct_relevel(pCO2, c("L", "H")),
y=mean_resp,
colour=fct_relevel(Salinity, c("L", "H")))) +
# linetype = Temp)) +
geom_point(aes (colour = fct_relevel(Salinity, c("L", "H"))), position = "dodge2") +
geom_errorbar(aes(ymin = mean_resp - se_resp, ymax = mean_resp + se_resp), width = 0.5, position= "dodge2") +
theme_classic() +
ylim(0,0.03) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title="Age = 24 hours (high temp only)",
x ="pCO2 level",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%indiv^{-1}%.% hr^{-1}~")"))+
theme(axis.title.y = element_text(size = rel(1.3),
angle =90),
axis.title.x = element_text(size = rel(1.3),
angle = 0)) +
theme(axis.text=element_text(size=12))
print(ggarrange(Age24hrs_Resp_hightemp.MEANSE,Age24hrs_Resp_hightemp.Box))
#print
library(ggpubr)
print(ggarrange(Age24hrs_Resp_hightemp.MEANSE,Age24hrs_Resp_hightemp.Box))
# a.
Resp_age8 <- Resp.Master %>%
dplyr::filter(Date %in% '5/7/2021') %>%
dplyr::mutate(Treatment = as.character(paste('Temp.', Temp, '_OA.', pCO2, '_Sal.',Salinity, sep = ''))) %>%
dplyr::mutate(pCO2_Salinity = as.character(substr(TempCarbSal, 2, 3))) %>%
dplyr::mutate(Temp = (fct_relevel(Temp, c('L','H'))))
# b.
Resp_age8 <- merge(Resp_age8, aragonite_dat, by = 'TempCarbSal') # merge with the mean aragonite saturation state
## Plot geeom boxlot with jitter
Resp_Age8_Boxplot <- ggplot(data=Resp_age8,
aes(x=as.factor(Aragonite_saturation),
#aes(x=meanAragonite,
y=resp_ng_L_indiv_hr,
fill=pCO2_Salinity)) +
geom_boxplot()+
geom_jitter(width = 0.1)+
scale_fill_manual(values=c("skyblue2", "darkorange3","royalblue3", "orange2"))+
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title = "Age = 8 days; Respiration rates",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%indiv^{-1}%.% hr^{-1}~")"),
x = "Aragonite saturation") +
theme(axis.title.y = element_text(size = rel(1.3), angle =90), axis.title.x = element_text(size = rel(1.3), angle = 0))+
theme(axis.text=element_text(size=12)) +
facet_wrap(~Temp )
Resp_Age8_Boxplot
Resp.Master %>%
dplyr::filter(Date %in% '5/7/2021')
# c.
LMmod.age8   <- aov(lm(resp_ng_L_indiv_hr~Temp*pCO2*Salinity,data=Resp_age8))
print('LM model  == aov( lm ( resp_ng_L_indiv_hr ~ Temp * pCO2 * Salinity, data = Resp_APRIL ) )')
summary(LMmod.age8)
# check_model(LMmod.age8) # observe the diagnostics of the model
shapiro.test(residuals(LMmod.age8)) # non normal
leveneTest(LMmod.age8) # good
# d.
Resp_age8_select  <- Resp_age8 %>% dplyr::select(c('resp_ng_L_indiv_hr', 'Temp', 'pCO2', 'Salinity'))
Resp_age8_melt    <- tidyr::gather(Resp_age8_select, variable, value, -resp_ng_L_indiv_hr)
# INTERACTION PLOT
Resp_age8 %>%
dplyr::mutate(full.treatment = (paste(Temp, pCO2, Salinity,sep=''))) %>%
dplyr::mutate(full.treatment = fct_relevel(full.treatment,
"HHH", "HLH", "LHH",'LLH',
"HHL", "LHL", 'LLL')) %>%
ggplot(aes(meanAragonite, resp_ng_L_indiv_hr , group =full.treatment, fill = factor(Temp))) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.05))+
#geom_boxplot(size=.2, alpha=0.1, width =0.2) +
scale_fill_manual(values=c("#D55E00","#56B4E9", "#D55E00","#56B4E9",
"#D55E00","#56B4E9", "#D55E00","#56B4E9")) +
labs(title = "Respiration rates; C virginica day 8",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%indiv^{-1}%.% hr^{-1}~")"),
x = "Aragonite saturation") +
annotate("text", x=0.3, y=0.55, label = "Low Salinity") +
annotate("rect", xmin = 0, xmax = 0.62, ymin = 0, ymax = 0.6, alpha = .1) +
geom_smooth(method = "lm", level = 0.95, alpha = .15, aes(group=Temp,colour = factor(Temp))) +
theme_classic()
Resp_age8
