library(dplyr)
library(ggplot2)
library(reshape2)
setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Cvriginica_multistressor/RAnalysis") # Work computer
exp_metadata <- read.csv(file="Data/ExperimentMetadata.csv", header=T) # treatment assignments to 'Chamber_Tank'
counts_resp  <- read.csv(file="Data/Counts_resp.csv", header=T) # reference for the respirometry data - contains the 'Chamber_Tank' for each sensor channel (whether an animal or a blank)
resp.ref     <- read.csv(file="Data/Respiration/Reference_master.csv", header=T) # reference for the respirometry data - contains the 'Chamber_Tank' for each sensor channel (whether an animal or a blank)
resp.data    <- read.csv(file="Output/Respiration/Cumulative_resp_alpha0.4.csv", header=T) # read the calculate raw rates from 'resp_LoLin' script - contains the calculated rate (not normalized for blanks) for each sensor-channel
# merge the exp_metadata with the resp.data
resp.ref_merged                 <- merge(exp_metadata, resp.ref, by = 'Chamber_tank', all=TRUE) # all TRUE allows us to keep the blanks
resp.data_merged                <- merge(resp.data, resp.ref_merged, by = c('Date', 'Channel','Notes','Filename')) # out master file moving forward....
resp.data_merged$TempCarbSal    <- paste(resp.data_merged$Temp, resp.data_merged$pCO2, resp.data_merged$Salinity, sep ='')
dates.runs <- resp.data_merged %>%  # call table
dplyr::distinct(Date, Notes) # call all unique values for date run and sw condition
dates.runs <- na.omit(dates.runs)
# call dataframe and build table to rbind in for loop
blanks_total <- data.frame() # start dataframe
blanks.table <- data.frame(matrix(nrow = 1,ncol = 5)) # make a table template
colnames(blanks.table)<-c('Date', 'Notes', 'BLANK.mean.Lpc', 'BLANK.mean.Leq' , 'BLANK.mean.Lz') # names for comuns in the for loop
# for loop. objective = obtian a mean value for all blanks specific to date, run #, seawater treatment
for(i in 1:nrow(dates.runs)) {
data <- resp.data_merged %>%
dplyr::select(Date, Chamber_tank, Notes, Lpc,  Leq, Lz) %>%
dplyr::filter(!is.na(Lpc)) %>% # ommits empty resp channels (if any)
dplyr::filter(Notes == dates.runs[i,2])
blanks <- data %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::summarise(mean_Lpc = mean(abs(Lpc)),
mean_Leq = mean(abs(Leq)),
mean_Lz = mean(abs(Lz)))
blanks.table$Date           <- dates.runs[i,1] # all files have date in the form of yyyymmdd at the start of each csv name
#blanks.table$RUN <- dates.runs[i,2] # assign the run to the number in the title for the trials completed that day
blanks.table$Notes      <- dates.runs[i,2]
blanks.table$BLANK.mean.Lpc <- blanks[1,1]
blanks.table$BLANK.mean.Leq <- blanks[1,2]
blanks.table$BLANK.mean.Lz  <- blanks[1,3]
# blanks.table$alpha <- data[1,9] # set at start of script - reresents the proportion of data for final estimate of slopes (Lpc, Leq, Lz)
df <- data.frame(blanks.table) # name dataframe for this singl e row
blanks_total <- rbind(blanks_total,df) #bind to a cumulative list dataframe
print(blanks_total) # print to monitor progress
}
blanks_total # view blanks table
Resp.blanks.merge <- merge(resp.data_merged, blanks_total, by=c("Date", "Notes")) %>% # NOTE: this repeats for every distinct length value
dplyr::filter(!Chamber_tank =='blank') %>%
dplyr::mutate(resp_norm = Lpc - BLANK.mean.Lpc) # calc resp norm - note Lpc is still raw data  - thus a positive resp norm means blank > sample resp - bad data!
Resp.blanks.merge_OM <- Resp.blanks.merge %>% dplyr::filter(!resp_norm > 0)  # omits respiration rate values showing an increase in O2 over time
Resp.outliers <- Resp.blanks.merge_OM %>% dplyr::filter(resp_norm > 0)  # lets lopok at this data - possible troubleshootiung to ID these outliers...
# calculate resp rates
vial.vol <- 0.08 # milliliters (ml)
Resp.Master <- merge(Resp.blanks.merge_OM[,c(1,3,5,9:13,17)], counts_resp[,c(1,6:7)], by = c('Date','Chamber_tank'))
Resp.Master$resp_ng_L_indiv_hr <- (
( ( (abs(Resp.Master$resp_norm)*1000000) * # call absolute value of resp in mg per minute - convert to ng min-1
(vial.vol/1000) ) / # correct ng minute-1 to ng liter-1 by multiplying by the resp vial in liters
Resp.Master$Counts ) * # normalize by individual or larvae count - as to ng L-1 individual-1
(60)) # correct for the time; final value is ng Liter-1 individual-1 hour-1
# mean sd rates
mean(Resp.Master$resp_ng_L_indiv_hr) # mean = 0.4994656
sd(Resp.Master$resp_ng_L_indiv_hr) # sd= 0.8197345
# model effect of treatment on resp rate 20210507
Resp_APRIL <- Resp.Master %>%
dplyr::filter(Date %in% '4/30/2021') %>%
dplyr::filter(!resp_ng_L_indiv_hr >1)
Resp_APRIL
# Stats
LMmod.APRIL   <- aov(lm(resp_ng_L_indiv_hr~Temp*pCO2*Salinity,data=Resp_APRIL))
summary(AOV_APRIL)
summary(LMmod.APRIL)
plot(LMmod.APRIL)
MEmod.APRIL    <- aov(lmer(resp_ng_L_indiv_hr~Temp*pCO2*Salinity + (1|Chamber_tank),REML=TRUE, data=Resp_APRIL))
library(lme)
library(lme4)
library(lmer)
install.packages('lmer')
install.packages('lme')
install.packages('car')
library(lmer)
library(lme4)
leveneTest(ShellLengthMod_D64) # good
library(pander)
library(performance)
library(Rmisc)
library(maditr)
pander(summary(LMmod.APRIL), style='rmarkdown')
check_model(LMmod.APRIL) # observe the diagnostics of the model
shapiro.test(residuals(LMmod.APRIL)) # non normal
leveneTest(LMmod.APRIL) # good
leveneTest(LMmod.APRIL ~ Resp_APRIL$pCO2) # good
library(lmerTest)
# setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis") # Work computer
#setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis") # Work computer
setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis") # Work computer
length            <-read.csv(file="C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis/Data/Survival_Size/Length_master.csv", header = TRUE)
dryweight_CI      <-read.csv(file="C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis/Data/Survival_Size/20211026_length_CI.csv", header = TRUE)
survival_juvenile <-read.csv(file="C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis/Data/Survival_Size/JuvenileSurvival_LengthMeans.csv", header = TRUE)
survival_larvae   <-read.csv(file="C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis/Data/Survival_Size/Survival_2d_18d.csv", header = TRUE)
# Structure of the data - to check that variables are properly assigned to factor or variable
str(length)
library(ggplot2)
library(tidyverse)
# setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis") # Work computer
#setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis") # Work computer
setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis") # Work computer
length            <-read.csv(file="C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis/Data/Survival_Size/Length_master.csv", header = TRUE)
dryweight_CI      <-read.csv(file="C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis/Data/Survival_Size/20211026_length_CI.csv", header = TRUE)
survival_juvenile <-read.csv(file="C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis/Data/Survival_Size/JuvenileSurvival_LengthMeans.csv", header = TRUE)
survival_larvae   <-read.csv(file="C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis/Data/Survival_Size/Survival_2d_18d.csv", header = TRUE)
# Structure of the data - to check that variables are properly assigned to factor or variable
str(length)
library(car)
library(multcompView)
library(agricolae)
library(Rmisc)
library(lmerTest)
library(lme4)
library(pander)
library(performance)
leveneTest(LMmod.APRIL ~ Resp_APRIL$pCO2) # good
leveneTest(LMmod.APRIL ~ Resp_APRIL$pCO2) # good
MEmod.APRIL    <- aov(lmer(resp_ng_L_indiv_hr~Temp*pCO2*Salinity + (1|Chamber_tank),REML=TRUE, data=Resp_APRIL))
MEmod.APRIL
MEmod.APRIL    <- aov(lmer(resp_ng_L_indiv_hr~Temp*pCO2*Salinity + (1|Chamber_tank),REML=TRUE, data=Resp_APRIL))
# POst-hoc tests and exploration of sig effects
TukeyHSD(AOV_APRIL)
# Figures
Resp_APRIL_select  <- Resp_APRIL %>% dplyr::select(c('resp_ng_L_indiv_hr', 'Temp', 'pCO2', 'Salinity'))
Resp_APRIL_melt    <- tidyr::gather(Resp_APRIL_select, variable, value, -resp_ng_L_indiv_hr)
ggplot(Resp_APRIL_melt, aes(value , resp_ng_L_indiv_hr , fill = factor(value ))) +
theme(panel.grid=element_blank()) +
scale_color_manual(values=c("#56B4E9","#D55E00")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.5))+
geom_boxplot(size=0.2, alpha=0.1) +
theme_bw() +
facet_wrap(~variable, scales = "free_y")
Plot <- Resp_APRIL_select %>%
dplyr::mutate(full.treatment = (paste(Temp, pCO2, Salinity,sep=''))) %>%
# dplyr::mutate(full.treatment = (paste(Temp, Salinity,sep=''))) %>%
# dplyr::mutate(full.treatment = (paste(Temp, pCO2,sep=''))) %>%
# dplyr::mutate(full.treatment = fct_relevel(full.treatment,
#                           "HHH", "HLH", "LHH",'LLH',
#                           "HHL", "HLL", "LHL", 'LLL')) %>%
ggplot(aes(full.treatment, resp_ng_L_indiv_hr , fill = factor(full.treatment))) +
scale_color_manual(values=c("#56B4E9","#D55E00")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.5))+
geom_boxplot(size=0.2, alpha=0.1) +
theme_bw()
Plot
# model effect of treatment on resp rate 20210507
Resp_MAY <- Resp.Master %>%
dplyr::filter(Date %in% '5/7/2021') %>%
dplyr::filter(!resp_ng_L_indiv_hr >1)
# Stats
LMmod.MAY   <- aov(lm(resp_ng_L_indiv_hr~Temp*pCO2*Salinity,data=Resp_MAY))
summary(LMmod.MAY)
plot(LMmod.MAY)
# Figures
Resp_MAY_select  <- Resp_MAY %>% dplyr::select(c('resp_ng_L_indiv_hr', 'Temp', 'pCO2', 'Salinity'))
Resp_MAY_melt    <- tidyr::gather(Resp_MAY_select, variable, value, -resp_ng_L_indiv_hr)
ggplot(Resp_MAY_melt, aes(value , resp_ng_L_indiv_hr , fill = factor(value ))) +
theme(panel.grid=element_blank()) +
scale_color_manual(values=c("#56B4E9","#D55E00")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.5))+
geom_boxplot(size=0.2, alpha=0.1) +
theme_bw() +
facet_wrap(~variable, scales = "free_y")
Plot <- Resp_MAY_select %>%
dplyr::mutate(full.treatment = (paste(Temp, pCO2, Salinity,sep=''))) %>%
# dplyr::mutate(full.treatment = (paste(Temp, Salinity,sep=''))) %>%
# dplyr::mutate(full.treatment = (paste(Temp, pCO2,sep=''))) %>%
# dplyr::mutate(full.treatment = fct_relevel(full.treatment,
#                           "HHH", "HLH", "LHH",'LLH',
#                           "HHL", "HLL", "LHL", 'LLL')) %>%
ggplot(aes(full.treatment, resp_ng_L_indiv_hr , fill = factor(full.treatment))) +
scale_color_manual(values=c("#56B4E9","#D55E00")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.5))+
geom_boxplot(size=0.2, alpha=0.1) +
theme_bw()
Plot
