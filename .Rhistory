library(dplyr)
install.packages('dplyr')
install.packages('ggplot2')
install.packages('LoLin')
install.packages('LoLinR')
install.packages('LoLinR')
install.packages('readxl')
install.packages('devtools')
install.packages('tidyr')
install.packages('zoo')
install.packages('reshape')
install.packages('LoLinR')
install_github('colin-olito/LoLinR')
devtools::install_github
install_github('colin-olito/LoLinR')
devtools::install_github
install_github
library(devtools)
devtools::install_github
install_github('colin-olito/LoLinR')
library(LoLinR)
library(LoLinR)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_mutlistressor/")
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/")
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/")
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/")
pwd
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor/")
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Cvirginica_multistressor")
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Cvriginica_multistressor")
# raw loligo data output
data <- read.txt(file="/Data/Respiration/4_6_7_9 April_30_2021.csv", sep=',', header=TRUE)
read.table(file="/Data/Respiration/4_6_7_9 April_30_2021.txt",              # TXT data file indicated as string or full path to the file
header = FALSE,    # Whether to display the header (TRUE) or not (FALSE)
sep = "",          # Separator of the columns of the file
dec = ".")         # Character used to separate decimals of the numbers in the file
data <- read.table(file = "/Data/Respiration/4_6_7_9 April_30_2021.txt", header = TRUE)
setwd("C:/Users/samjg/Documents/Github_repositories/Cvriginica_multistressor")
data <- read.table(file = "/Data/Respiration/4_6_7_9 April_30_2021.txt", header = TRUE)
data <- read.table(file = "Data/Respiration/4_6_7_9 April_30_2021.txt", header = TRUE)
data <- read.table(file = "Data/Respiration/4_6_7_9 April_30_2021.txt", header = F)
data <- read.table(file = "Data/Respiration/4_6_7_9 April_30_2021.txt", header = TRUE)
read.table(file = "Data/Respiration/4_6_7_9 April_30_2021.txt", skip = 56, header=T, sep=",", na.string="NA", fill = TRUE, as.is=TRUE, fileEncoding="latin1")
data <- read.table(file = "Data/Respiration/4_6_7_9 April_30_2021.txt", header = TRUE, skip = 56)
data <- read.table(file = "Data/Respiration/4_6_7_9 April_30_2021.txt", header = TRUE)
data <- read.table(file = "Data/Respiration/4_6_7_9 April_30_2021.txt", header = F)
data <- read.table(file = "Data/Respiration/4_6_7_9 April_30_2021.txt", header = F, skip = 56)
data <- read.table(file = "Data/Respiration/4_6_7_9 April_30_2021.txt")
read.delim2(file = "Data/Respiration/4_6_7_9 April_30_2021.txt", header = TRUE, sep = "\t", dec = ",")
data <- read.delim2(file = "Data/Respiration/4_6_7_9 April_30_2021.txt", header = TRUE, sep = "\t", dec = ",")
head(data)
View(data)
data <- read.delim2(file = "Data/Respiration/4_6_7_9 April_30_2021.txt", header = TRUE)
head(data)
View(data)
data <- read.delim2(file = "Data/Respiration/13_15_10_12 low_temp_hgh_salinity_raw.txt", header = TRUE)
head(data)
View(data)
data <- read.delim2(file = "Data/Respiration/13_15_10_12 low_temp_hgh_salinity_raw.txt", header = TRUE,skip = 37)
head(data)
View(data)
as.table(data)
colnames(data)
data_2 <- data[c(1, 2, 3),]
data_2
data_2 <- data[,c(1, 2, 3)]
data_2
colnames(data)
data
head(data[,1])
install.packages('lubridate')
library(lubridate)
x <- period_to_seconds(data$Date..Time..DD.MM.YYYY.HH.MM.SS.)
data$Date..Time..DD.MM.YYYY.HH.MM.SS.
data[,1]
data$time <- substr(data$Date..Time..DD.MM.YYYY.HH.MM.SS., 10,16)
x <- period_to_seconds(data$time)
data$time
data$time <- substr(data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,17)
x <- period_to_seconds(data$time)
data$time
x <- period_to_seconds(hms(data$time))
x
x <- period_to_seconds(ymdhms(data$Date..Time..DD.MM.YYYY.HH.MM.SS.))
data$time
x
x
data$time_Sec  <- period_to_seconds(hms(data$time))
data$time_Sec[1]
data$secomds   <- data$time_Sec - data$time_Sec[1]
data$seconds   <- data$time_Sec - data$time_Sec[1]
data$seconds
data$time      <- period_to_seconds(hms(substr(data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,17)))
data$time_Sec
data$hrs       <- (data$time_Sec - data$time_Sec[1])/3600
data$mins      <- (data$time_Sec - data$time_Sec[1])/60
data$hrs
data$mins
data
data2 <- data %>% select(!Phase %in% 'Flush')
data2 <- data %>% dplyr::select(!Phase %in% 'Flush')
library(dplyr)
data2 <- data %>% dplyr::select(!Phase %in% 'Flush')
data2 <- data %>% dplyr::filter(!Phase %in% 'Flush')
data2
substr((colnames(data)),5,11)
data2 <- data %>% dplyr::filter(!Phase %in% 'Flush') %>% dplyr::select(substr((colnames(data)),5,12) == 'O2.input')
substr((colnames(data)),5,12)
(substr((colnames(data)),5,12) == 'O2.input')
(substr((colnames(data)),5,12) %in% 'O2.input')
data2 <- data %>% dplyr::filter(!Phase %in% 'Flush') %>% dplyr::select((substr((colnames(data)),5,12) %in% 'O2.input'))
(substr((colnames(data)),5,12) %in% 'O2.input')
isTRUE(substr((colnames(data)),5,12) %in% 'O2.input')
(substr((colnames(data)),5,12) %in% 'O2.input') == TRUE
(substr((colnames(data)),5,12) %in% 'O2.input')
colnames(substr((colnames(data)),5,12) == 'O2.input'))
colnames((substr((colnames(data)),5,12) == 'O2.input'))
colnames(substr((colnames(data)),5,12) == 'O2.input')
(substr((colnames(data)),5,12) == 'O2.input')
data2 <- data %>%
dplyr::filter(!Phase %in% 'Flush') %>%
dplyr::select(contains("O2.input"))
data2
data2 <- data %>%
data2 <- data %>%
dplyr::filter(!Phase %in% 'Flush') %>%
dplyr::select(c(hrs,mins,contains("O2.input")))
data2 <- data %>%
dplyr::filter(!Phase %in% 'Flush') %>%
dplyr::select(c(hrs,mins,contains("O2.input")))
data2
data
data2 <- data %>%
dplyr::filter(!Phase %in% 'Flush') %>%
dplyr::select(c(hrs,mins,contains("air.sat")))
data2
colnames(data2) <- substr(colnames(data2), 1,3)
data2
# CHANGE THE FOLLOWING ..THEN CONTROL A + ENTER ::::::::::::::::::::::
path.p<-"Data/Respiration" #the location of all your respirometry files
# bring in the respiration file names CHANGE LINE 53 TO RUN NEW DATASETS
file.names.full<-basename(list.files(path = path.p, pattern = "txt$", recursive = TRUE)) #list all csv file names in the folder and subfolders
file.names.full
file.names <- file.names.full[c(1:20)] # call the files you want to analyze and rbind to the current cumunaltive file
file.names
file.names
file.names
df_total <- data.frame() # start dataframe
resp.table <- data.frame(matrix(nrow = 1, ncol = 7)) # create dataframe to save cumunalitively during for loop
resp.table <- data.frame(matrix(nrow = 1, ncol = 6)) # create dataframe to save cumunalitively during for loop
colnames(resp.table)<-c('Filename', 'Channel', 'Lpc', 'Leq' , 'Lz', 'alpha') # names for comuns in the for loop
file.names
path.p,file.names[1]
# CHANGE THE FOLLOWING ..THEN CONTROL A + ENTER ::::::::::::::::::::::
path.p<-"Data/Respiration" #the location of all your respirometry files
path.p
(path.p,file.names[1])
file.names[1]
str(path.p,'/',file.names[1])
paste(path.p,'/',file.names[1], sep='')
Resp.Data <-read.delim2(file = paste(path.p,'/',file.names[1], sep=''), header = TRUE,skip = 37) #reads in the data files
Resp.Data <-read.delim2(file = paste(path.p,'/',file.names[1], sep=''), header = TRUE,skip = 37) #reads in the data files
paste(path.p,'/',file.names[1]
paste(path.p,'/',file.names[1], sep='')
paste(path.p,'/',file.names[1], sep='')
read.delim2(file = paste(path.p,'/',file.names[1], sep=''), header = TRUE,skip = 37)
read.delim2(file = paste(path.p,'/',file.names[2], sep=''), header = TRUE,skip = 37)
read.delim2(file = paste(path.p,'/',file.names[3], sep=''), header = TRUE,skip = 37)
Resp.Data$time_Sec  <- period_to_seconds(hms(substr(Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,17)))
Resp.Data <-read.delim2(file = paste(path.p,'/',file.names[3], sep=''), header = TRUE,skip = 37) #reads in the data files
Resp.Data$time_Sec  <- period_to_seconds(hms(substr(Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,17)))
Resp.Data$mins      <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])/60
Resp.Data$mins
Resp.Data2 <- Resp.Data %>%
dplyr::filter(!Phase %in% 'Flush') %>%
dplyr::select(c(hrs,mins,contains("air.sat"))) %>%
dplyr::select(!AMB)
Resp.Data2 <- Resp.Data %>%
dplyr::filter(!Phase %in% 'Flush') %>%
dplyr::select(c(mins,contains("air.sat"))) %>%
dplyr::select(!AMB)
Resp.Data2 <- Resp.Data %>%
dplyr::filter(!Phase %in% 'Flush') %>%
dplyr::select(c(mins,contains("air.sat"))) %>%
dplyr::select(!'AMB')
Resp.Data2 <- Resp.Data %>%
dplyr::filter(!Phase %in% 'Flush') %>%
dplyr::select(c(mins,contains("air.sat")))
Resp.Data2
colnames(Resp.Data2) <- substr(colnames(Resp.Data2), 1,3)
Resp.Data2
Resp.Data2 <- Resp.Data2 %>% dplyr::select(!AMB)
Resp.Data2
Resp.Data
Resp.Data2 <- Resp.Data %>%
dplyr::filter(!Phase %in% 'Flush') %>%
dplyr::select(c(mins,contains("2...air.sat")))
colnames(Resp.Data2) <- substr(colnames(Resp.Data2), 1,3)
Resp.Data2
Resp.Data
Resp.Data2 <- Resp.Data %>%
dplyr::filter(!Phase %in% 'Flush') %>%
dplyr::select(c(mins,contains(".O2...air.sat")))
colnames(Resp.Data2) <- substr(colnames(Resp.Data2), 1,3)
Resp.Data2
Resp.Data <- Resp.Data %>%
dplyr::filter(!Phase %in% 'Flush') %>%
dplyr::select(c(mins,contains(".O2...air.sat")))
colnames(Resp.Data) <- substr(colnames(Resp.Data), 1,3)
2:(ncol(Resp.Data2)-1
a <- 0.4
Resp.Data
for(j in 2:(ncol(Resp.Data)-1)){
model <- rankLocReg(
xall=Resp.Data$min, yall=as.numeric(Resp.Data[, j]),
alpha=a, method="pc", verbose=TRUE) # run the LoLin script
sum.table<-summary(model)
# resp.table$Date <- substr(file.names[i], 1,8) # all files have date in the form of yyyymmdd at the start of each csv name
#  resp.table$RUN <- substr(file.names[i], 15,15) # assign the run to the number in the title for the trials completed that day
# resp.table$SDR_position <- colnames(Resp.Data[j]) # assign the vial position - this will be related to contents (blank or individuals) later in script
resp.table$alpha <- a # set at start of script - reresents the proportion of data for final estimate of slopes (Lpc, Leq, Lz)
resp.table$Lpc <-sum.table$Lcompare[3,6] # Lpc slope
resp.table$Leq <-sum.table$Lcompare[2,6] # Leq slope
resp.table$Lz <-sum.table$Lcompare[1,6]  # Lz slope
#resp.table$ci.Lz<-sum.table$Lcompare[1,9]
#resp.table$ci.Leq<-sum.table$Lcompare[2,9]
#resp.table$ci.Lpc<-sum.table$Lcompare[3,9]
df <- data.frame(resp.table) # name dataframe for this singl e row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
print(df_total) # print to monitor progress
# save plots every inside loop and name by date_run_vialposition
#pdf(paste0("C:/Users/samjg/Documents/My_Projects/Inragenerational_thresholds_OA/RAnalysis/Data/SDR_data/All_resp_data/plots_alpha0.4/",substr(file.names[i], 1,8),"_", "RUN",substr(file.names[i], 15,15),"_",colnames(Resp.Data[j]),"_regression.pdf"))
plot(model)
dev.off()
} # end of inside for loop
# save plots every inside loop and name by date_run_vialposition
#pdf(paste0("C:/Users/samjg/Documents/My_Projects/Inragenerational_thresholds_OA/RAnalysis/Data/SDR_data/All_resp_data/plots_alpha0.4/",substr(file.names[i], 1,8),"_", "RUN",substr(file.names[i], 15,15),"_",colnames(Resp.Data[j]),"_regression.pdf"))
plot(model)
df_total
df_total
Resp.Data[, 2]
model <- rankLocReg(
xall=Resp.Data$min, yall=as.numeric(Resp.Data[, 2]),
alpha=a, method="pc", verbose=TRUE) # run the LoLin script
Resp.Data$min
View(Resp.Data)
Resp.Data <-read.delim2(file = paste(path.p,'/',file.names[3], sep=''), header = TRUE,skip = 37) #reads in the data files
View(Resp.Data)
strptime("April 21 2016 09:50:49 PM", "%B %d %Y %I:%M:%S %p")
strptime("April 21 2016 09:50:49 PM", "%I:%M:%S %p")
data$Date..Time..DD.MM.YYYY.HH.MM.SS.
data$time_Sec  <- period_to_seconds(hms(substr(data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,20)))
data$time_Sec
strptime(substr(data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,20), "%B %d %Y %I:%M:%S %p")
substr(data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,20)
strptime(substr(data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,20), "%I:%M:%S %p")
data$Date..Time..DD.MM.YYYY.HH.MM.SS.
substr(data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,20)
strptime(substr(data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,20), "%I:%M:%S %p")
data$Date..Time..DD.MM.YYYY.HH.MM.SS.
data$time_Sec  <- period_to_seconds(hms(substr((strptime(substr(data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,20), "%I:%M:%S %p"), 11,20)))
data$time_Sec  <- period_to_seconds(hms(substr(
(strptime(substr(data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,20), "%I:%M:%S %p"))
, 11,20)))
data$time_Sec
data$mins      <- (data$time_Sec - data$time_Sec[1])/60
data$mins
Resp.Data <-read.delim2(file = paste(path.p,'/',file.names[3], sep=''), header = TRUE,skip = 37) #reads in the data files
Resp.Data$time_Sec  <- period_to_seconds(hms(substr(
(strptime(substr(data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,20), "%I:%M:%S %p"))
, 11,17)))
Resp.Data$time_Sec  <- period_to_seconds(hms(substr(
(strptime(substr(Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,20), "%I:%M:%S %p"))
, 11,17)))
Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.
strptime(substr(Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,20)
(strptime(substr(Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,20)), "%I:%M:%S %p")
substr(Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,20)
data$Date..Time..DD.MM.YYYY.HH.MM.SS.
substr(Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,21))
substr(Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,21)
(strptime(substr(Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,21), "%I:%M:%S %p"))
substr(
(strptime(substr(Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,21), "%I:%M:%S %p"))
, 11,17))
substr(
(strptime(substr(Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,21), "%I:%M:%S %p"))
, 11,17)
(strptime(substr(Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,21), "%I:%M:%S %p"))
substr(
(strptime(substr(Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,21), "%I:%M:%S %p"))
, 12,18)
substr(
(strptime(substr(Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,21), "%I:%M:%S %p"))
, 12,19)
Resp.Data$time_Sec  <- period_to_seconds(hms(substr(
(strptime(substr(Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS., 11,21), "%I:%M:%S %p"))
, 12,19)))
Resp.Data$time_Sec
Resp.Data$mins      <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])/60
Resp.Data$mins
Resp.Data <- Resp.Data %>%
dplyr::filter(!Phase %in% 'Flush') %>%
dplyr::select(c(mins,contains(".O2...air.sat")))
colnames(Resp.Data) <- substr(colnames(Resp.Data), 1,3)
Resp.Data
View(Resp.Data)
model <- rankLocReg(
xall=Resp.Data$min, yall=as.numeric(Resp.Data[, 2]),
alpha=a, method="pc", verbose=TRUE) # run the LoLin script
?rankLocReg
Resp.Data[c(1:200), 2]
as.numeric(Resp.Data[c(1:200), 2])
Resp.Data$min
model <- rankLocReg(
xall=Resp.Data$min, yall=as.numeric(Resp.Data[c(1:200), 2]),
alpha=a, method="pc", verbose=TRUE) # run the LoLin script
model <- rankLocReg(
xall=as.numeric(Resp.Data[c(1:200), 1]), yall=as.numeric(Resp.Data[c(1:200), 2]),
# xall=Resp.Data$min, yall=as.numeric(Resp.Data[c(1:200), 2]),
alpha=a, method="pc", verbose=TRUE) # run the LoLin script
sum.table<-summary(model)
sum.table
# save plots every inside loop and name by date_run_vialposition
#pdf(paste0("C:/Users/samjg/Documents/My_Projects/Inragenerational_thresholds_OA/RAnalysis/Data/SDR_data/All_resp_data/plots_alpha0.4/",substr(file.names[i], 1,8),"_", "RUN",substr(file.names[i], 15,15),"_",colnames(Resp.Data[j]),"_regression.pdf"))
plot(model)
# save plots every inside loop and name by date_run_vialposition
#pdf(paste0("C:/Users/samjg/Documents/My_Projects/Inragenerational_thresholds_OA/RAnalysis/Data/SDR_data/All_resp_data/plots_alpha0.4/",substr(file.names[i], 1,8),"_", "RUN",substr(file.names[i], 15,15),"_",colnames(Resp.Data[j]),"_regression.pdf"))
plot(model)
a <- 1:120
a
b <- a[seq(1, length(a), 6)]
b
b <- a[seq(1, length(Resp.Data), 15)]
b <- Resp.Data[seq(1, length(Resp.Data), 15)]
b
b <- Resp.Data[seq(2, length(Resp.Data), 15)]
b
b <- Resp.Data[seq(1, length(Resp.Data), 35)]
b
model <- rankLocReg(
xall=as.numeric(Resp.Data[seq(1, length(Resp.Data), 15)]), yall=as.numeric(Resp.Data[seq(2, length(Resp.Data), 15)]),
# xall=Resp.Data$min, yall=as.numeric(Resp.Data[c(1:200), 2]),
alpha=a, method="pc", verbose=TRUE) # run the LoLin script
as.numeric(Resp.Data[seq(2, length(Resp.Data), 15)])
(Resp.Data[seq(2, length(Resp.Data), 15)])
model <- rankLocReg(
xall=(Resp.Data[seq(1, length(Resp.Data), 15)]), yall=(Resp.Data[seq(2, length(Resp.Data), 15)]),
# xall=Resp.Data$min, yall=as.numeric(Resp.Data[c(1:200), 2]),
alpha=a, method="pc", verbose=TRUE) # run the LoLin script
model <- rankLocReg(
xall=as.numeric(Resp.Data[seq(1, length(Resp.Data), 15)]), yall=(Resp.Data[seq(2, length(Resp.Data), 15)]),
# xall=Resp.Data$min, yall=as.numeric(Resp.Data[c(1:200), 2]),
alpha=a, method="pc", verbose=TRUE) # run the LoLin script
as.numeric(Resp.Data[seq(1, length(Resp.Data), 15)])
(Resp.Data[seq(1, length(Resp.Data), 15)])
Resp.Data[seq(1, length(Resp.Data), 15),]
Resp.Data[seq(1, length(Resp.Data), 15)]
a <- 1:120
b <- a[seq(1, length(a), 15)]
b
a <- 0.4
model <- rankLocReg(
xall=(Resp.Data[seq(1, length(Resp.Data), 15)]), yall=(Resp.Data[seq(2, length(Resp.Data), 15)]),
# xall=Resp.Data$min, yall=as.numeric(Resp.Data[c(1:200), 2]),
alpha=a, method="pc", verbose=TRUE) # run the LoLin script
model <- rankLocReg(
xall=as.numeric(Resp.Data[seq(1, length(Resp.Data), 15)]), yall=(Resp.Data[seq(2, length(Resp.Data), 15)]),
# xall=Resp.Data$min, yall=as.numeric(Resp.Data[c(1:200), 2]),
alpha=a, method="pc", verbose=TRUE) # run the LoLin script
(Resp.Data[seq(2, length(Resp.Data), 15)])
model <- rankLocReg(
xall=as.numeric(Resp.Data[seq(1, length(Resp.Data), 15)]), yall=as.numeric(Resp.Data[seq(2, length(Resp.Data), 15)]),
# xall=Resp.Data$min, yall=as.numeric(Resp.Data[c(1:200), 2]),
alpha=a, method="pc", verbose=TRUE) # run the LoLin script
a
model <- rankLocReg(
xall=as.numeric(Resp.Data[seq(1, length(Resp.Data), 15)]), yall=as.numeric(Resp.Data[seq(2, length(Resp.Data), 15)]),
# xall=Resp.Data$min, yall=as.numeric(Resp.Data[c(1:200), 2]),
alpha=a, method="pc", verbose=TRUE) # run the LoLin script
# Resp.Data$Time.Min. <- seq.int(0.017, (nrow(Resp.Data))*0.25, by=0.25) #set time in min
#Resp.Data[Resp.Data[,] == "No Sensor"] <- as.numeric(runif(nrow(Resp.Data), min=0, max=300)) #convert any vials with no data
# Resp.Data <- Resp.Data[,2:27] #use only res values - 24 total in the 24 well plate (SDR SensorDish)
# Resp.Data <- Resp.Data[20:89,] # truncated for 5-20 minnute record (used for juv geoduck 20190116)
# tail(Resp.Data) # check the dataset
Resp.Data_15sec = Resp.Data[seq(1, nrow(Resp.Data), 15)]
nrow(Resp.Data)
Resp.Data[seq(1, nrow(Resp.Data), 15), ]
# Resp.Data$Time.Min. <- seq.int(0.017, (nrow(Resp.Data))*0.25, by=0.25) #set time in min
#Resp.Data[Resp.Data[,] == "No Sensor"] <- as.numeric(runif(nrow(Resp.Data), min=0, max=300)) #convert any vials with no data
# Resp.Data <- Resp.Data[,2:27] #use only res values - 24 total in the 24 well plate (SDR SensorDish)
# Resp.Data <- Resp.Data[20:89,] # truncated for 5-20 minnute record (used for juv geoduck 20190116)
# tail(Resp.Data) # check the dataset
Resp.Data_15sec = Resp.Data[seq(1, nrow(Resp.Data), 15), ]
model <- rankLocReg(
xall=as.numeric(Resp.Data_15sec[, 1]), yall=as.numeric(Resp.Data_15sec[, 2]),
# xall=Resp.Data$min, yall=as.numeric(Resp.Data[c(1:200), 2]),
alpha=a, method="pc", verbose=TRUE) # run the LoLin script
sum.table<-summary(model)
sum.table
